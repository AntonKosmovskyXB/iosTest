/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgProgressComponent } from './ng-progress.component';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as ɵngcc0 from '@angular/core';
var NgProgressModule = /** @class */ (function () {
    function NgProgressModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgProgressModule.withConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgProgressModule,
            providers: [
                { provide: NG_PROGRESS_CONFIG, useValue: config }
            ]
        };
    };
NgProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgProgressModule });
NgProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgProgressModule_Factory(t) { return new (t || NgProgressModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgProgressModule, { declarations: function () { return [NgProgressComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgProgressComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressModule, [{
        type: NgModule,
        args: [{
                declarations: [NgProgressComponent],
                exports: [NgProgressComponent],
                imports: [CommonModule]
            }]
    }], function () { return []; }, null); })();
    return NgProgressModule;
}());
export { NgProgressModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovQG5neC1wcm9ncmVzc2Jhci9jb3JlL2xpYi9uZy1wcm9ncmVzcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQW9CLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7O0FBRS9FO0FBRUMsSUFGRDtBQUNrQixJQWFsQixDQUFDO0FBQ0Q7QUFBUTtBQUF5QjtBQUFtQjtBQUFRLElBVG5ELDJCQUFVO0FBQU87QUFBeUI7QUFDbEQ7QUFBUSxJQURQLFVBQWtCLE1BQXdCO0FBQUksUUFDNUMsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGdCQUFnQjtBQUNoQyxZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUSxFQUFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFDO0FBQ3ZELGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7b0RBYkYsUUFBUSxTQUFDO2NBQ1IsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUMsc0JBQ25DLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDLHNCQUM5QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsa0JBQ3hCOzs7Ozs7Ozs7Z0RBQ1E7QUFBQyxJQVNWLHVCQUFDO0FBQ0EsQ0FEQSxBQWRELElBY0M7O0FBbkJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBY0EsQUFBQSxBQVJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFiQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVVBLEFBQUEsQUFBQSxBQWRBLEFBY0EsQUFUQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc0NvbXBvbmVudCB9IGZyb20gJy4vbmctcHJvZ3Jlc3MuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc0NvbmZpZywgTkdfUFJPR1JFU1NfQ09ORklHIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy5pbnRlcmZhY2UnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtOZ1Byb2dyZXNzQ29tcG9uZW50XSxcclxuICBleHBvcnRzOiBbTmdQcm9ncmVzc0NvbXBvbmVudF0sXHJcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NNb2R1bGUge1xyXG4gIHN0YXRpYyB3aXRoQ29uZmlnKGNvbmZpZzogTmdQcm9ncmVzc0NvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IE5nUHJvZ3Jlc3NNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtwcm92aWRlOiBOR19QUk9HUkVTU19DT05GSUcsIHVzZVZhbHVlOiBjb25maWd9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==