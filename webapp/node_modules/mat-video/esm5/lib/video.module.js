/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from "@angular/common";
import { NgModule } from "@angular/core";
import { MatButtonModule } from "@angular/material/button";
import { MatIconModule } from "@angular/material/icon";
import { MatSliderModule } from "@angular/material/slider";
import { MatVideoSourceDirective } from "./directives/mat-video-source.directive";
import { MatVideoTrackDirective } from "./directives/mat-video-track.directive";
import { MatSliderProgressBarComponent } from "./internal/mat-slider-progress-bar/mat-slider-progress-bar.component";
import { SecondsToTimePipe } from "./pipes/seconds-to-time.pipe";
import { EventService } from "./services/event.service";
import { FullscreenService } from "./services/fullscreen.service";
import { MatDownloadButtonComponent } from "./ui/mat-download-button/mat-download-button.component";
import { MatFrameByFrameControlComponent } from "./ui/mat-frame-by-frame-control/mat-frame-by-frame-control.component";
import { MatFullscreenButtonComponent } from "./ui/mat-fullscreen-button/mat-fullscreen-button.component";
import { MatPlayButtonComponent } from "./ui/mat-play-button/mat-play-button.component";
import { MatQualityControlComponent } from "./ui/mat-quality-control/mat-quality-control.component";
import { MatSeekProgressControlComponent } from "./ui/mat-seek-progress-control/mat-seek-progress-control.component";
import { MatTimeControlComponent } from "./ui/mat-time-control/mat-time-control.component";
import { MatVideoSpinnerComponent } from "./ui/mat-video-spinner/mat-video-spinner.component";
import { MatVolumeControlComponent } from "./ui/mat-volume-control/mat-volume-control.component";
import { MatVideoComponent } from "./video.component";
import * as ɵngcc0 from '@angular/core';
var MatVideoModule = /** @class */ (function () {
    function MatVideoModule() {
    }
MatVideoModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatVideoModule });
MatVideoModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatVideoModule_Factory(t) { return new (t || MatVideoModule)(); }, providers: [FullscreenService, EventService], imports: [[CommonModule, MatIconModule, MatButtonModule, MatSliderModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatVideoModule, { declarations: function () { return [SecondsToTimePipe,
        MatVideoComponent,
        MatSliderProgressBarComponent,
        MatPlayButtonComponent,
        MatVolumeControlComponent,
        MatDownloadButtonComponent,
        MatFullscreenButtonComponent,
        MatTimeControlComponent,
        MatQualityControlComponent,
        MatVideoSpinnerComponent,
        MatSeekProgressControlComponent,
        MatVideoSourceDirective,
        MatVideoTrackDirective,
        MatFrameByFrameControlComponent]; }, imports: function () { return [CommonModule, MatIconModule, MatButtonModule, MatSliderModule]; }, exports: function () { return [MatVideoComponent, MatVideoSourceDirective, MatVideoTrackDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatVideoModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    SecondsToTimePipe,
                    MatVideoComponent,
                    MatSliderProgressBarComponent,
                    MatPlayButtonComponent,
                    MatVolumeControlComponent,
                    MatDownloadButtonComponent,
                    MatFullscreenButtonComponent,
                    MatTimeControlComponent,
                    MatQualityControlComponent,
                    MatVideoSpinnerComponent,
                    MatSeekProgressControlComponent,
                    MatVideoSourceDirective,
                    MatVideoTrackDirective,
                    MatFrameByFrameControlComponent
                ],
                imports: [CommonModule, MatIconModule, MatButtonModule, MatSliderModule],
                exports: [MatVideoComponent, MatVideoSourceDirective, MatVideoTrackDirective],
                providers: [FullscreenService, EventService]
            }]
    }], function () { return []; }, null); })();
    return MatVideoModule;
}());
export { MatVideoModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8ubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovbWF0LXZpZGVvL2xpYi92aWRlby5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTNELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHNFQUFzRSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNwRyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzRUFBc0UsQ0FBQztBQUN2SCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUMxRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN4RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNwRyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUNySCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUM5RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNqRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7QUFFdEQ7QUFFb0IsSUFGcEI7QUFDZ0IsSUFvQmEsQ0FBQztrREFyQjdCLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsMEJBQ1osaUJBQWlCLDBCQUNqQixpQkFBaUIsMEJBQ2pCLDZCQUE2QiwwQkFDN0Isc0JBQXNCLDBCQUN0QjtZQUF5QiwwQkFDekIsMEJBQTBCLDBCQUMxQiw0QkFBNEIsMEJBQzVCO0VBQXVCO0NBQ3ZCLDBCQUEwQjtjQUMxQjtNQUF3QiwwQkFDeEI7NEJBQStCO2tCQUMvQjtHQUF1QiwwQkFDdkI7a0JBQXNCO1FBQ3RCO0tBQStCLHNCQUNoQztRQUNELE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRTtZQUFhLEVBQUUsZUFBZSxFQUFFO2NBQWUsQ0FBQyxzQkFDeEUsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsdUJBQXVCLEVBQUUsc0JBQXNCLENBQUMsc0JBQzdFLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxrQkFDN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnREFDUTtBQUFDLElBQW1CLHFCQUFDO0FBQzdCLENBRDZCLEFBckI5QixJQXFCOEI7O0FBNUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFxQkEsQUFBQSxBQXJCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFyQkEsQUFxQkEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9idXR0b25cIjtcclxuaW1wb3J0IHsgTWF0SWNvbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9pY29uXCI7XHJcbmltcG9ydCB7IE1hdFNsaWRlck1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9zbGlkZXJcIjtcclxuXHJcbmltcG9ydCB7IE1hdFZpZGVvU291cmNlRGlyZWN0aXZlIH0gZnJvbSBcIi4vZGlyZWN0aXZlcy9tYXQtdmlkZW8tc291cmNlLmRpcmVjdGl2ZVwiO1xyXG5pbXBvcnQgeyBNYXRWaWRlb1RyYWNrRGlyZWN0aXZlIH0gZnJvbSBcIi4vZGlyZWN0aXZlcy9tYXQtdmlkZW8tdHJhY2suZGlyZWN0aXZlXCI7XHJcbmltcG9ydCB7IE1hdFNsaWRlclByb2dyZXNzQmFyQ29tcG9uZW50IH0gZnJvbSBcIi4vaW50ZXJuYWwvbWF0LXNsaWRlci1wcm9ncmVzcy1iYXIvbWF0LXNsaWRlci1wcm9ncmVzcy1iYXIuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IFNlY29uZHNUb1RpbWVQaXBlIH0gZnJvbSBcIi4vcGlwZXMvc2Vjb25kcy10by10aW1lLnBpcGVcIjtcclxuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvZXZlbnQuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBGdWxsc2NyZWVuU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL2Z1bGxzY3JlZW4uc2VydmljZVwiO1xyXG5pbXBvcnQgeyBNYXREb3dubG9hZEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCIuL3VpL21hdC1kb3dubG9hZC1idXR0b24vbWF0LWRvd25sb2FkLWJ1dHRvbi5jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgTWF0RnJhbWVCeUZyYW1lQ29udHJvbENvbXBvbmVudCB9IGZyb20gXCIuL3VpL21hdC1mcmFtZS1ieS1mcmFtZS1jb250cm9sL21hdC1mcmFtZS1ieS1mcmFtZS1jb250cm9sLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBNYXRGdWxsc2NyZWVuQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIi4vdWkvbWF0LWZ1bGxzY3JlZW4tYnV0dG9uL21hdC1mdWxsc2NyZWVuLWJ1dHRvbi5jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgTWF0UGxheUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCIuL3VpL21hdC1wbGF5LWJ1dHRvbi9tYXQtcGxheS1idXR0b24uY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IE1hdFF1YWxpdHlDb250cm9sQ29tcG9uZW50IH0gZnJvbSBcIi4vdWkvbWF0LXF1YWxpdHktY29udHJvbC9tYXQtcXVhbGl0eS1jb250cm9sLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBNYXRTZWVrUHJvZ3Jlc3NDb250cm9sQ29tcG9uZW50IH0gZnJvbSBcIi4vdWkvbWF0LXNlZWstcHJvZ3Jlc3MtY29udHJvbC9tYXQtc2Vlay1wcm9ncmVzcy1jb250cm9sLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBNYXRUaW1lQ29udHJvbENvbXBvbmVudCB9IGZyb20gXCIuL3VpL21hdC10aW1lLWNvbnRyb2wvbWF0LXRpbWUtY29udHJvbC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgTWF0VmlkZW9TcGlubmVyQ29tcG9uZW50IH0gZnJvbSBcIi4vdWkvbWF0LXZpZGVvLXNwaW5uZXIvbWF0LXZpZGVvLXNwaW5uZXIuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IE1hdFZvbHVtZUNvbnRyb2xDb21wb25lbnQgfSBmcm9tIFwiLi91aS9tYXQtdm9sdW1lLWNvbnRyb2wvbWF0LXZvbHVtZS1jb250cm9sLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBNYXRWaWRlb0NvbXBvbmVudCB9IGZyb20gXCIuL3ZpZGVvLmNvbXBvbmVudFwiO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIFNlY29uZHNUb1RpbWVQaXBlLFxyXG4gICAgTWF0VmlkZW9Db21wb25lbnQsXHJcbiAgICBNYXRTbGlkZXJQcm9ncmVzc0JhckNvbXBvbmVudCxcclxuICAgIE1hdFBsYXlCdXR0b25Db21wb25lbnQsXHJcbiAgICBNYXRWb2x1bWVDb250cm9sQ29tcG9uZW50LFxyXG4gICAgTWF0RG93bmxvYWRCdXR0b25Db21wb25lbnQsXHJcbiAgICBNYXRGdWxsc2NyZWVuQnV0dG9uQ29tcG9uZW50LFxyXG4gICAgTWF0VGltZUNvbnRyb2xDb21wb25lbnQsXHJcbiAgICBNYXRRdWFsaXR5Q29udHJvbENvbXBvbmVudCxcclxuICAgIE1hdFZpZGVvU3Bpbm5lckNvbXBvbmVudCxcclxuICAgIE1hdFNlZWtQcm9ncmVzc0NvbnRyb2xDb21wb25lbnQsXHJcbiAgICBNYXRWaWRlb1NvdXJjZURpcmVjdGl2ZSxcclxuICAgIE1hdFZpZGVvVHJhY2tEaXJlY3RpdmUsXHJcbiAgICBNYXRGcmFtZUJ5RnJhbWVDb250cm9sQ29tcG9uZW50XHJcbiAgXSxcclxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBNYXRJY29uTW9kdWxlLCBNYXRCdXR0b25Nb2R1bGUsIE1hdFNsaWRlck1vZHVsZV0sXHJcbiAgZXhwb3J0czogW01hdFZpZGVvQ29tcG9uZW50LCBNYXRWaWRlb1NvdXJjZURpcmVjdGl2ZSwgTWF0VmlkZW9UcmFja0RpcmVjdGl2ZV0sXHJcbiAgcHJvdmlkZXJzOiBbRnVsbHNjcmVlblNlcnZpY2UsIEV2ZW50U2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE1hdFZpZGVvTW9kdWxlIHt9XHJcbiJdfQ==