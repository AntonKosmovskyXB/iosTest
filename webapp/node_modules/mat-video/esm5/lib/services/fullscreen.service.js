/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var FullscreenService = /** @class */ (function () {
    function FullscreenService() {
        this.fnMap = [
            // Object keys
            ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"],
            // New WebKit
            [
                "webkitRequestFullscreen",
                "webkitExitFullscreen",
                "webkitFullscreenElement",
                "webkitFullscreenEnabled",
                "webkitfullscreenchange",
                "webkitfullscreenerror"
            ],
            // Old WebKit (Safari 5.1)
            [
                "webkitRequestFullScreen",
                "webkitCancelFullScreen",
                "webkitCurrentFullScreenElement",
                "webkitCancelFullScreen",
                "webkitfullscreenchange",
                "webkitfullscreenerror"
            ],
            // Mozilla
            [
                "mozRequestFullScreen",
                "mozCancelFullScreen",
                "mozFullScreenElement",
                "mozFullScreenEnabled",
                "mozfullscreenchange",
                "mozfullscreenerror"
            ],
            // MS
            ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]
        ];
        this.keyboardAllowed = typeof Element !== "undefined" && "ALLOW_KEYBOARD_INPUT" in Element;
        /** @type {?} */
        var ret = {};
        /** @type {?} */
        var val;
        for (var i = 0; i < this.fnMap.length; i++) {
            val = this.fnMap[i];
            if (val && val[1] in document) {
                for (i = 0; i < val.length; i++) {
                    // Map everything to the first list of keys
                    ret[this.fnMap[0][i].toString()] = val[i];
                }
                this.fn = ret;
            }
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    FullscreenService.prototype.request = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        /** @type {?} */
        var request = this.fn.requestFullscreen;
        elem = elem || document.documentElement;
        // Work around Safari 5.1 bug: reports support for
        // keyboard in fullscreen even though it doesn't.
        // Browser sniffing, since the alternative with
        // setTimeout is even worse.
        if (/5\.1[.\d]* Safari/.test(navigator.userAgent)) {
            elem[request]();
        }
        else {
            elem[request](this.keyboardAllowed ? ((/** @type {?} */ (Element))).ALLOW_KEYBOARD_INPUT : {});
        }
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.exit = /**
     * @return {?}
     */
    function () {
        document[this.fn.exitFullscreen]();
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    FullscreenService.prototype.toggle = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (this.isFullscreen()) {
            this.exit();
        }
        else {
            this.request(elem);
        }
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    FullscreenService.prototype.onChange = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        document.addEventListener(this.fn.fullscreenchange, callback, false);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    FullscreenService.prototype.onError = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        document.addEventListener(this.fn.fullscreenerror, callback, false);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.isFullscreen = /**
     * @return {?}
     */
    function () {
        return Boolean(document[this.fn.fullscreenElement]);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        // Coerce to boolean in case of old WebKit
        return Boolean(document[this.fn.fullscreenEnabled]);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return document[this.fn.fullscreenElement];
    };
    /** @nocollapse */
    FullscreenService.ctorParameters = function () { return []; };
FullscreenService.ɵfac = function FullscreenService_Factory(t) { return new (t || FullscreenService)(); };
FullscreenService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FullscreenService, factory: function (t) { return FullscreenService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return FullscreenService;
}());
export { FullscreenService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FullscreenService.prototype.fnMap;
    /**
     * @type {?}
     * @private
     */
    FullscreenService.prototype.fn;
    /**
     * @type {?}
     * @private
     */
    FullscreenService.prototype.keyboardAllowed;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,