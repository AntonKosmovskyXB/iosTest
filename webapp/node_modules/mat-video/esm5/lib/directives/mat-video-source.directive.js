/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, Input } from "@angular/core";
import { MatVideoComponent } from "../video.component";
import * as ɵngcc0 from '@angular/core';
var MatVideoSourceDirective = /** @class */ (function () {
    function MatVideoSourceDirective(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.type = null;
        this.init = true;
        this.video = matVideoComponent;
        this.source = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVideoSourceDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.source.src = this.src;
        this.source.type = this.type;
        if (!this.init) {
            this.video.load();
        }
    };
    /** @nocollapse */
    MatVideoSourceDirective.ctorParameters = function () { return [
        { type: MatVideoComponent, decorators: [{ type: Host }] },
        { type: ElementRef }
    ]; };
    MatVideoSourceDirective.propDecorators = {
        src: [{ type: Input }],
        type: [{ type: Input }]
    };
MatVideoSourceDirective.ɵfac = function MatVideoSourceDirective_Factory(t) { return new (t || MatVideoSourceDirective)(ɵngcc0.ɵɵdirectiveInject(MatVideoComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MatVideoSourceDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatVideoSourceDirective, selectors: [["", "matVideoSource", ""]], inputs: { src: "src", type: "type" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatVideoSourceDirective, [{
        type: Directive,
        args: [{
                selector: "[matVideoSource]"
            }]
    }], function () { return [{ type: MatVideoComponent, decorators: [{
                type: Host
            }] }, { type: ɵngcc0.ElementRef }]; }, { src: [{
            type: Input
        }], type: [{
            type: Input
        }] }); })();
    return MatVideoSourceDirective;
}());
export { MatVideoSourceDirective };
if (false) {
    /** @type {?} */
    MatVideoSourceDirective.prototype.src;
    /** @type {?} */
    MatVideoSourceDirective.prototype.type;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.init;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.video;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.source;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.matVideoComponent;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZpZGVvLXNvdXJjZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9tYXQtdmlkZW8vbGliL2RpcmVjdGl2ZXMvbWF0LXZpZGVvLXNvdXJjZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUV2RDtBQUdZLElBUVYsaUNBQTRCLGlCQUFvQyxFQUFVLEVBQWM7QUFDMUYsUUFEOEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUFDLFFBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBUGhGLFFBQUcsR0FBVyxJQUFJLENBQUM7QUFDOUIsUUFBVyxTQUFJLEdBQVcsSUFBSSxDQUFDO0FBQy9CLFFBQ1UsU0FBSSxHQUFHLElBQUksQ0FBQztBQUN0QixRQUlJLElBQUksQ0FBQyxLQUFLLEdBQUcsaUJBQWlCLENBQUM7QUFDbkMsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDbkMsUUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUN0QixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQTBCO0FBQzNCO0FBQVEsSUFEWiw2Q0FBVztBQUFPO0FBQ3BCO0FBQW1CO0FBQVEsSUFEekIsVUFBWSxPQUFzQjtBQUFJLFFBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDL0IsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2pDLFFBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDcEIsWUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hCLFNBQUs7QUFDTCxJQUFFLENBQUMsQ0FyQk07QUFBQztvQ0FIVCxTQUFTLFNBQUMsdERBR3NCO1FBRi9CLFFBQVEsRUFBRSxrQkFBa0Isa0JBQzdCLHREQUdTLGdCQVBELGlCQUFpQix1QkFhWCxJQUFJO0FBQU8sZ0JBZk4sVUFBVTtBQUFHO0FBQVU7QUFBK0Msc0JBUXZGLEtBQUs7QUFBSyx1QkFDVixLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsSUFvQm5CLDhCQUFDO0FBQ0EsQ0FEQSxBQXpCRCxJQXlCQztBQUNELFNBdkJhLHVCQUF1QjtBQUFJO0FBQWE7QUFDdkMsSUFBWixzQ0FBNEI7QUFDOUI7QUFBcUIsSUFBbkIsdUNBQTZCO0FBQy9CO0FBQ087QUFDTjtBQUFnQjtBQUFRLElBRHZCLHVDQUFvQjtBQUN0QjtBQUFRO0FBQWlCO0FBQ3BCO0FBQVEsSUFEWCx3Q0FBaUM7QUFDbkM7QUFBUTtBQUFpQjtBQUV0QjtBQUFRLElBRlQseUNBQWtDO0FBQ3BDO0FBQ087QUFBaUI7QUFBZ0I7QUFBUSxJQUFsQyxvREFBb0Q7QUFBQztBQUFRO0FBQWlCO0FBQzlFO0FBQVEsSUFEOEMscUNBQXNCOztBQWZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFXQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQXhCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBSkEsQUFBQSxBQWFBLEFBQUEsQUFmQSxBQUFBLEFBUUEsQUFBQSxBQUNBLEFBQUEsQUFvQkEsQUFBQSxBQUFBLEFBekJBLEFBeUJBLEFBdEJBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7IE1hdFZpZGVvQ29tcG9uZW50IH0gZnJvbSBcIi4uL3ZpZGVvLmNvbXBvbmVudFwiO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6IFwiW21hdFZpZGVvU291cmNlXVwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXRWaWRlb1NvdXJjZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCkgc3JjOiBzdHJpbmcgPSBudWxsO1xyXG4gIEBJbnB1dCgpIHR5cGU6IHN0cmluZyA9IG51bGw7XHJcblxyXG4gIHByaXZhdGUgaW5pdCA9IHRydWU7XHJcbiAgcHJpdmF0ZSB2aWRlbzogTWF0VmlkZW9Db21wb25lbnQ7XHJcbiAgcHJpdmF0ZSBzb3VyY2U6IEhUTUxTb3VyY2VFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcihASG9zdCgpIHByaXZhdGUgbWF0VmlkZW9Db21wb25lbnQ6IE1hdFZpZGVvQ29tcG9uZW50LCBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLnZpZGVvID0gbWF0VmlkZW9Db21wb25lbnQ7XHJcbiAgICB0aGlzLnNvdXJjZSA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB0aGlzLmluaXQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIHRoaXMuc291cmNlLnNyYyA9IHRoaXMuc3JjO1xyXG4gICAgdGhpcy5zb3VyY2UudHlwZSA9IHRoaXMudHlwZTtcclxuXHJcbiAgICBpZiAoIXRoaXMuaW5pdCkge1xyXG4gICAgICB0aGlzLnZpZGVvLmxvYWQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19