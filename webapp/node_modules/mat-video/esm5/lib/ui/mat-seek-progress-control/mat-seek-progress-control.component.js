/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Renderer2 } from "@angular/core";
import { EventService } from "../../services/event.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../internal/mat-slider-progress-bar/mat-slider-progress-bar.component';
var MatSeekProgressControlComponent = /** @class */ (function () {
    function MatSeekProgressControlComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.curTimePercent = 0;
        this.bufTimePercent = 0;
        this.video = null;
        this.color = "primary";
        this.currentTime = 0;
        this.currentTimeChanged = new EventEmitter();
        this.bufferedTime = 0;
        this.bufferedTimeChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video, name: "seeking", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.updateCurrentTime(_this.video.currentTime); }), dispose: null },
            { element: this.video, name: "canplaythrough", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.updateBufferedTime(); }), dispose: null },
            { element: this.video, name: "timeupdate", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.updateCurrentTime(_this.video.currentTime); }), dispose: null },
            { element: this.video, name: "progress", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.updateBufferedTime(); }), dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.evt.removeEvents(this.events);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.seekVideo = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var percentage = value / 100;
        /** @type {?} */
        var newTime = this.video.duration * percentage;
        this.video.currentTime = newTime;
    };
    /**
     * @param {?} time
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateCurrentTime = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.currentTime = time;
        this.curTimePercent = this.updateTime(this.currentTimeChanged, this.currentTime);
    };
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateBufferedTime = /**
     * @return {?}
     */
    function () {
        if (this.video.buffered.length > 0) {
            /** @type {?} */
            var largestBufferValue = 0;
            for (var i = 0; i < this.video.buffered.length; i++) {
                /** @type {?} */
                var cur = this.video.currentTime;
                /** @type {?} */
                var start = this.video.buffered.start(i);
                /** @type {?} */
                var end = this.video.buffered.end(i);
                if (start <= cur && end > cur && end - start > largestBufferValue) {
                    largestBufferValue = end;
                }
            }
            this.bufferedTime = largestBufferValue;
            this.bufTimePercent = this.updateTime(this.bufferedTimeChanged, this.bufferedTime);
        }
    };
    /**
     * @param {?} emitter
     * @param {?} time
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateTime = /**
     * @param {?} emitter
     * @param {?} time
     * @return {?}
     */
    function (emitter, time) {
        emitter.emit(time);
        return (time / this.video.duration) * 100;
    };
    /** @nocollapse */
    MatSeekProgressControlComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatSeekProgressControlComponent.propDecorators = {
        video: [{ type: Input }],
        color: [{ type: Input }],
        currentTime: [{ type: Input }],
        currentTimeChanged: [{ type: Output }],
        bufferedTime: [{ type: Input }],
        bufferedTimeChanged: [{ type: Output }]
    };
MatSeekProgressControlComponent.ɵfac = function MatSeekProgressControlComponent_Factory(t) { return new (t || MatSeekProgressControlComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(EventService)); };
MatSeekProgressControlComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSeekProgressControlComponent, selectors: [["mat-seek-progress-control"]], inputs: { video: "video", color: "color", currentTime: "currentTime", bufferedTime: "bufferedTime" }, outputs: { currentTimeChanged: "currentTimeChanged", bufferedTimeChanged: "bufferedTimeChanged" }, decls: 1, vars: 3, consts: [["mode", "buffer", "step", "0.01", 3, "color", "value", "bufferValue", "input"]], template: function MatSeekProgressControlComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-slider-progress-bar", 0);
        ɵngcc0.ɵɵlistener("input", function MatSeekProgressControlComponent_Template_mat_slider_progress_bar_input_0_listener($event) { return ctx.seekVideo($event.value); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("color", ctx.color)("value", ctx.curTimePercent)("bufferValue", ctx.bufTimePercent);
    } }, directives: [ɵngcc1.MatSliderProgressBarComponent], styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSeekProgressControlComponent, [{
        type: Component,
        args: [{
                selector: "mat-seek-progress-control",
                template: "<mat-slider-progress-bar\r\n  [color]=\"color\"\r\n  mode=\"buffer\"\r\n  step=\"0.01\"\r\n  [value]=\"curTimePercent\"\r\n  [bufferValue]=\"bufTimePercent\"\r\n  (input)=\"seekVideo($event.value)\"\r\n></mat-slider-progress-bar>\r\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: EventService }]; }, { video: [{
            type: Input
        }], color: [{
            type: Input
        }], currentTime: [{
            type: Input
        }], currentTimeChanged: [{
            type: Output
        }], bufferedTime: [{
            type: Input
        }], bufferedTimeChanged: [{
            type: Output
        }] }); })();
    return MatSeekProgressControlComponent;
}());
export { MatSeekProgressControlComponent };
if (false) {
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.curTimePercent;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.bufTimePercent;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.video;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.color;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.currentTime;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.currentTimeChanged;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.bufferedTime;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.bufferedTimeChanged;
    /**
     * @type {?}
     * @private
     */
    MatSeekProgressControlComponent.prototype.events;
    /**
     * @type {?}
     * @private
     */
    MatSeekProgressControlComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    MatSeekProgressControlComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,