/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, HostListener, Input, Output, Renderer2 } from "@angular/core";
import { EventService } from "../../services/event.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/button';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/icon';

function MatPlayButtonComponent_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "play_arrow");
    ɵngcc0.ɵɵelementEnd();
} }
function MatPlayButtonComponent_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "pause");
    ɵngcc0.ɵɵelementEnd();
} }
var MatPlayButtonComponent = /** @class */ (function () {
    function MatPlayButtonComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.play = false;
        this.playChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video, name: "play", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.setVideoPlayback(true); }), dispose: null },
            { element: this.video, name: "pause", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.setVideoPlayback(false); }), dispose: null },
            { element: this.video, name: "durationchange", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.setVideoPlayback(false); }), dispose: null },
            { element: this.video, name: "ended", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.setVideoPlayback(false); }), dispose: null },
            { element: this.video, name: "click", callback: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.toggleVideoPlayback(); }), dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.evt.removeEvents(this.events);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatPlayButtonComponent.prototype.setVideoPlayback = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.play !== value) {
            this.toggleVideoPlayback();
        }
    };
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.toggleVideoPlayback = /**
     * @return {?}
     */
    function () {
        this.play = !this.play;
        this.updateVideoPlayback();
    };
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.updateVideoPlayback = /**
     * @return {?}
     */
    function () {
        this.play ? this.video.play() : this.video.pause();
        this.playChanged.emit(this.play);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatPlayButtonComponent.prototype.onPlayKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.keyboard) {
            this.toggleVideoPlayback();
            event.preventDefault();
        }
    };
    /** @nocollapse */
    MatPlayButtonComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatPlayButtonComponent.propDecorators = {
        video: [{ type: Input }],
        play: [{ type: Input }],
        playChanged: [{ type: Output }],
        keyboard: [{ type: Input }],
        onPlayKey: [{ type: HostListener, args: ["document:keyup.space", ["$event"],] }]
    };
MatPlayButtonComponent.ɵfac = function MatPlayButtonComponent_Factory(t) { return new (t || MatPlayButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(EventService)); };
MatPlayButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatPlayButtonComponent, selectors: [["mat-play-button"]], hostBindings: function MatPlayButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup.space", function MatPlayButtonComponent_keyup_space_HostBindingHandler($event) { return ctx.onPlayKey($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { play: "play", keyboard: "keyboard", video: "video" }, outputs: { playChanged: "playChanged" }, decls: 3, vars: 2, consts: [["mat-icon-button", "", 3, "click"], [4, "ngIf"]], template: function MatPlayButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function MatPlayButtonComponent_Template_button_click_0_listener() { return ctx.toggleVideoPlayback(); });
        ɵngcc0.ɵɵtemplate(1, MatPlayButtonComponent_mat_icon_1_Template, 2, 0, "mat-icon", 1);
        ɵngcc0.ɵɵtemplate(2, MatPlayButtonComponent_mat_icon_2_Template, 2, 0, "mat-icon", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.play);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.play);
    } }, directives: [ɵngcc1.MatButton, ɵngcc2.NgIf, ɵngcc3.MatIcon], styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPlayButtonComponent, [{
        type: Component,
        args: [{
                selector: "mat-play-button",
                template: "<button mat-icon-button (click)=\"toggleVideoPlayback()\">\r\n  <mat-icon *ngIf=\"!play\">play_arrow</mat-icon>\r\n  <mat-icon *ngIf=\"play\">pause</mat-icon>\r\n</button>\r\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: EventService }]; }, { play: [{
            type: Input
        }], playChanged: [{
            type: Output
        }], keyboard: [{
            type: Input
        }], onPlayKey: [{
            type: HostListener,
            args: ["document:keyup.space", ["$event"]]
        }], video: [{
            type: Input
        }] }); })();
    return MatPlayButtonComponent;
}());
export { MatPlayButtonComponent };
if (false) {
    /** @type {?} */
    MatPlayButtonComponent.prototype.video;
    /** @type {?} */
    MatPlayButtonComponent.prototype.play;
    /** @type {?} */
    MatPlayButtonComponent.prototype.playChanged;
    /** @type {?} */
    MatPlayButtonComponent.prototype.keyboard;
    /**
     * @type {?}
     * @private
     */
    MatPlayButtonComponent.prototype.events;
    /**
     * @type {?}
     * @private
     */
    MatPlayButtonComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    MatPlayButtonComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,