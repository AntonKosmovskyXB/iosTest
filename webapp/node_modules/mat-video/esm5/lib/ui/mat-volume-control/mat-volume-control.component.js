/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, HostListener, Input, Output } from "@angular/core";
import { EventService } from "../../services/event.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/button';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/slider';
import * as ɵngcc4 from '@angular/material/icon';

function MatVolumeControlComponent_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "volume_off");
    ɵngcc0.ɵɵelementEnd();
} }
function MatVolumeControlComponent_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "volume_mute");
    ɵngcc0.ɵɵelementEnd();
} }
function MatVolumeControlComponent_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "volume_down");
    ɵngcc0.ɵɵelementEnd();
} }
function MatVolumeControlComponent_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "volume_up");
    ɵngcc0.ɵɵelementEnd();
} }
var MatVolumeControlComponent = /** @class */ (function () {
    function MatVolumeControlComponent(evt) {
        this.evt = evt;
        this.video = null;
        this.color = "primary";
        this.volume = 1;
        this.volumeChanged = new EventEmitter();
        this.muted = false;
        this.mutedChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @return {?}
     */
    MatVolumeControlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.updateMuted(false);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVolumeControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.muted) {
            this.updateMuted(false);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatVolumeControlComponent.prototype.setVolume = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.volume = value;
        this.video.volume = this.volume;
        this.volumeChanged.emit(this.volume);
        if (this.volume > 0) {
            this.setMuted(false);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatVolumeControlComponent.prototype.setMuted = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.muted !== value) {
            this.toggleMuted();
        }
    };
    /**
     * @return {?}
     */
    MatVolumeControlComponent.prototype.toggleMuted = /**
     * @return {?}
     */
    function () {
        this.muted = !this.muted;
        this.updateMuted();
    };
    /**
     * @param {?=} emitChange
     * @return {?}
     */
    MatVolumeControlComponent.prototype.updateMuted = /**
     * @param {?=} emitChange
     * @return {?}
     */
    function (emitChange) {
        if (emitChange === void 0) { emitChange = true; }
        if (this.video) {
            this.video.muted = this.muted;
        }
        if (emitChange) {
            this.mutedChanged.emit(this.muted);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVolumeControlComponent.prototype.onMuteKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.keyboard) {
            this.toggleMuted();
            event.preventDefault();
        }
    };
    /** @nocollapse */
    MatVolumeControlComponent.ctorParameters = function () { return [
        { type: EventService }
    ]; };
    MatVolumeControlComponent.propDecorators = {
        video: [{ type: Input }],
        color: [{ type: Input }],
        volume: [{ type: Input }],
        volumeChanged: [{ type: Output }],
        muted: [{ type: Input }],
        mutedChanged: [{ type: Output }],
        keyboard: [{ type: Input }],
        onMuteKey: [{ type: HostListener, args: ["document:keyup.m", ["$event"],] }]
    };
MatVolumeControlComponent.ɵfac = function MatVolumeControlComponent_Factory(t) { return new (t || MatVolumeControlComponent)(ɵngcc0.ɵɵdirectiveInject(EventService)); };
MatVolumeControlComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatVolumeControlComponent, selectors: [["mat-volume-control"]], hostBindings: function MatVolumeControlComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup.m", function MatVolumeControlComponent_keyup_m_HostBindingHandler($event) { return ctx.onMuteKey($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { video: "video", color: "color", volume: "volume", muted: "muted", keyboard: "keyboard" }, outputs: { volumeChanged: "volumeChanged", mutedChanged: "mutedChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 7, vars: 5, consts: [[1, "volume-control"], ["mat-icon-button", "", 3, "click"], [4, "ngIf"], ["min", "0", "max", "1", "step", "0.01", "value", "1", 1, "volume-slider", 3, "color", "input"]], template: function MatVolumeControlComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function MatVolumeControlComponent_Template_button_click_1_listener() { return ctx.toggleMuted(); });
        ɵngcc0.ɵɵtemplate(2, MatVolumeControlComponent_mat_icon_2_Template, 2, 0, "mat-icon", 2);
        ɵngcc0.ɵɵtemplate(3, MatVolumeControlComponent_mat_icon_3_Template, 2, 0, "mat-icon", 2);
        ɵngcc0.ɵɵtemplate(4, MatVolumeControlComponent_mat_icon_4_Template, 2, 0, "mat-icon", 2);
        ɵngcc0.ɵɵtemplate(5, MatVolumeControlComponent_mat_icon_5_Template, 2, 0, "mat-icon", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "mat-slider", 3);
        ɵngcc0.ɵɵlistener("input", function MatVolumeControlComponent_Template_mat_slider_input_6_listener($event) { return ctx.setVolume($event.value); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.muted || ctx.volume === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.muted && ctx.volume > 0 && ctx.volume < 0.25);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.muted && ctx.volume >= 0.25 && ctx.volume < 0.5);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.muted && ctx.volume >= 0.5);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("color", ctx.color);
    } }, directives: [ɵngcc1.MatButton, ɵngcc2.NgIf, ɵngcc3.MatSlider, ɵngcc4.MatIcon], styles: [".volume-control[_ngcontent-%COMP%]{display:inline}.volume-slider[_ngcontent-%COMP%]{margin-left:-15px} .mat-slider-thumb{border-color:transparent!important} .mat-slider-track-background{background-color:#d3d3d3!important;transform:translateX(0)!important}.volume-control[_ngcontent-%COMP%]   .volume-slider[_ngcontent-%COMP%]{visibility:hidden;opacity:0;min-width:0;width:0;transition:visibility .2s,opacity .2s linear,width .2s linear}.volume-control[_ngcontent-%COMP%]:hover   .volume-slider[_ngcontent-%COMP%]{visibility:visible;opacity:1;min-width:90px;width:90px;transition:opacity .2s linear,width .2s linear,min-width .2s linear}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatVolumeControlComponent, [{
        type: Component,
        args: [{
                selector: "mat-volume-control",
                template: "<div class=\"volume-control\">\r\n  <button mat-icon-button (click)=\"toggleMuted()\">\r\n    <mat-icon *ngIf=\"muted || volume === 0\">volume_off</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume > 0 && volume < 0.25\">volume_mute</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume >= 0.25 && volume < 0.5\">volume_down</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume >= 0.5\">volume_up</mat-icon>\r\n  </button>\r\n  <mat-slider class=\"volume-slider\" [color]=\"color\" min=\"0\" max=\"1\" step=\"0.01\" value=\"1\" (input)=\"setVolume($event.value)\"> </mat-slider>\r\n</div>\r\n",
                styles: [".volume-control{display:inline}.volume-slider{margin-left:-15px}::ng-deep.mat-slider-thumb{border-color:transparent!important}::ng-deep.mat-slider-track-background{background-color:#d3d3d3!important;transform:translateX(0)!important}.volume-control .volume-slider{visibility:hidden;opacity:0;min-width:0;width:0;transition:visibility .2s,opacity .2s linear,width .2s linear}.volume-control:hover .volume-slider{visibility:visible;opacity:1;min-width:90px;width:90px;transition:opacity .2s linear,width .2s linear,min-width .2s linear}"]
            }]
    }], function () { return [{ type: EventService }]; }, { video: [{
            type: Input
        }], color: [{
            type: Input
        }], volume: [{
            type: Input
        }], volumeChanged: [{
            type: Output
        }], muted: [{
            type: Input
        }], mutedChanged: [{
            type: Output
        }], keyboard: [{
            type: Input
        }], onMuteKey: [{
            type: HostListener,
            args: ["document:keyup.m", ["$event"]]
        }] }); })();
    return MatVolumeControlComponent;
}());
export { MatVolumeControlComponent };
if (false) {
    /** @type {?} */
    MatVolumeControlComponent.prototype.video;
    /** @type {?} */
    MatVolumeControlComponent.prototype.color;
    /** @type {?} */
    MatVolumeControlComponent.prototype.volume;
    /** @type {?} */
    MatVolumeControlComponent.prototype.volumeChanged;
    /** @type {?} */
    MatVolumeControlComponent.prototype.muted;
    /** @type {?} */
    MatVolumeControlComponent.prototype.mutedChanged;
    /** @type {?} */
    MatVolumeControlComponent.prototype.keyboard;
    /**
     * @type {?}
     * @private
     */
    MatVolumeControlComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,