/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class SecondsToTimePipe {
    constructor() {
        this.times = {
            year: 31557600,
            month: 2629746,
            day: 86400,
            hour: 3600
        };
    }
    /**
     * @param {?} seconds
     * @return {?}
     */
    transform(seconds) {
        if (!seconds) {
            return "0:00";
        }
        else {
            /** @type {?} */
            let timeString = "";
            for (const key in this.times) {
                if (Math.floor(seconds / this.times[key]) > 0) {
                    timeString += Math.floor(seconds / this.times[key]).toString() + ":";
                    seconds = seconds - this.times[key] * Math.floor(seconds / this.times[key]);
                }
            }
            timeString += Math.floor(seconds / 60).toString() + ":";
            seconds = seconds - 60 * Math.floor(seconds / 60);
            if (Math.floor(seconds) < 10) {
                timeString += "0";
            }
            timeString += Math.floor(seconds).toString();
            return timeString;
        }
    }
}
SecondsToTimePipe.ɵfac = function SecondsToTimePipe_Factory(t) { return new (t || SecondsToTimePipe)(); };
SecondsToTimePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "secondsToTime", type: SecondsToTimePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SecondsToTimePipe, [{
        type: Pipe,
        args: [{
                name: "secondsToTime"
            }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    SecondsToTimePipe.prototype.times;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vjb25kcy10by10aW1lLnBpcGUuanMiLCJzb3VyY2VzIjpbIm5nOi9tYXQtdmlkZW8vbGliL3BpcGVzL3NlY29uZHMtdG8tdGltZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFLcEQsTUFBTSxPQUFPLGlCQUFpQjtBQUFHLElBSGpDO0FBQ1EsUUFHTixVQUFLLEdBQUc7QUFDVixZQUFJLElBQUksRUFBRSxRQUFRO0FBQ2xCLFlBQUksS0FBSyxFQUFFLE9BQU87QUFDbEIsWUFBSSxHQUFHLEVBQUUsS0FBSztBQUNkLFlBQUksSUFBSSxFQUFFLElBQUk7QUFDZCxTQUFHLENBQUM7QUFDSixJQXFCQSxDQUFDO0FBQ0Q7QUFBUTtBQUEwQjtBQUFtQjtBQUFRLElBckIzRCxTQUFTLENBQUMsT0FBZTtBQUMzQixRQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDbEIsWUFBTSxPQUFPLE1BQU0sQ0FBQztBQUNwQixTQUFLO0FBQUMsYUFBSztBQUNYO0FBQ0UsZ0JBRFEsVUFBVSxHQUFHLEVBQUU7QUFDekIsWUFBTSxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDcEMsZ0JBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3ZELG9CQUFVLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQy9FLG9CQUFVLE9BQU8sR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEYsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsWUFBTSxVQUFVLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQzlELFlBQU0sT0FBTyxHQUFHLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDeEQsWUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFO0FBQ3BDLGdCQUFRLFVBQVUsSUFBSSxHQUFHLENBQUM7QUFDMUIsYUFBTztBQUNQLFlBQU0sVUFBVSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbkQsWUFBTSxPQUFPLFVBQVUsQ0FBQztBQUN4QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7NkNBL0JDLElBQUksU0FBQyxrQkFDSixJQUFJLEVBQUUsZUFBZTtJQUN0Qjs7Ozs7O2dEQUNJO0FBQUM7QUFBYTtBQUFxQixJQUN0QyxrQ0FLRTs7QUFYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFIQSxBQUlBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXNCQSxBQUFBLEFBcEJBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBOUJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUtBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogXCJzZWNvbmRzVG9UaW1lXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIFNlY29uZHNUb1RpbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdGltZXMgPSB7XHJcbiAgICB5ZWFyOiAzMTU1NzYwMCxcclxuICAgIG1vbnRoOiAyNjI5NzQ2LFxyXG4gICAgZGF5OiA4NjQwMCxcclxuICAgIGhvdXI6IDM2MDBcclxuICB9O1xyXG5cclxuICB0cmFuc2Zvcm0oc2Vjb25kczogbnVtYmVyKSB7XHJcbiAgICBpZiAoIXNlY29uZHMpIHtcclxuICAgICAgcmV0dXJuIFwiMDowMFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IHRpbWVTdHJpbmcgPSBcIlwiO1xyXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnRpbWVzKSB7XHJcbiAgICAgICAgaWYgKE1hdGguZmxvb3Ioc2Vjb25kcyAvIHRoaXMudGltZXNba2V5XSkgPiAwKSB7XHJcbiAgICAgICAgICB0aW1lU3RyaW5nICs9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIHRoaXMudGltZXNba2V5XSkudG9TdHJpbmcoKSArIFwiOlwiO1xyXG4gICAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMgLSB0aGlzLnRpbWVzW2tleV0gKiBNYXRoLmZsb29yKHNlY29uZHMgLyB0aGlzLnRpbWVzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aW1lU3RyaW5nICs9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKS50b1N0cmluZygpICsgXCI6XCI7XHJcbiAgICAgIHNlY29uZHMgPSBzZWNvbmRzIC0gNjAgKiBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XHJcbiAgICAgIGlmIChNYXRoLmZsb29yKHNlY29uZHMpIDwgMTApIHtcclxuICAgICAgICB0aW1lU3RyaW5nICs9IFwiMFwiO1xyXG4gICAgICB9XHJcbiAgICAgIHRpbWVTdHJpbmcgKz0gTWF0aC5mbG9vcihzZWNvbmRzKS50b1N0cmluZygpO1xyXG4gICAgICByZXR1cm4gdGltZVN0cmluZztcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19