/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, Input } from "@angular/core";
import { MatVideoComponent } from "../video.component";
import * as ɵngcc0 from '@angular/core';
export class MatVideoSourceDirective {
    /**
     * @param {?} matVideoComponent
     * @param {?} el
     */
    constructor(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.type = null;
        this.init = true;
        this.video = matVideoComponent;
        this.source = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.source.src = this.src;
        this.source.type = this.type;
        if (!this.init) {
            this.video.load();
        }
    }
}
MatVideoSourceDirective.ɵfac = function MatVideoSourceDirective_Factory(t) { return new (t || MatVideoSourceDirective)(ɵngcc0.ɵɵdirectiveInject(MatVideoComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MatVideoSourceDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatVideoSourceDirective, selectors: [["", "matVideoSource", ""]], inputs: { src: "src", type: "type" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
MatVideoSourceDirective.ctorParameters = () => [
    { type: MatVideoComponent, decorators: [{ type: Host }] },
    { type: ElementRef }
];
MatVideoSourceDirective.propDecorators = {
    src: [{ type: Input }],
    type: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatVideoSourceDirective, [{
        type: Directive,
        args: [{
                selector: "[matVideoSource]"
            }]
    }], function () { return [{ type: MatVideoComponent, decorators: [{
                type: Host
            }] }, { type: ɵngcc0.ElementRef }]; }, { src: [{
            type: Input
        }], type: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatVideoSourceDirective.prototype.src;
    /** @type {?} */
    MatVideoSourceDirective.prototype.type;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.init;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.video;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.source;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.matVideoComponent;
    /**
     * @type {?}
     * @private
     */
    MatVideoSourceDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZpZGVvLXNvdXJjZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9tYXQtdmlkZW8vbGliL2RpcmVjdGl2ZXMvbWF0LXZpZGVvLXNvdXJjZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUt2RCxNQUFNLE9BQU8sdUJBQXVCO0FBQUc7QUFBUTtBQUN4QjtBQUNWO0FBQVEsSUFNbkIsWUFBNEIsaUJBQW9DLEVBQVUsRUFBYztBQUMxRixRQUQ4QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0FBQUMsUUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsUUFQaEYsUUFBRyxHQUFXLElBQUksQ0FBQztBQUM5QixRQUFXLFNBQUksR0FBVyxJQUFJLENBQUM7QUFDL0IsUUFDVSxTQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLFFBSUksSUFBSSxDQUFDLEtBQUssR0FBRyxpQkFBaUIsQ0FBQztBQUNuQyxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztBQUNuQyxRQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBMEI7QUFDM0I7QUFBUSxJQURaLFdBQVcsQ0FBQyxPQUFzQjtBQUFJLFFBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDL0IsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2pDLFFBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDcEIsWUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDttREF6QkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxrQkFBa0IsY0FDN0I7bU5BQ0k7QUFBQztBQUFtQjtBQUNYLFlBTkwsaUJBQWlCLHVCQWFYLElBQUk7QUFBTyxZQWZOLFVBQVU7QUFBRztBQUFHO0FBQTJDLGtCQVE1RSxLQUFLO0FBQUssbUJBQ1YsS0FBSztBQUFJOzs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFhO0FBRVosSUFIZCxzQ0FBNEI7QUFDOUI7QUFBcUIsSUFBbkIsdUNBQTZCO0FBQy9CO0FBQ087QUFDTjtBQUFnQjtBQUFRLElBRHZCLHVDQUFvQjtBQUN0QjtBQUFRO0FBQWlCO0FBQ3BCO0FBQVEsSUFEWCx3Q0FBaUM7QUFDbkM7QUFBUTtBQUFpQjtBQUV0QjtBQUFRLElBRlQseUNBQWtDO0FBQ3BDO0FBQ087QUFBaUI7QUFBZ0I7QUFBUSxJQUFsQyxvREFBb0Q7QUFBQztBQUFRO0FBQWlCO0FBQzlFO0FBQVEsSUFEOEMscUNBQXNCOztBQWZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUF4QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUpBLEFBQUEsQUFhQSxBQUFBLEFBZkEsQUFBQSxBQVFBLEFBQUEsQUFDQSxBQUFBLEFBREEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQgeyBNYXRWaWRlb0NvbXBvbmVudCB9IGZyb20gXCIuLi92aWRlby5jb21wb25lbnRcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiBcIlttYXRWaWRlb1NvdXJjZV1cIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWF0VmlkZW9Tb3VyY2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nID0gbnVsbDtcclxuICBASW5wdXQoKSB0eXBlOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIGluaXQgPSB0cnVlO1xyXG4gIHByaXZhdGUgdmlkZW86IE1hdFZpZGVvQ29tcG9uZW50O1xyXG4gIHByaXZhdGUgc291cmNlOiBIVE1MU291cmNlRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcml2YXRlIG1hdFZpZGVvQ29tcG9uZW50OiBNYXRWaWRlb0NvbXBvbmVudCwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy52aWRlbyA9IG1hdFZpZGVvQ29tcG9uZW50O1xyXG4gICAgdGhpcy5zb3VyY2UgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy5pbml0ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICB0aGlzLnNvdXJjZS5zcmMgPSB0aGlzLnNyYztcclxuICAgIHRoaXMuc291cmNlLnR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG4gICAgaWYgKCF0aGlzLmluaXQpIHtcclxuICAgICAgdGhpcy52aWRlby5sb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==