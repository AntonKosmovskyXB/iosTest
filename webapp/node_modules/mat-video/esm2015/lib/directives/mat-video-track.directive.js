/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, Input } from "@angular/core";
import { MatVideoComponent } from "../video.component";
import * as ɵngcc0 from '@angular/core';
export class MatVideoTrackDirective {
    /**
     * @param {?} matVideoComponent
     * @param {?} el
     */
    constructor(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.kind = null;
        this.srclang = null;
        this.label = null;
        this.init = true;
        this.video = matVideoComponent;
        this.track = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.track.src = this.src;
        this.track.kind = this.kind;
        this.track.srclang = this.srclang;
        this.track.label = this.label;
        if (!this.init) {
            this.video.load();
        }
    }
}
MatVideoTrackDirective.ɵfac = function MatVideoTrackDirective_Factory(t) { return new (t || MatVideoTrackDirective)(ɵngcc0.ɵɵdirectiveInject(MatVideoComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MatVideoTrackDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatVideoTrackDirective, selectors: [["", "matVideoTrack", ""]], inputs: { src: "src", kind: "kind", srclang: "srclang", label: "label" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
MatVideoTrackDirective.ctorParameters = () => [
    { type: MatVideoComponent, decorators: [{ type: Host }] },
    { type: ElementRef }
];
MatVideoTrackDirective.propDecorators = {
    src: [{ type: Input }],
    kind: [{ type: Input }],
    srclang: [{ type: Input }],
    label: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatVideoTrackDirective, [{
        type: Directive,
        args: [{
                selector: "[matVideoTrack]"
            }]
    }], function () { return [{ type: MatVideoComponent, decorators: [{
                type: Host
            }] }, { type: ɵngcc0.ElementRef }]; }, { src: [{
            type: Input
        }], kind: [{
            type: Input
        }], srclang: [{
            type: Input
        }], label: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatVideoTrackDirective.prototype.src;
    /** @type {?} */
    MatVideoTrackDirective.prototype.kind;
    /** @type {?} */
    MatVideoTrackDirective.prototype.srclang;
    /** @type {?} */
    MatVideoTrackDirective.prototype.label;
    /**
     * @type {?}
     * @private
     */
    MatVideoTrackDirective.prototype.init;
    /**
     * @type {?}
     * @private
     */
    MatVideoTrackDirective.prototype.video;
    /**
     * @type {?}
     * @private
     */
    MatVideoTrackDirective.prototype.track;
    /**
     * @type {?}
     * @private
     */
    MatVideoTrackDirective.prototype.matVideoComponent;
    /**
     * @type {?}
     * @private
     */
    MatVideoTrackDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZpZGVvLXRyYWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L21hdC12aWRlby9saWIvZGlyZWN0aXZlcy9tYXQtdmlkZW8tdHJhY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUU3RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFLdkQsTUFBTSxPQUFPLHNCQUFzQjtBQUFHO0FBQVE7QUFDdkI7QUFDVjtBQUFRLElBUW5CLFlBQTRCLGlCQUFvQyxFQUFVLEVBQWM7QUFDMUYsUUFEOEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUFDLFFBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBVGhGLFFBQUcsR0FBVyxJQUFJLENBQUM7QUFDOUIsUUFBVyxTQUFJLEdBQVcsSUFBSSxDQUFDO0FBQy9CLFFBQVcsWUFBTyxHQUFXLElBQUksQ0FBQztBQUNsQyxRQUFXLFVBQUssR0FBVyxJQUFJLENBQUM7QUFDaEMsUUFDVSxTQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLFFBSUksSUFBSSxDQUFDLEtBQUssR0FBRyxpQkFBaUIsQ0FBQztBQUNuQyxRQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztBQUNsQyxRQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBMEI7QUFDM0I7QUFBUSxJQURaLFdBQVcsQ0FBQyxPQUFzQjtBQUFJLFFBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDOUIsUUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2hDLFFBQUks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bmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQgeyBNYXRWaWRlb0NvbXBvbmVudCB9IGZyb20gXCIuLi92aWRlby5jb21wb25lbnRcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiBcIlttYXRWaWRlb1RyYWNrXVwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXRWaWRlb1RyYWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBASW5wdXQoKSBzcmM6IHN0cmluZyA9IG51bGw7XHJcbiAgQElucHV0KCkga2luZDogc3RyaW5nID0gbnVsbDtcclxuICBASW5wdXQoKSBzcmNsYW5nOiBzdHJpbmcgPSBudWxsO1xyXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIGluaXQgPSB0cnVlO1xyXG4gIHByaXZhdGUgdmlkZW86IE1hdFZpZGVvQ29tcG9uZW50O1xyXG4gIHByaXZhdGUgdHJhY2s6IEhUTUxUcmFja0VsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBIb3N0KCkgcHJpdmF0ZSBtYXRWaWRlb0NvbXBvbmVudDogTWF0VmlkZW9Db21wb25lbnQsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMudmlkZW8gPSBtYXRWaWRlb0NvbXBvbmVudDtcclxuICAgIHRoaXMudHJhY2sgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy5pbml0ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICB0aGlzLnRyYWNrLnNyYyA9IHRoaXMuc3JjO1xyXG4gICAgdGhpcy50cmFjay5raW5kID0gdGhpcy5raW5kO1xyXG4gICAgdGhpcy50cmFjay5zcmNsYW5nID0gdGhpcy5zcmNsYW5nO1xyXG4gICAgdGhpcy50cmFjay5sYWJlbCA9IHRoaXMubGFiZWw7XHJcblxyXG4gICAgaWYgKCF0aGlzLmluaXQpIHtcclxuICAgICAgdGhpcy52aWRlby5sb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==