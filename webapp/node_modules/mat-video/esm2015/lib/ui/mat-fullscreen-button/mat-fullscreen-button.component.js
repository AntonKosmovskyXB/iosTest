/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, HostListener, Input, Output } from "@angular/core";
import { EventService } from "../../services/event.service";
import { FullscreenService } from "../../services/fullscreen.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/button';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/icon';

function MatFullscreenButtonComponent_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "fullscreen");
    ɵngcc0.ɵɵelementEnd();
} }
function MatFullscreenButtonComponent_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "fullscreen_exit");
    ɵngcc0.ɵɵelementEnd();
} }
export class MatFullscreenButtonComponent {
    /**
     * @param {?} fscreen
     * @param {?} evt
     */
    constructor(fscreen, evt) {
        this.fscreen = fscreen;
        this.evt = evt;
        this.canFullscreen = false;
        this.fullscreen = false;
        this.fullscreenChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.fscreen.isEnabled()) {
            this.canFullscreen = true;
        }
        this.fscreen.onChange((/**
         * @param {?} event
         * @return {?}
         */
        event => (this.fscreen.isFullscreen() ? this.onChangesFullscreen(true) : this.onChangesFullscreen(false))));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setFullscreen(value) {
        if (this.canFullscreen && this.fullscreen !== value) {
            this.toggleFullscreen();
        }
    }
    /**
     * @return {?}
     */
    toggleFullscreen() {
        this.fullscreen = !this.fullscreen;
        this.updateFullscreen();
    }
    /**
     * @return {?}
     */
    updateFullscreen() {
        this.fullscreen ? this.fscreen.request(this.player) : this.fscreen.exit();
        this.fullscreenChanged.emit(this.fullscreen);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChangesFullscreen(value) {
        this.fullscreen = value;
        this.fullscreenChanged.emit(this.fullscreen);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFullscreenKey(event) {
        if (this.keyboard) {
            this.toggleFullscreen();
            event.preventDefault();
        }
    }
}
MatFullscreenButtonComponent.ɵfac = function MatFullscreenButtonComponent_Factory(t) { return new (t || MatFullscreenButtonComponent)(ɵngcc0.ɵɵdirectiveInject(FullscreenService), ɵngcc0.ɵɵdirectiveInject(EventService)); };
MatFullscreenButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatFullscreenButtonComponent, selectors: [["mat-fullscreen-button"]], hostBindings: function MatFullscreenButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup.f", function MatFullscreenButtonComponent_keyup_f_HostBindingHandler($event) { return ctx.onFullscreenKey($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { fullscreen: "fullscreen", keyboard: "keyboard", player: "player" }, outputs: { fullscreenChanged: "fullscreenChanged" }, decls: 3, vars: 3, consts: [["mat-icon-button", "", 3, "disabled", "click"], [4, "ngIf"]], template: function MatFullscreenButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function MatFullscreenButtonComponent_Template_button_click_0_listener() { return ctx.toggleFullscreen(); });
        ɵngcc0.ɵɵtemplate(1, MatFullscreenButtonComponent_mat_icon_1_Template, 2, 0, "mat-icon", 1);
        ɵngcc0.ɵɵtemplate(2, MatFullscreenButtonComponent_mat_icon_2_Template, 2, 0, "mat-icon", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("disabled", !ctx.canFullscreen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.fullscreen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fullscreen);
    } }, directives: [ɵngcc1.MatButton, ɵngcc2.NgIf, ɵngcc3.MatIcon], styles: [""] });
/** @nocollapse */
MatFullscreenButtonComponent.ctorParameters = () => [
    { type: FullscreenService },
    { type: EventService }
];
MatFullscreenButtonComponent.propDecorators = {
    player: [{ type: Input }],
    fullscreen: [{ type: Input }],
    fullscreenChanged: [{ type: Output }],
    keyboard: [{ type: Input }],
    onFullscreenKey: [{ type: HostListener, args: ["document:keyup.f", ["$event"],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFullscreenButtonComponent, [{
        type: Component,
        args: [{
                selector: "mat-fullscreen-button",
                template: "<button mat-icon-button [disabled]=\"!canFullscreen\" (click)=\"toggleFullscreen()\">\r\n  <mat-icon *ngIf=\"!fullscreen\">fullscreen</mat-icon>\r\n  <mat-icon *ngIf=\"fullscreen\">fullscreen_exit</mat-icon>\r\n</button>\r\n",
                styles: [""]
            }]
    }], function () { return [{ type: FullscreenService }, { type: EventService }]; }, { fullscreen: [{
            type: Input
        }], fullscreenChanged: [{
            type: Output
        }], keyboard: [{
            type: Input
        }], onFullscreenKey: [{
            type: HostListener,
            args: ["document:keyup.f", ["$event"]]
        }], player: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.canFullscreen;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.player;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.fullscreen;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.fullscreenChanged;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.keyboard;
    /**
     * @type {?}
     * @private
     */
    MatFullscreenButtonComponent.prototype.fscreen;
    /**
     * @type {?}
     * @private
     */
    MatFullscreenButtonComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZ1bGxzY3JlZW4tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmc6L21hdC12aWRlby9saWIvdWkvbWF0LWZ1bGxzY3JlZW4tYnV0dG9uL21hdC1mdWxsc2NyZWVuLWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQU90RSxNQUFNLE9BQU8sNEJBQTRCO0FBQUc7QUFBUTtBQUNwQztBQUVKO0FBQVEsSUFRbEIsWUFBb0IsT0FBMEIsRUFBVSxHQUFpQjtBQUFJLFFBQXpELFlBQU8sR0FBUCxPQUFPLENBQW1CO0FBQUMsUUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFjO0FBQUMsUUFWMUUsa0JBQWEsR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFHVyxlQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzlCLFFBQ1ksc0JBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztBQUM1RCxRQUNXLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFDM0IsSUFDOEUsQ0FBQztBQUMvRTtBQUNPO0FBQ0Y7QUFBUSxJQURYLFFBQVE7QUFBSyxRQUNYLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUNsQyxZQUFNLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQ2hDLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUTtBQUFNO0FBQTRCO0FBQXVCO0FBQVksUUFBcEUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQztBQUNySSxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXdCO0FBQ2Y7QUFBUSxJQUR0QixhQUFhLENBQUMsS0FBYztBQUM5QixRQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLEtBQUssRUFBRTtBQUN6RCxZQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQzlCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQW1CO0FBQ3JCLElBREgsZ0JBQWdCO0FBQUssUUFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDdkMsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQW1CO0FBQ3JCLElBREgsZ0JBQWdCO0FBQUssUUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlFLFFBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUMzQjtBQUFRLElBRFYsbUJBQW1CLENBQUMsS0FBYztBQUFJLFFBQ3BDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzVCLFFBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUM3QjtBQUFRLElBQVIsZUFBZSxDQUFDLEtBQW9CO0FBQ3RDLFFBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3ZCLFlBQU0sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDOUIsWUFBTSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDN0IsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO3dEQXREQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHVCQUF1QixrQkFDakM7NEpBQXFELDRDQUV0RDs7Ozs7Ozs7Ozs7Ozs7c0ZBQ0c7QUFBQztBQUFtQjtBQUNSLFlBUlAsaUJBQWlCO0FBQUksWUFEckIsWUFBWTtBQUFHO0FBQUc7QUFDYixxQkFVWCxLQUFLO0FBQUsseUJBRVYsS0FBSztBQUFLLGdDQUVWLE1BQU07QUFBSyx1QkFFWCxLQUFLO0FBQUssOEJBaUNWLFlBQVksU0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUMxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDO0FBQWE7QUFBcUIsSUExQ3ZDLHFEQUFzQjtBQUN4QjtBQUNvQixJQUFsQiw4Q0FBa0M7QUFDcEM7QUFDb0IsSUFBbEIsa0RBQTRCO0FBQzlCO0FBQ29CLElBQWxCLHlEQUEwRDtBQUM1RDtBQUNvQixJQUFsQixnREFBeUI7QUFDM0I7QUFDTztBQUFpQjtBQUFnQjtBQUFRLElBQWxDLCtDQUFrQztBQUFDO0FBQVE7QUFBaUI7QUFFakU7QUFBUSxJQUZpQywyQ0FBeUI7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQXJEQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQU5BLEFBQUEsQUFEQSxBQUFBLEFBV0EsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQWlDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBekNBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2V2ZW50LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgRnVsbHNjcmVlblNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvZnVsbHNjcmVlbi5zZXJ2aWNlXCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogXCJtYXQtZnVsbHNjcmVlbi1idXR0b25cIixcclxuICB0ZW1wbGF0ZVVybDogXCIuL21hdC1mdWxsc2NyZWVuLWJ1dHRvbi5jb21wb25lbnQuaHRtbFwiLFxyXG4gIHN0eWxlVXJsczogW1wiLi9tYXQtZnVsbHNjcmVlbi1idXR0b24uY29tcG9uZW50LnNjc3NcIl1cclxufSlcclxuZXhwb3J0IGNsYXNzIE1hdEZ1bGxzY3JlZW5CdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIGNhbkZ1bGxzY3JlZW4gPSBmYWxzZTtcclxuXHJcbiAgQElucHV0KCkgcGxheWVyOiBIVE1MVmlkZW9FbGVtZW50O1xyXG5cclxuICBASW5wdXQoKSBmdWxsc2NyZWVuID0gZmFsc2U7XHJcblxyXG4gIEBPdXRwdXQoKSBmdWxsc2NyZWVuQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuXHJcbiAgQElucHV0KCkga2V5Ym9hcmQgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZzY3JlZW46IEZ1bGxzY3JlZW5TZXJ2aWNlLCBwcml2YXRlIGV2dDogRXZlbnRTZXJ2aWNlKSB7fVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmZzY3JlZW4uaXNFbmFibGVkKCkpIHtcclxuICAgICAgdGhpcy5jYW5GdWxsc2NyZWVuID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZzY3JlZW4ub25DaGFuZ2UoZXZlbnQgPT4gKHRoaXMuZnNjcmVlbi5pc0Z1bGxzY3JlZW4oKSA/IHRoaXMub25DaGFuZ2VzRnVsbHNjcmVlbih0cnVlKSA6IHRoaXMub25DaGFuZ2VzRnVsbHNjcmVlbihmYWxzZSkpKTtcclxuICB9XHJcblxyXG4gIHNldEZ1bGxzY3JlZW4odmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLmNhbkZ1bGxzY3JlZW4gJiYgdGhpcy5mdWxsc2NyZWVuICE9PSB2YWx1ZSkge1xyXG4gICAgICB0aGlzLnRvZ2dsZUZ1bGxzY3JlZW4oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZUZ1bGxzY3JlZW4oKTogdm9pZCB7XHJcbiAgICB0aGlzLmZ1bGxzY3JlZW4gPSAhdGhpcy5mdWxsc2NyZWVuO1xyXG4gICAgdGhpcy51cGRhdGVGdWxsc2NyZWVuKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVGdWxsc2NyZWVuKCk6IHZvaWQge1xyXG4gICAgdGhpcy5mdWxsc2NyZWVuID8gdGhpcy5mc2NyZWVuLnJlcXVlc3QodGhpcy5wbGF5ZXIpIDogdGhpcy5mc2NyZWVuLmV4aXQoKTtcclxuICAgIHRoaXMuZnVsbHNjcmVlbkNoYW5nZWQuZW1pdCh0aGlzLmZ1bGxzY3JlZW4pO1xyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2VzRnVsbHNjcmVlbih2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgdGhpcy5mdWxsc2NyZWVuID0gdmFsdWU7XHJcbiAgICB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VkLmVtaXQodGhpcy5mdWxsc2NyZWVuKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoXCJkb2N1bWVudDprZXl1cC5mXCIsIFtcIiRldmVudFwiXSlcclxuICBvbkZ1bGxzY3JlZW5LZXkoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLmtleWJvYXJkKSB7XHJcbiAgICAgIHRoaXMudG9nZ2xlRnVsbHNjcmVlbigpO1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=