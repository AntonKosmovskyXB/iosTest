import { Component, HostBinding, Input, EventEmitter, Output, ChangeDetectionStrategy, HostListener } from '@angular/core';
import { Subject, of } from 'rxjs';
import { takeUntil, delay, map } from 'rxjs/operators';
import { ColorPickerConfig } from './../../../services/color-picker.service';
export class ColorPresetComponent {
    constructor(pickerConfig) {
        this.pickerConfig = pickerConfig;
        this.selectionChange = new EventEmitter(false);
        this.longPress = new EventEmitter(false);
        this.mouseup = new Subject();
        this.showDepthText = false;
    }
    set depth(showDepthText) {
        this.showDepthText = !!showDepthText;
    }
    ngOnDestroy() {
        this.mouseup.next();
        this.mouseup.complete();
    }
    get bgColor() {
        return this.color.toRgbaString();
    }
    get title() {
        const color = this.color ? this.color.toHexString() : '';
        if (this.showDepthText) {
            return this.pickerConfig.presetsTitle.replace(/\{\s*(.+?)\s*\}/g, (match, firstMatch) => color);
        }
        return color;
    }
    get className() {
        return this.activeColor ? this.color.toRgbaString() === this.activeColor.toRgbaString() : false;
    }
    onTouch(event) {
        of(event)
            .pipe(map((e) => e.timeStamp || new Date().getTime()), delay(350), takeUntil(this.mouseup))
            .subscribe(() => this.longPress.next(true));
        this.selectionChange.emit(this.color);
    }
    onTouchEnd(event) {
        this.mouseup.next(event);
    }
}
ColorPresetComponent.decorators = [
    { type: Component, args: [{
                selector: `color-preset`,
                template: ``,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}", ":host{display:inline-block;height:12px;width:12px;position:relative;cursor:pointer;transition:all .2s}"]
            },] }
];
ColorPresetComponent.ctorParameters = () => [
    { type: ColorPickerConfig }
];
ColorPresetComponent.propDecorators = {
    activeColor: [{ type: Input }],
    color: [{ type: Input }],
    depth: [{ type: Input, args: ['show-depth-title',] }],
    selectionChange: [{ type: Output }],
    longPress: [{ type: Output }],
    bgColor: [{ type: HostBinding, args: ['style.backgroundColor',] }],
    title: [{ type: HostBinding, args: ['attr.title',] }],
    className: [{ type: HostBinding, args: ['class.selected',] }],
    onTouch: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
    onTouchEnd: [{ type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcHJlc2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lwbGFiL25neC1jb2xvci1waWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL3BhcnRzL2NvbG9yLXByZXNldC9jb2xvci1wcmVzZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLHVCQUF1QixFQUN2QixZQUFZLEVBRWYsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFXN0UsTUFBTSxPQUFPLG9CQUFvQjtJQXVCN0IsWUFBNkIsWUFBK0I7UUFBL0IsaUJBQVksR0FBWixZQUFZLENBQW1CO1FBVHJELG9CQUFlLEdBQUcsSUFBSSxZQUFZLENBQVEsS0FBSyxDQUFDLENBQUM7UUFHakQsY0FBUyxHQUFHLElBQUksWUFBWSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBRTVDLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBMkIsQ0FBQztRQUVqRCxrQkFBYSxHQUFZLEtBQUssQ0FBQztJQUV5QixDQUFDO0lBZmpFLElBQ1csS0FBSyxDQUFDLGFBQXNCO1FBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUN6QyxDQUFDO0lBY00sV0FBVztRQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFDVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUNXLEtBQUs7UUFDWixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFekQsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkc7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsSUFDVyxTQUFTO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDcEcsQ0FBQztJQUlNLE9BQU8sQ0FBQyxLQUE4QjtRQUN6QyxFQUFFLENBQUMsS0FBSyxDQUFDO2FBQ0osSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLENBQTBCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUN4RSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQ1YsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FDMUI7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUlNLFVBQVUsQ0FBQyxLQUE4QjtRQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7WUE3RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUUsRUFBRTtnQkFLWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFDbEQ7OztZQVZRLGlCQUFpQjs7OzBCQWFyQixLQUFLO29CQUdMLEtBQUs7b0JBR0wsS0FBSyxTQUFDLGtCQUFrQjs4QkFLeEIsTUFBTTt3QkFHTixNQUFNO3NCQWNOLFdBQVcsU0FBQyx1QkFBdUI7b0JBS25DLFdBQVcsU0FBQyxZQUFZO3dCQVV4QixXQUFXLFNBQUMsZ0JBQWdCO3NCQUs1QixZQUFZLFNBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3BDLFlBQVksU0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUM7eUJBYXJDLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDbEMsWUFBWSxTQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBIb3N0QmluZGluZyxcclxuICAgIElucHV0LFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgT3V0cHV0LFxyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICBIb3N0TGlzdGVuZXIsXHJcbiAgICBPbkRlc3Ryb3lcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29sb3IsIENvbG9yU3RyaW5nIH0gZnJvbSAnLi8uLi8uLi8uLi9oZWxwZXJzL2NvbG9yLmNsYXNzJztcclxuaW1wb3J0IHsgU3ViamVjdCwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFrZVVudGlsLCBkZWxheSwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDb2xvclBpY2tlckNvbmZpZyB9IGZyb20gJy4vLi4vLi4vLi4vc2VydmljZXMvY29sb3ItcGlja2VyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogYGNvbG9yLXByZXNldGAsXHJcbiAgICB0ZW1wbGF0ZTogYGAsXHJcbiAgICBzdHlsZVVybHM6IFtcclxuICAgICAgICBgLi8uLi9iYXNlLnN0eWxlLnNjc3NgLFxyXG4gICAgICAgIGAuL2NvbG9yLXByZXNldC5jb21wb25lbnQuc2Nzc2BcclxuICAgIF0sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29sb3JQcmVzZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgYWN0aXZlQ29sb3I6IENvbG9yO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgY29sb3I6IENvbG9yO1xyXG5cclxuICAgIEBJbnB1dCgnc2hvdy1kZXB0aC10aXRsZScpXHJcbiAgICBwdWJsaWMgc2V0IGRlcHRoKHNob3dEZXB0aFRleHQ6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLnNob3dEZXB0aFRleHQgPSAhIXNob3dEZXB0aFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgQE91dHB1dCgpXHJcbiAgICBwdWJsaWMgc2VsZWN0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDb2xvcj4oZmFsc2UpO1xyXG5cclxuICAgIEBPdXRwdXQoKVxyXG4gICAgcHVibGljIGxvbmdQcmVzcyA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICAgIHByaXZhdGUgbW91c2V1cCA9IG5ldyBTdWJqZWN0PE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50PigpO1xyXG5cclxuICAgIHByaXZhdGUgc2hvd0RlcHRoVGV4dDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcGlja2VyQ29uZmlnOiBDb2xvclBpY2tlckNvbmZpZykgeyB9XHJcblxyXG4gICAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubW91c2V1cC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5tb3VzZXVwLmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5iYWNrZ3JvdW5kQ29sb3InKVxyXG4gICAgcHVibGljIGdldCBiZ0NvbG9yKCk6IENvbG9yU3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xvci50b1JnYmFTdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIudGl0bGUnKVxyXG4gICAgcHVibGljIGdldCB0aXRsZSgpIHtcclxuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMuY29sb3IgPyB0aGlzLmNvbG9yLnRvSGV4U3RyaW5nKCkgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0RlcHRoVGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5waWNrZXJDb25maWcucHJlc2V0c1RpdGxlLnJlcGxhY2UoL1xce1xccyooLis/KVxccypcXH0vZywgKG1hdGNoLCBmaXJzdE1hdGNoKSA9PiBjb2xvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNlbGVjdGVkJylcclxuICAgIHB1YmxpYyBnZXQgY2xhc3NOYW1lKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZUNvbG9yID8gdGhpcy5jb2xvci50b1JnYmFTdHJpbmcoKSA9PT0gdGhpcy5hY3RpdmVDb2xvci50b1JnYmFTdHJpbmcoKSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXHJcbiAgICBASG9zdExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgWyckZXZlbnQnXSlcclxuICAgIHB1YmxpYyBvblRvdWNoKGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIG9mKGV2ZW50KVxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIG1hcCgoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IGUudGltZVN0YW1wIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSxcclxuICAgICAgICAgICAgICAgIGRlbGF5KDM1MCksXHJcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5tb3VzZXVwKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5sb25nUHJlc3MubmV4dCh0cnVlKSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlLmVtaXQodGhpcy5jb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2V1cCcsIFsnJGV2ZW50J10pXHJcbiAgICBASG9zdExpc3RlbmVyKCd0b3VjaGVuZCcsIFsnJGV2ZW50J10pXHJcbiAgICBwdWJsaWMgb25Ub3VjaEVuZChldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1vdXNldXAubmV4dChldmVudCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==