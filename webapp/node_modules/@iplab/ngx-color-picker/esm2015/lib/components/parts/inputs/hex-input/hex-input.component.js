import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy } from '@angular/core';
import { Color } from '../../../../helpers/color.class';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function HexComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "HEX");
    ɵngcc0.ɵɵelementEnd();
} }
export class HexComponent {
    constructor() {
        this.hueChange = new EventEmitter(false);
        this.colorChange = new EventEmitter(false);
        this.prefixValue = '';
    }
    set label(value) {
        this.labelVisible = true;
    }
    set prefix(value) {
        this.prefixValue = value;
    }
    get value() {
        return this.prefixValue + (this.color ? this.color.toHexString(this.color.getRgba().alpha < 1).replace('#', '') : '');
    }
    onInputChange(event, inputValue) {
        const value = inputValue.toLowerCase().replace('#', '');
        if (((event.keyCode === 13 || event.key.toLowerCase() === 'enter') && value.length === 3)
            || value.length === 6 || value.length === 8) {
            const hex = parseInt(value, 16);
            const hexStr = hex.toString(16);
            /**
             * if value is valid
             * change color else do nothing
             * after parsing number leading 0 is removed,
             * compare length and add leading 0 before comparing two values
             */
            if (hexStr.padStart(value.length, '0') === value && this.value !== value) {
                const newColor = new Color(`#${value}`);
                const hue = new Color().setHsva(newColor.getHsva().hue);
                this.hueChange.emit(hue);
                this.colorChange.emit(newColor);
            }
        }
    }
}
HexComponent.ɵfac = function HexComponent_Factory(t) { return new (t || HexComponent)(); };
HexComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HexComponent, selectors: [["hex-input-component"]], inputs: { label: "label", prefix: "prefix", hue: "hue", color: "color" }, outputs: { hueChange: "hueChange", colorChange: "colorChange" }, decls: 4, vars: 2, consts: [[1, "column"], ["type", "text", 3, "value", "keyup"], ["elRef", ""], [4, "ngIf"]], template: function HexComponent_Template(rf, ctx) { if (rf & 1) {
        const _r2 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("keyup", function HexComponent_Template_input_keyup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const _r0 = ɵngcc0.ɵɵreference(2); return ctx.onInputChange($event, _r0.value); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, HexComponent_span_3_Template, 2, 0, "span", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.labelVisible);
    } }, directives: [ɵngcc1.NgIf], styles: ["[_nghost-%COMP%], [_nghost-%COMP%]     *{padding:0;margin:0;box-sizing:border-box}", "[_nghost-%COMP%]{display:table;width:100%;text-align:center;color:#b4b4b4;font-size:11px}.column[_ngcontent-%COMP%]{display:table-cell;padding:0 2px}input[_ngcontent-%COMP%]{width:100%;border:1px solid #dadada;color:#272727;text-align:center;font-size:12px;-webkit-appearance:none;border-radius:0;margin:0 0 6px;height:26px;outline:none}", ""], changeDetection: 0 });
HexComponent.propDecorators = {
    hue: [{ type: Input }],
    hueChange: [{ type: Output }],
    color: [{ type: Input }],
    colorChange: [{ type: Output }],
    label: [{ type: Input }],
    prefix: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HexComponent, [{
        type: Component,
        args: [{
                selector: `hex-input-component`,
                template: "<div class=\"column\">\r\n    <input #elRef type=\"text\" [value]=\"value\" (keyup)=\"onInputChange($event, elRef.value)\" />\r\n    <span *ngIf=\"labelVisible\">HEX</span>\r\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}", ":host{display:table;width:100%;text-align:center;color:#b4b4b4;font-size:11px}.column{display:table-cell;padding:0 2px}input{width:100%;border:1px solid #dadada;color:#272727;text-align:center;font-size:12px;-webkit-appearance:none;border-radius:0;margin:0 0 6px;height:26px;outline:none}", ""]
            }]
    }], function () { return []; }, { hueChange: [{
            type: Output
        }], colorChange: [{
            type: Output
        }], label: [{
            type: Input
        }], prefix: [{
            type: Input
        }], hue: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,