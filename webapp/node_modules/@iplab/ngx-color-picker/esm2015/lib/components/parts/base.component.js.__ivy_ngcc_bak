import { ElementRef, Renderer2, Directive } from '@angular/core';
/**
 * because a dynamic directive yet is not implemented,
 * we have a base class which will
 * help us to implement position calculation in our
 * components
 */
export class BaseComponent {
    constructor(document, elementRef, renderer) {
        this.document = document;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.eventHooks = [];
        this.window = { pageXOffset: 0, pageYOffset: 0 };
        this.window = document.defaultView;
        this.requestAnimationFrame = this.getRequestAnimationFrame();
    }
    onEventChange(event) {
        this.calculate(event);
        this.eventHooks.push(this.renderer.listen(this.document, 'mouseup', () => this.removeListeners()));
        this.eventHooks.push(this.renderer.listen(this.document, 'touchend', () => this.removeListeners()));
        this.eventHooks.push(this.renderer.listen(this.document, 'mousemove', (e) => this.calculate(e)));
        this.eventHooks.push(this.renderer.listen(this.document, 'touchmove', (e) => this.calculate(e)));
    }
    calculateCoordinates(event) {
        const { width: elWidth, height: elHeight, top: elTop, left: elLeft } = this.elementRef.nativeElement.getBoundingClientRect();
        const pageX = typeof event['pageX'] === 'number' ? event['pageX'] : event['touches'][0].pageX;
        const pageY = typeof event['pageY'] === 'number' ? event['pageY'] : event['touches'][0].pageY;
        const x = Math.max(0, Math.min(pageX - (elLeft + this.window.pageXOffset), elWidth));
        const y = Math.max(0, Math.min(pageY - (elTop + this.window.pageYOffset), elHeight));
        this.movePointer({ x, y, height: elHeight, width: elWidth });
    }
    calculate(event) {
        event.preventDefault();
        if (!this.requestAnimationFrame) {
            return this.calculateCoordinates(event);
        }
        this.requestAnimationFrame(() => this.calculateCoordinates(event));
    }
    getRequestAnimationFrame() {
        return this.window.requestAnimationFrame ||
            this.window.webkitRequestAnimationFrame ||
            this.window.mozRequestAnimationFrame ||
            this.window.oRequestAnimationFrame ||
            this.window.msRequestAnimationFrame;
    }
    removeListeners() {
        this.eventHooks.forEach((cb) => cb());
        this.eventHooks.length = 0;
    }
    ngOnDestroy() {
        this.removeListeners();
    }
}
BaseComponent.decorators = [
    { type: Directive }
];
BaseComponent.ctorParameters = () => [
    null,
    { type: ElementRef },
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,