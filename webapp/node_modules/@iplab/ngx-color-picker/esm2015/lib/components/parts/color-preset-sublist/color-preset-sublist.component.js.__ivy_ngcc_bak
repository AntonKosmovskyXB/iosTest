import { Component, Input, ChangeDetectionStrategy, Renderer2, Inject, ChangeDetectorRef, Output, EventEmitter, HostBinding } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { OpacityAnimation, ListAnimation } from './color-preset-sublist.animation';
export class ColorPresetSublist {
    constructor(renderer, document, cdr) {
        this.renderer = renderer;
        this.document = document;
        this.cdr = cdr;
        this.selectionChange = new EventEmitter(false);
        this.direction = 'up';
        this.showChildren = false;
        this.hooks = [];
    }
    ngOnDestroy() {
        this.removeListeners();
        this.cdr.detach();
    }
    removeListeners() {
        this.hooks.forEach((callback) => callback());
        this.hooks.length = 0;
    }
    /**
     * emit color change
     */
    onSelectionChange(color) {
        this.selectionChange.next(color);
    }
    onLongPress() {
        this.showChildren = true;
        this.listenDocumentClick();
    }
    listenDocumentClick() {
        this.hooks.push(this.renderer.listen(this.document, 'mousedown', () => this.closeList()));
        this.hooks.push(this.renderer.listen(this.document, 'touchstart', () => this.closeList()));
    }
    closeList() {
        if (this.showChildren) {
            this.showChildren = false;
            this.cdr.markForCheck();
            this.removeListeners();
        }
    }
    get className() {
        return `direction-${this.direction}`;
    }
}
ColorPresetSublist.decorators = [
    { type: Component, args: [{
                selector: `color-preset-sublist`,
                template: "<color-preset [show-depth-title]=\"list.length > 1\" [color]=\"list[0]\" [activeColor]=\"activeColor\" (longPress)=\"onLongPress()\" (selectionChange)=\"onSelectionChange($event)\"></color-preset>\r\n<div class=\"reflection\" [style.backgroundColor]=\"list[0].toRgbaString()\"></div>\r\n<div class=\"reflection\" [style.backgroundColor]=\"list[0].toRgbaString()\"></div>\r\n\r\n<div class=\"sublist\" *ngIf=\"showChildren\" [@opacityAnimation]=\"showChildren\" [@listAnimation]=\"direction\">\r\n    <color-preset \r\n        *ngFor=\"let preset of list | reverse : (direction == 'up' || direction == 'right')\"\r\n        [color]=\"preset\"\r\n        [activeColor]=\"activeColor\"\r\n        (selectionChange)=\"onSelectionChange($event)\"></color-preset>\r\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [OpacityAnimation, ListAnimation],
                styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}", ":host{position:relative;display:inline-block}color-preset{position:relative;z-index:3}.reflection{display:none;position:absolute;height:100%;width:100%;z-index:2;right:-2px;top:-2px;opacity:.5}.reflection+.reflection{opacity:.2;right:-4px;top:-4px;z-index:1}color-preset:hover+.reflection,color-preset:hover+.reflection+.reflection{display:block}.sublist{position:absolute;bottom:-8px;left:-8px;right:-8px;background:#fff;border-radius:2px;box-shadow:0 0 2px rgba(0,0,0,.3),0 2px 4px rgba(0,0,0,.3);padding:8px 5px;text-align:center;z-index:1000}.sublist color-preset{margin:8px 0 0}.sublist color-preset:first-child{margin:0}:host(.direction-down) .sublist{bottom:auto;top:-8px}"]
            },] }
];
ColorPresetSublist.ctorParameters = () => [
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef }
];
ColorPresetSublist.propDecorators = {
    list: [{ type: Input }],
    selectionChange: [{ type: Output }],
    direction: [{ type: Input }],
    activeColor: [{ type: Input }],
    className: [{ type: HostBinding, args: ['className',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcHJlc2V0LXN1Ymxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXBsYWIvbmd4LWNvbG9yLXBpY2tlci9zcmMvbGliL2NvbXBvbmVudHMvcGFydHMvY29sb3ItcHJlc2V0LXN1Ymxpc3QvY29sb3ItcHJlc2V0LXN1Ymxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsS0FBSyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsTUFBTSxFQUVOLGlCQUFpQixFQUNqQixNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBWW5GLE1BQU0sT0FBTyxrQkFBa0I7SUFrQjNCLFlBQ3FCLFFBQW1CLEVBQ0QsUUFBUSxFQUMxQixHQUFzQjtRQUZ0QixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ0QsYUFBUSxHQUFSLFFBQVEsQ0FBQTtRQUMxQixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQWZwQyxvQkFBZSxHQUFHLElBQUksWUFBWSxDQUFRLEtBQUssQ0FBQyxDQUFDO1FBR2pELGNBQVMsR0FBcUMsSUFBSSxDQUFDO1FBS25ELGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBRTdCLFVBQUssR0FBb0IsRUFBRSxDQUFDO0lBTXBDLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLGVBQWU7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7T0FFRztJQUNJLGlCQUFpQixDQUFDLEtBQVk7UUFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU8sbUJBQW1CO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRU8sU0FBUztRQUNiLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFRCxJQUNXLFNBQVM7UUFDaEIsT0FBTyxhQUFhLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7WUF4RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLDJ3QkFBb0Q7Z0JBS3BELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxVQUFVLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUM7O2FBQ2hEOzs7WUFyQkcsU0FBUzs0Q0EwQ0osTUFBTSxTQUFDLFFBQVE7WUF2Q3BCLGlCQUFpQjs7O21CQXFCaEIsS0FBSzs4QkFHTCxNQUFNO3dCQUdOLEtBQUs7MEJBR0wsS0FBSzt3QkFnREwsV0FBVyxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgSW5wdXQsXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIFJlbmRlcmVyMixcclxuICAgIEluamVjdCxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgT3V0cHV0LFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgSG9zdEJpbmRpbmdcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vLi4vLi4vLi4vaGVscGVycy9jb2xvci5jbGFzcyc7XHJcbmltcG9ydCB7IE9wYWNpdHlBbmltYXRpb24sIExpc3RBbmltYXRpb24gfSBmcm9tICcuL2NvbG9yLXByZXNldC1zdWJsaXN0LmFuaW1hdGlvbic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBgY29sb3ItcHJlc2V0LXN1Ymxpc3RgLFxyXG4gICAgdGVtcGxhdGVVcmw6IGAuL2NvbG9yLXByZXNldC1zdWJsaXN0LmNvbXBvbmVudC5odG1sYCxcclxuICAgIHN0eWxlVXJsczogW1xyXG4gICAgICAgIGAuLy4uL2Jhc2Uuc3R5bGUuc2Nzc2AsXHJcbiAgICAgICAgYC4vY29sb3ItcHJlc2V0LXN1Ymxpc3QuY29tcG9uZW50LnNjc3NgXHJcbiAgICBdLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgICBhbmltYXRpb25zOiBbT3BhY2l0eUFuaW1hdGlvbiwgTGlzdEFuaW1hdGlvbl1cclxufSlcclxuZXhwb3J0IGNsYXNzIENvbG9yUHJlc2V0U3VibGlzdCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBsaXN0OiBBcnJheTxDb2xvcj47XHJcblxyXG4gICAgQE91dHB1dCgpXHJcbiAgICBwdWJsaWMgc2VsZWN0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDb2xvcj4oZmFsc2UpO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgZGlyZWN0aW9uOiAnZG93bicgfCAndXAnIHwgJ2xlZnQnIHwgJ3JpZ2h0JyA9ICd1cCc7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBhY3RpdmVDb2xvcjogQ29sb3I7XHJcblxyXG4gICAgcHVibGljIHNob3dDaGlsZHJlbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgaG9va3M6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50LFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuY2RyLmRldGFjaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXJzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaG9va3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKCkpO1xyXG4gICAgICAgIHRoaXMuaG9va3MubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGVtaXQgY29sb3IgY2hhbmdlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblNlbGVjdGlvbkNoYW5nZShjb2xvcjogQ29sb3IpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZS5uZXh0KGNvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Mb25nUHJlc3MoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zaG93Q2hpbGRyZW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubGlzdGVuRG9jdW1lbnRDbGljaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbGlzdGVuRG9jdW1lbnRDbGljaygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmhvb2tzLnB1c2godGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5kb2N1bWVudCwgJ21vdXNlZG93bicsICgpID0+IHRoaXMuY2xvc2VMaXN0KCkpKTtcclxuICAgICAgICB0aGlzLmhvb2tzLnB1c2godGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5kb2N1bWVudCwgJ3RvdWNoc3RhcnQnLCAoKSA9PiB0aGlzLmNsb3NlTGlzdCgpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjbG9zZUxpc3QoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0NoaWxkcmVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzTmFtZScpXHJcbiAgICBwdWJsaWMgZ2V0IGNsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgZGlyZWN0aW9uLSR7dGhpcy5kaXJlY3Rpb259YDtcclxuICAgIH1cclxufSJdfQ==