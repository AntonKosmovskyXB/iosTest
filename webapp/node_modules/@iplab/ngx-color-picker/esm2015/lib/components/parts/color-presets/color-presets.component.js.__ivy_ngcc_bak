import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy } from '@angular/core';
import { Color } from './../../../helpers/color.class';
export class ColorPresetsComponent {
    constructor() {
        this.columns = 8;
        this.hueChange = new EventEmitter(false);
        this.colorChange = new EventEmitter(false);
        this.direction = 'up';
    }
    onSelectionChange(color) {
        const selectedRgbaColor = color.getRgba();
        const selectedHsvaColor = color.getHsva();
        const newColor = new Color().setRgba(selectedRgbaColor.red, selectedRgbaColor.green, selectedRgbaColor.blue, selectedRgbaColor.alpha);
        const hueColor = new Color().setHsva(selectedHsvaColor.hue);
        this.hueChange.emit(hueColor);
        this.colorChange.emit(newColor);
    }
    isList(colorPreset) {
        return Array.isArray(colorPreset);
    }
}
ColorPresetsComponent.decorators = [
    { type: Component, args: [{
                selector: `color-presets-component`,
                template: "<div class=\"row\" *ngFor=\"let chunk of colorPresets | chunks: columns; let first = first; let last = last;\" [ngClass]=\"{ 'first': first, 'last': last }\">\r\n    <ng-template ngFor let-preset let-first=\"first\" let-last=\"last\" [ngForOf]=\"chunk\">\r\n        <color-preset-sublist \r\n            [list]=\"preset\" \r\n            *ngIf=\"isList(preset); else colorPreset\" \r\n            [direction]=\"direction\"\r\n            [activeColor]=\"color\"\r\n            [ngClass]=\"{ 'first': first, 'last': last }\"\r\n            (selectionChange)=\"onSelectionChange($event)\"></color-preset-sublist>\r\n\r\n        <ng-template #colorPreset>\r\n            <color-preset \r\n                [ngClass]=\"{ 'first': first, 'last': last }\"\r\n                [color]=\"preset\" \r\n                [activeColor]=\"color\" \r\n                (selectionChange)=\"onSelectionChange($event)\"></color-preset>\r\n        </ng-template>\r\n    </ng-template>\r\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}", ":host{display:block;font-size:0}:host .row:first-child{padding:0}color-preset-sublist:first-child,color-preset:first-child{margin:0}"]
            },] }
];
ColorPresetsComponent.propDecorators = {
    columns: [{ type: Input }],
    colorPresets: [{ type: Input }],
    hue: [{ type: Input }],
    hueChange: [{ type: Output }],
    color: [{ type: Input }],
    colorChange: [{ type: Output }],
    direction: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcHJlc2V0cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pcGxhYi9uZ3gtY29sb3ItcGlja2VyL3NyYy9saWIvY29tcG9uZW50cy9wYXJ0cy9jb2xvci1wcmVzZXRzL2NvbG9yLXByZXNldHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBV3ZELE1BQU0sT0FBTyxxQkFBcUI7SUFUbEM7UUFZVyxZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBU3BCLGNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBUSxLQUFLLENBQUMsQ0FBQztRQU0zQyxnQkFBVyxHQUFHLElBQUksWUFBWSxDQUFRLEtBQUssQ0FBQyxDQUFDO1FBRzdDLGNBQVMsR0FBcUMsSUFBSSxDQUFDO0lBZ0I5RCxDQUFDO0lBZFUsaUJBQWlCLENBQUMsS0FBWTtRQUNqQyxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQyxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUUxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0SSxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU1RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQXdDO1FBQ2xELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7WUE3Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLHc5QkFBNkM7Z0JBSzdDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNsRDs7O3NCQUdJLEtBQUs7MkJBR0wsS0FBSztrQkFHTCxLQUFLO3dCQUdMLE1BQU07b0JBR04sS0FBSzswQkFHTCxNQUFNO3dCQUdOLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLy4uLy4uLy4uL2hlbHBlcnMvY29sb3IuY2xhc3MnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogYGNvbG9yLXByZXNldHMtY29tcG9uZW50YCxcclxuICAgIHRlbXBsYXRlVXJsOiBgLi9jb2xvci1wcmVzZXRzLmNvbXBvbmVudC5odG1sYCxcclxuICAgIHN0eWxlVXJsczogW1xyXG4gICAgICAgIGAuLy4uL2Jhc2Uuc3R5bGUuc2Nzc2AsXHJcbiAgICAgICAgYC4vY29sb3ItcHJlc2V0cy5jb21wb25lbnQuc2Nzc2BcclxuICAgIF0sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29sb3JQcmVzZXRzQ29tcG9uZW50IHtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIGNvbHVtbnM6IG51bWJlciA9IDg7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBjb2xvclByZXNldHM6IEFycmF5PEFycmF5PENvbG9yPiB8IENvbG9yPjtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIGh1ZTogQ29sb3I7XHJcblxyXG4gICAgQE91dHB1dCgpXHJcbiAgICBwdWJsaWMgaHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDb2xvcj4oZmFsc2UpO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgY29sb3I6IENvbG9yO1xyXG5cclxuICAgIEBPdXRwdXQoKVxyXG4gICAgcHVibGljIGNvbG9yQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDb2xvcj4oZmFsc2UpO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgZGlyZWN0aW9uOiAnZG93bicgfCAndXAnIHwgJ2xlZnQnIHwgJ3JpZ2h0JyA9ICd1cCc7XHJcblxyXG4gICAgcHVibGljIG9uU2VsZWN0aW9uQ2hhbmdlKGNvbG9yOiBDb2xvcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkUmdiYUNvbG9yID0gY29sb3IuZ2V0UmdiYSgpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSHN2YUNvbG9yID0gY29sb3IuZ2V0SHN2YSgpO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdDb2xvciA9IG5ldyBDb2xvcigpLnNldFJnYmEoc2VsZWN0ZWRSZ2JhQ29sb3IucmVkLCBzZWxlY3RlZFJnYmFDb2xvci5ncmVlbiwgc2VsZWN0ZWRSZ2JhQ29sb3IuYmx1ZSwgc2VsZWN0ZWRSZ2JhQ29sb3IuYWxwaGEpO1xyXG4gICAgICAgIGNvbnN0IGh1ZUNvbG9yID0gbmV3IENvbG9yKCkuc2V0SHN2YShzZWxlY3RlZEhzdmFDb2xvci5odWUpO1xyXG5cclxuICAgICAgICB0aGlzLmh1ZUNoYW5nZS5lbWl0KGh1ZUNvbG9yKTtcclxuICAgICAgICB0aGlzLmNvbG9yQ2hhbmdlLmVtaXQobmV3Q29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc0xpc3QoY29sb3JQcmVzZXQ6IEFycmF5PEFycmF5PENvbG9yPiB8IENvbG9yPik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGNvbG9yUHJlc2V0KTtcclxuICAgIH1cclxufSJdfQ==