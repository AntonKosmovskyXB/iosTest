import { Component, HostBinding, Input, EventEmitter, Output, ChangeDetectionStrategy, HostListener } from '@angular/core';
import { Subject, of } from 'rxjs';
import { takeUntil, delay, map } from 'rxjs/operators';
import { ColorPickerConfig } from './../../../services/color-picker.service';
import * as ɵngcc0 from '@angular/core';
export class ColorPresetComponent {
    constructor(pickerConfig) {
        this.pickerConfig = pickerConfig;
        this.selectionChange = new EventEmitter(false);
        this.longPress = new EventEmitter(false);
        this.mouseup = new Subject();
        this.showDepthText = false;
    }
    set depth(showDepthText) {
        this.showDepthText = !!showDepthText;
    }
    ngOnDestroy() {
        this.mouseup.next();
        this.mouseup.complete();
    }
    get bgColor() {
        return this.color.toRgbaString();
    }
    get title() {
        const color = this.color ? this.color.toHexString() : '';
        if (this.showDepthText) {
            return this.pickerConfig.presetsTitle.replace(/\{\s*(.+?)\s*\}/g, (match, firstMatch) => color);
        }
        return color;
    }
    get className() {
        return this.activeColor ? this.color.toRgbaString() === this.activeColor.toRgbaString() : false;
    }
    onTouch(event) {
        of(event)
            .pipe(map((e) => e.timeStamp || new Date().getTime()), delay(350), takeUntil(this.mouseup))
            .subscribe(() => this.longPress.next(true));
        this.selectionChange.emit(this.color);
    }
    onTouchEnd(event) {
        this.mouseup.next(event);
    }
}
ColorPresetComponent.ɵfac = function ColorPresetComponent_Factory(t) { return new (t || ColorPresetComponent)(ɵngcc0.ɵɵdirectiveInject(ColorPickerConfig)); };
ColorPresetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ColorPresetComponent, selectors: [["color-preset"]], hostVars: 5, hostBindings: function ColorPresetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function ColorPresetComponent_mousedown_HostBindingHandler($event) { return ctx.onTouch($event); })("touchstart", function ColorPresetComponent_touchstart_HostBindingHandler($event) { return ctx.onTouch($event); })("mouseup", function ColorPresetComponent_mouseup_HostBindingHandler($event) { return ctx.onTouchEnd($event); })("touchend", function ColorPresetComponent_touchend_HostBindingHandler($event) { return ctx.onTouchEnd($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("title", ctx.title);
        ɵngcc0.ɵɵstyleProp("background-color", ctx.bgColor);
        ɵngcc0.ɵɵclassProp("selected", ctx.className);
    } }, inputs: { depth: ["show-depth-title", "depth"], activeColor: "activeColor", color: "color" }, outputs: { selectionChange: "selectionChange", longPress: "longPress" }, decls: 0, vars: 0, template: function ColorPresetComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%], [_nghost-%COMP%]     *{padding:0;margin:0;box-sizing:border-box}", "[_nghost-%COMP%]{display:inline-block;height:12px;width:12px;position:relative;cursor:pointer;transition:all .2s}"], changeDetection: 0 });
ColorPresetComponent.ctorParameters = () => [
    { type: ColorPickerConfig }
];
ColorPresetComponent.propDecorators = {
    activeColor: [{ type: Input }],
    color: [{ type: Input }],
    depth: [{ type: Input, args: ['show-depth-title',] }],
    selectionChange: [{ type: Output }],
    longPress: [{ type: Output }],
    bgColor: [{ type: HostBinding, args: ['style.backgroundColor',] }],
    title: [{ type: HostBinding, args: ['attr.title',] }],
    className: [{ type: HostBinding, args: ['class.selected',] }],
    onTouch: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
    onTouchEnd: [{ type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorPresetComponent, [{
        type: Component,
        args: [{
                selector: `color-preset`,
                template: ``,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}", ":host{display:inline-block;height:12px;width:12px;position:relative;cursor:pointer;transition:all .2s}"]
            }]
    }], function () { return [{ type: ColorPickerConfig }]; }, { selectionChange: [{
            type: Output
        }], longPress: [{
            type: Output
        }], depth: [{
            type: Input,
            args: ['show-depth-title']
        }], bgColor: [{
            type: HostBinding,
            args: ['style.backgroundColor']
        }], title: [{
            type: HostBinding,
            args: ['attr.title']
        }], className: [{
            type: HostBinding,
            args: ['class.selected']
        }], onTouch: [{
            type: HostListener,
            args: ['mousedown', ['$event']]
        }, {
            type: HostListener,
            args: ['touchstart', ['$event']]
        }], onTouchEnd: [{
            type: HostListener,
            args: ['mouseup', ['$event']]
        }, {
            type: HostListener,
            args: ['touchend', ['$event']]
        }], activeColor: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,