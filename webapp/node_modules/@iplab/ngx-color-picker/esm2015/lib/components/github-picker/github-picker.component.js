import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { ColorPickerControl } from './../../helpers/control.class';
import { getValueByType } from './../../helpers/helper.functions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../parts/color-presets/color-presets.component';
export class GithubPickerComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.colorChange = new EventEmitter(false);
        this.subscriptions = [];
    }
    ngOnInit() {
        if (!this.control) {
            this.control = new ColorPickerControl();
        }
        if (this.color) {
            this.control.setValueFrom(this.color);
        }
        if (!this.control.hasPresets()) {
            /**
             * set color presets
             * defined by github color picker component
             */
            this.control
                .setColorPresets([
                '#b80000', '#db3e00', '#fccb00', '#008b02', '#006b76', '#1273de', '#004dcf', '#5300eb',
                '#eb9694', '#fad0c3', '#fef3bd', '#c1e1c5', '#bedadc', '#c4def6', '#bed3f3', '#d4c4fb'
            ]);
        }
        this.subscriptions.push(this.control.valueChanges.subscribe((value) => {
            this.cdr.markForCheck();
            this.colorChange.emit(getValueByType(value, this.control.initType));
        }));
    }
    ngOnDestroy() {
        this.cdr.detach();
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.subscriptions.length = 0;
    }
    ngOnChanges(changes) {
        if (this.color && this.control && getValueByType(this.control.value, this.control.initType) !== this.color) {
            this.control.setValueFrom(this.color);
        }
    }
}
GithubPickerComponent.ɵfac = function GithubPickerComponent_Factory(t) { return new (t || GithubPickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
GithubPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GithubPickerComponent, selectors: [["github-picker"]], inputs: { control: "control", color: "color" }, outputs: { colorChange: "colorChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 2, consts: [["direction", "down", 3, "color", "colorPresets", "colorChange"]], template: function GithubPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "color-presets-component", 0);
        ɵngcc0.ɵɵlistener("colorChange", function GithubPickerComponent_Template_color_presets_component_colorChange_0_listener($event) { return ctx.control.value = $event; });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("color", ctx.control.value)("colorPresets", ctx.control.presets);
    } }, directives: [ɵngcc1.ColorPresetsComponent], styles: ["[_nghost-%COMP%], [_nghost-%COMP%]     *{padding:0;margin:0;box-sizing:border-box}", "@charset \"UTF-8\";[_nghost-%COMP%]{display:block;background:#fff;width:212px;border:1px solid rgba(0,0,0,.2);box-shadow:0 3px 12px rgba(0,0,0,.15);border-radius:4px;padding:5px}[_nghost-%COMP%]     color-preset, [_nghost-%COMP%]     color-preset-sublist{width:25px;height:25px}[_nghost-%COMP%]     color-preset.selected:after, [_nghost-%COMP%]     color-preset:hover:after{display:block;content:\"\u00A0\";position:absolute;left:-1px;top:-1px;bottom:-1px;right:-1px;z-index:10;border:2px solid #fff;box-shadow:0 0 5px 2px rgba(0,0,0,.2)}"], changeDetection: 0 });
GithubPickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
GithubPickerComponent.propDecorators = {
    color: [{ type: Input }],
    control: [{ type: Input }],
    colorChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GithubPickerComponent, [{
        type: Component,
        args: [{
                selector: `github-picker`,
                template: "<color-presets-component \r\n    direction=\"down\"\r\n    [(color)]=\"control.value\" \r\n    [colorPresets]=\"control.presets\"></color-presets-component>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}", "@charset \"UTF-8\";:host{display:block;background:#fff;width:212px;border:1px solid rgba(0,0,0,.2);box-shadow:0 3px 12px rgba(0,0,0,.15);border-radius:4px;padding:5px}:host ::ng-deep color-preset,:host ::ng-deep color-preset-sublist{width:25px;height:25px}:host ::ng-deep color-preset.selected:after,:host ::ng-deep color-preset:hover:after{display:block;content:\"\u00A0\";position:absolute;left:-1px;top:-1px;bottom:-1px;right:-1px;z-index:10;border:2px solid #fff;box-shadow:0 0 5px 2px rgba(0,0,0,.2)}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { colorChange: [{
            type: Output
        }], control: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,