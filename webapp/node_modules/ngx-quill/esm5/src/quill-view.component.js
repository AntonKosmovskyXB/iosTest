import { __decorate, __param } from "tslib";
import { isPlatformServer } from '@angular/common';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { AfterViewInit, Component, ElementRef, Inject, Input, OnChanges, PLATFORM_ID, Renderer2, SimpleChanges, ViewEncapsulation, NgZone } from '@angular/core';
import { defaultModules } from './quill-defaults';
import { getFormat } from './helpers';
import * as ɵngcc0 from '@angular/core';
var Quill = null;
var QuillViewComponent = /** @class */ (function () {
    function QuillViewComponent(platformId, config, renderer, elementRef, zone) {
        var _this = this;
        this.platformId = platformId;
        this.config = config;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.zone = zone;
        this.strict = true;
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = function (quillEditor, value) {
            var format = getFormat(_this.format, _this.config.format);
            var content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    QuillViewComponent.prototype.ngOnChanges = function (changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    };
    QuillViewComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (isPlatformServer(this.platformId)) {
            return;
        }
        if (!Quill) {
            this.zone.runOutsideAngular(function () {
                Quill = require('quill');
            });
        }
        var modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));
        modules.toolbar = false;
        this.customOptions.forEach(function (customOption) {
            var newCustomOption = Quill.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            Quill.register(newCustomOption, true);
        });
        var debug = this.debug;
        if (!debug && debug !== false && this.config.debug) {
            debug = this.config.debug;
        }
        var formats = this.formats;
        if (!formats && formats === undefined) {
            formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined);
        }
        var theme = this.theme || (this.config.theme ? this.config.theme : 'snow');
        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
        this.zone.runOutsideAngular(function () {
            _this.quillEditor = new Quill(_this.editorElem, {
                debug: debug,
                formats: formats,
                modules: modules,
                readOnly: true,
                strict: _this.strict,
                theme: theme
            });
        });
        this.renderer.addClass(this.editorElem, 'ngx-quill-view');
        if (this.content) {
            this.valueSetter(this.quillEditor, this.content);
        }
    };
    QuillViewComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }
    ]; };
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "format", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "theme", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "modules", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "debug", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "formats", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "strict", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "customOptions", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "preserveWhitespace", void 0);
    QuillViewComponent = __decorate([ __param(0, Inject(PLATFORM_ID)),
        __param(1, Inject(QUILL_CONFIG_TOKEN)),
        __param(2, Inject(Renderer2)),
        __param(3, Inject(ElementRef)),
        __param(4, Inject(NgZone))
    ], QuillViewComponent);
QuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) { return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone)); };
QuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewComponent, selectors: [["quill-view"]], inputs: { strict: "strict", customOptions: "customOptions", preserveWhitespace: "preserveWhitespace", format: "format", theme: "theme", modules: "modules", debug: "debug", formats: "formats", content: "content" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function QuillViewComponent_Template(rf, ctx) { }, styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'quill-view',
                template: "\n",
                styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }, { type: ɵngcc0.Renderer2, decorators: [{
                type: Inject,
                args: [Renderer2]
            }] }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: ɵngcc0.NgZone, decorators: [{
                type: Inject,
                args: [NgZone]
            }] }]; }, { strict: [{
            type: Input
        }], customOptions: [{
            type: Input
        }], preserveWhitespace: [{
            type: Input
        }], format: [{
            type: Input
        }], theme: [{
            type: Input
        }], modules: [{
            type: Input
        }], debug: [{
            type: Input
        }], formats: [{
            type: Input
        }], content: [{
            type: Input
        }] }); })();
    return QuillViewComponent;
}());
export { QuillViewComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtcXVpbGwvc3JjL3F1aWxsLXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUVsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQTZCLE1BQU0sMkJBQTJCLENBQUE7QUFFekYsT0FBTyxFQUNMLGFBQWEsRUFDYixTQUFTLEVBQ1QsVUFBVSxFQUNWLE1BQU0sRUFDTixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxTQUFTLEVBQ1QsYUFBYSxFQUNiLGlCQUFpQixFQUNqQixNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUE7QUFFdEIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRWpELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxXQUFXLENBQUE7O0FBTW5DLElBQUksS0FBSyxHQUFRLElBQUksQ0FBQTtBQWFyQjtBQUFzRCxJQWNwRCw0QkFDK0IsVUFBZSxFQUNSLE1BQW1CLEVBQzVCLFFBQW1CLEVBQ2xCLFVBQXNCLEVBQzFCLElBQVk7QUFDckMsUUFORCxpQkFNSTtBQUNOLFFBTmlDLGVBQVUsR0FBVixVQUFVLENBQUs7QUFBQyxRQUNULFdBQU0sR0FBTixNQUFNLENBQWE7QUFBQyxRQUM3QixhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFDbkIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQzNCLFNBQUksR0FBSixJQUFJLENBQVE7QUFDeEMsUUFYVyxXQUFNLEdBQUcsSUFBSSxDQUFBO0FBQ3hCLFFBQ1csa0JBQWEsR0FBbUIsRUFBRSxDQUFBO0FBQzdDLFFBQVcsdUJBQWtCLEdBQUcsS0FBSyxDQUFBO0FBQ3JDLFFBU0UsZ0JBQVcsR0FBRyxVQUFDLFdBQXdCLEVBQUUsS0FBVTtBQUFJLFlBQ3JELElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxL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QyxrQkFBa0IsQ0FBQyxDQUFBO0VBekI3QixRQUFRLEVBQUUsWUFBWSxjQU10Qix0Q0FtQitCLFFBQzVCLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO09BcEJaLEVBQUUsSUFDWCx1QkFOVSxwQ0F5QmEsUUFDbkIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7QUFBRSxRQUNwQixXQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtjQXZCbEIsV0FHQSxDQUFDLDFCQW9Ca0IsT0FuQlAsa0JBQWtCLENBc0c5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELHlCQUFDO0FBQ0EsQ0FEQSxBQXRHRCxJQXNHQztBQUNELFNBdkdhLGtCQUFrQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbidcblxuaW1wb3J0IHsgUVVJTExfQ09ORklHX1RPS0VOLCBRdWlsbENvbmZpZywgUXVpbGxNb2R1bGVzIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuaW50ZXJmYWNlcydcblxuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFBMQVRGT1JNX0lELFxuICBSZW5kZXJlcjIsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBOZ1pvbmVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuaW1wb3J0IHsgZGVmYXVsdE1vZHVsZXMgfSBmcm9tICcuL3F1aWxsLWRlZmF1bHRzJ1xuaW1wb3J0IHsgQ3VzdG9tT3B0aW9uIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuY29tcG9uZW50J1xuaW1wb3J0IHtnZXRGb3JtYXR9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7IFF1aWxsRWRpdG9yIH0gZnJvbSAnLi9xdWlsbC5pbnRlcmZhY2VzJ1xuXG4vLyBCZWNhdXNlIHF1aWxsIHVzZXMgYGRvY3VtZW50YCBkaXJlY3RseSwgd2UgY2Fubm90IGBpbXBvcnRgIGR1cmluZyBTU1Jcbi8vIGluc3RlYWQsIHdlIGxvYWQgZHluYW1pY2FsbHkgdmlhIGByZXF1aXJlKCdxdWlsbCcpYCBpbiBgbmdBZnRlclZpZXdJbml0KClgXG5kZWNsYXJlIGNvbnN0IHJlcXVpcmU6IGFueVxubGV0IFF1aWxsOiBhbnkgPSBudWxsXG5cbkBDb21wb25lbnQoe1xuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBzZWxlY3RvcjogJ3F1aWxsLXZpZXcnLFxuICBzdHlsZXM6IFtgXG4ucWwtY29udGFpbmVyLm5neC1xdWlsbC12aWV3IHtcbiAgYm9yZGVyOiAwO1xufVxuYF0sXG4gIHRlbXBsYXRlOiBgXG5gXG59KVxuZXhwb3J0IGNsYXNzIFF1aWxsVmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG4gIHF1aWxsRWRpdG9yITogUXVpbGxFZGl0b3JcbiAgZWRpdG9yRWxlbTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWRcblxuICBASW5wdXQoKSBmb3JtYXQ/OiAnb2JqZWN0JyB8ICdodG1sJyB8ICd0ZXh0JyB8ICdqc29uJ1xuICBASW5wdXQoKSB0aGVtZT86IHN0cmluZ1xuICBASW5wdXQoKSBtb2R1bGVzPzogUXVpbGxNb2R1bGVzXG4gIEBJbnB1dCgpIGRlYnVnPzogJ3dhcm4nIHzCoCdsb2cnIHzCoCdlcnJvcicgfMKgZmFsc2VcbiAgQElucHV0KCkgZm9ybWF0cz86IHN0cmluZ1tdIHzCoG51bGxcbiAgQElucHV0KCkgc3RyaWN0ID0gdHJ1ZVxuICBASW5wdXQoKSBjb250ZW50OiBhbnlcbiAgQElucHV0KCkgY3VzdG9tT3B0aW9uczogQ3VzdG9tT3B0aW9uW10gPSBbXVxuICBASW5wdXQoKSBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBmYWxzZVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55LFxuICAgIEBJbmplY3QoUVVJTExfQ09ORklHX1RPS0VOKSBwcml2YXRlIGNvbmZpZzogUXVpbGxDb25maWcsXG4gICAgQEluamVjdChSZW5kZXJlcjIpIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBASW5qZWN0KE5nWm9uZSkgcHJpdmF0ZSB6b25lOiBOZ1pvbmVcbiAgKSB7fVxuXG4gIHZhbHVlU2V0dGVyID0gKHF1aWxsRWRpdG9yOiBRdWlsbEVkaXRvciwgdmFsdWU6IGFueSk6IGFueSA9PiB7XG4gICAgY29uc3QgZm9ybWF0ID0gZ2V0Rm9ybWF0KHRoaXMuZm9ybWF0LCB0aGlzLmNvbmZpZy5mb3JtYXQpXG4gICAgbGV0IGNvbnRlbnQgPSB2YWx1ZVxuICAgIGlmIChmb3JtYXQgPT09ICdodG1sJyB8fMKgZm9ybWF0ID09PSAndGV4dCcpIHtcbiAgICAgIGNvbnRlbnQgPSBxdWlsbEVkaXRvci5jbGlwYm9hcmQuY29udmVydCh2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2pzb24nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb250ZW50ID0gSlNPTi5wYXJzZSh2YWx1ZSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29udGVudCA9IFt7IGluc2VydDogdmFsdWUgfV1cbiAgICAgIH1cbiAgICB9XG4gICAgcXVpbGxFZGl0b3Iuc2V0Q29udGVudHMoY29udGVudClcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoIXRoaXMucXVpbGxFZGl0b3IpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5jb250ZW50KSB7XG4gICAgICB0aGlzLnZhbHVlU2V0dGVyKHRoaXMucXVpbGxFZGl0b3IsIGNoYW5nZXMuY29udGVudC5jdXJyZW50VmFsdWUpXG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIVF1aWxsKSB7XG4gICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICBRdWlsbCA9IHJlcXVpcmUoJ3F1aWxsJylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgbW9kdWxlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubW9kdWxlcyB8fCAodGhpcy5jb25maWcubW9kdWxlcyB8fMKgZGVmYXVsdE1vZHVsZXMpKVxuICAgIG1vZHVsZXMudG9vbGJhciA9IGZhbHNlXG5cbiAgICB0aGlzLmN1c3RvbU9wdGlvbnMuZm9yRWFjaCgoY3VzdG9tT3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCBuZXdDdXN0b21PcHRpb24gPSBRdWlsbC5pbXBvcnQoY3VzdG9tT3B0aW9uLmltcG9ydClcbiAgICAgIG5ld0N1c3RvbU9wdGlvbi53aGl0ZWxpc3QgPSBjdXN0b21PcHRpb24ud2hpdGVsaXN0XG4gICAgICBRdWlsbC5yZWdpc3RlcihuZXdDdXN0b21PcHRpb24sIHRydWUpXG4gICAgfSlcblxuICAgIGxldCBkZWJ1ZyA9IHRoaXMuZGVidWdcbiAgICBpZiAoIWRlYnVnICYmIGRlYnVnICE9PSBmYWxzZSAmJiB0aGlzLmNvbmZpZy5kZWJ1Zykge1xuICAgICAgZGVidWcgPSB0aGlzLmNvbmZpZy5kZWJ1Z1xuICAgIH1cblxuICAgIGxldCBmb3JtYXRzID0gdGhpcy5mb3JtYXRzXG4gICAgaWYgKCFmb3JtYXRzICYmIGZvcm1hdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9ybWF0cyA9IHRoaXMuY29uZmlnLmZvcm1hdHMgPyBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZy5mb3JtYXRzKSA6wqAodGhpcy5jb25maWcuZm9ybWF0cyA9PT0gbnVsbCA/IG51bGwgOiB1bmRlZmluZWQpXG4gICAgfVxuICAgIGNvbnN0IHRoZW1lID0gdGhpcy50aGVtZSB8fCAodGhpcy5jb25maWcudGhlbWUgPyB0aGlzLmNvbmZpZy50aGVtZSA6ICdzbm93JylcblxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICdhZnRlcmJlZ2luJyxcbiAgICAgIHRoaXMucHJlc2VydmVXaGl0ZXNwYWNlID8gJzxwcmUgcXVpbGwtdmlldy1lbGVtZW50PjwvcHJlPicgOiAnPGRpdiBxdWlsbC12aWV3LWVsZW1lbnQ+PC9kaXY+J1xuICAgIClcblxuICAgIHRoaXMuZWRpdG9yRWxlbSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnW3F1aWxsLXZpZXctZWxlbWVudF0nXG4gICAgKVxuXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMucXVpbGxFZGl0b3IgPSBuZXcgUXVpbGwodGhpcy5lZGl0b3JFbGVtLCB7XG4gICAgICAgIGRlYnVnLFxuICAgICAgICBmb3JtYXRzLFxuICAgICAgICBtb2R1bGVzLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgc3RyaWN0OiB0aGlzLnN0cmljdCxcbiAgICAgICAgdGhlbWVcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lZGl0b3JFbGVtLCAnbmd4LXF1aWxsLXZpZXcnKVxuXG4gICAgaWYgKHRoaXMuY29udGVudCkge1xuICAgICAgdGhpcy52YWx1ZVNldHRlcih0aGlzLnF1aWxsRWRpdG9yLCB0aGlzLmNvbnRlbnQpXG4gICAgfVxuICB9XG59XG4iXX0=