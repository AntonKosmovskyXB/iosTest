import { DomSanitizer } from '@angular/platform-browser';
import { QuillConfig, QuillModules } from './quill-editor.interfaces';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import { QuillDelta, QuillEditor } from './quill.interfaces';
import * as ɵngcc0 from '@angular/core';
export interface CustomOption {
    import: string;
    whitelist: any[];
}
export interface Range {
    index: number;
    length: number;
}
export interface ContentChange {
    content: any;
    delta: QuillDelta;
    editor: QuillEditor;
    html: string | null;
    oldDelta: QuillDelta;
    source: string;
    text: string;
}
export interface SelectionChange {
    editor: QuillEditor;
    oldRange: Range | null;
    range: Range | null;
    source: string;
}
export interface Blur {
    editor: QuillEditor;
    source: string;
}
export interface Focus {
    editor: QuillEditor;
    source: string;
}
export declare type EditorChangeContent = ContentChange & {
    event: 'text-change';
};
export declare type EditorChangeSelection = SelectionChange & {
    event: 'selection-change';
};
export declare class QuillEditorComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {
    private elementRef;
    private domSanitizer;
    private doc;
    private platformId;
    private renderer;
    private zone;
    private config;
    static normalizeClassNames(classes: string): string[];
    quillEditor: QuillEditor;
    editorElem: HTMLElement | undefined;
    content: any;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    readOnly?: boolean;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    styles: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    classes?: string;
    trimOnValidation: boolean;
    onEditorCreated: EventEmitter<QuillEditor>;
    onEditorChanged: EventEmitter<EditorChangeContent | EditorChangeSelection>;
    onContentChanged: EventEmitter<ContentChange>;
    onSelectionChanged: EventEmitter<SelectionChange>;
    onFocus: EventEmitter<Focus>;
    onBlur: EventEmitter<Blur>;
    disabled: boolean;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, config: QuillConfig);
    onModelChange(_modelValue?: any): void;
    onModelTouched(): void;
    onValidatorChanged(): void;
    valueGetter: (quillEditor: QuillEditor, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: QuillEditor, value: any) => any;
    ngAfterViewInit(): void;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: QuillDelta, oldDelta: QuillDelta, source: string) => void;
    editorChangeHandler: (event: "text-change" | "selection-change", current: any, old: any, source: string) => void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    addClasses(classList: string): void;
    removeClasses(classList: string): void;
    writeValue(currentValue: any): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(): {
        minLengthError?: {
            given: number;
            minLength: number;
        };
        maxLengthError?: {
            given: number;
            maxLength: number;
        };
        requiredError?: {
            empty: boolean;
        };
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<QuillEditorComponent, "quill-editor", never, { "required": "required"; "customToolbarPosition": "customToolbarPosition"; "sanitize": "sanitize"; "styles": "styles"; "strict": "strict"; "customOptions": "customOptions"; "preserveWhitespace": "preserveWhitespace"; "trimOnValidation": "trimOnValidation"; "valueGetter": "valueGetter"; "valueSetter": "valueSetter"; "format": "format"; "theme": "theme"; "modules": "modules"; "debug": "debug"; "readOnly": "readOnly"; "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "formats": "formats"; "scrollingContainer": "scrollingContainer"; "bounds": "bounds"; "trackChanges": "trackChanges"; "classes": "classes"; }, { "onEditorCreated": "onEditorCreated"; "onEditorChanged": "onEditorChanged"; "onContentChanged": "onContentChanged"; "onSelectionChanged": "onSelectionChanged"; "onFocus": "onFocus"; "onBlur": "onBlur"; }, never, ["[quill-editor-toolbar]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJxdWlsbC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IFF1aWxsQ29uZmlnLCBRdWlsbE1vZHVsZXMgfSBmcm9tICcuL3F1aWxsLWVkaXRvci5pbnRlcmZhY2VzJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgUXVpbGxEZWx0YSwgUXVpbGxFZGl0b3IgfSBmcm9tICcuL3F1aWxsLmludGVyZmFjZXMnO1xuZXhwb3J0IGludGVyZmFjZSBDdXN0b21PcHRpb24ge1xuICAgIGltcG9ydDogc3RyaW5nO1xuICAgIHdoaXRlbGlzdDogYW55W107XG59XG5leHBvcnQgaW50ZXJmYWNlIFJhbmdlIHtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGxlbmd0aDogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBDb250ZW50Q2hhbmdlIHtcbiAgICBjb250ZW50OiBhbnk7XG4gICAgZGVsdGE6IFF1aWxsRGVsdGE7XG4gICAgZWRpdG9yOiBRdWlsbEVkaXRvcjtcbiAgICBodG1sOiBzdHJpbmcgfCBudWxsO1xuICAgIG9sZERlbHRhOiBRdWlsbERlbHRhO1xuICAgIHNvdXJjZTogc3RyaW5nO1xuICAgIHRleHQ6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uQ2hhbmdlIHtcbiAgICBlZGl0b3I6IFF1aWxsRWRpdG9yO1xuICAgIG9sZFJhbmdlOiBSYW5nZSB8IG51bGw7XG4gICAgcmFuZ2U6IFJhbmdlIHwgbnVsbDtcbiAgICBzb3VyY2U6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQmx1ciB7XG4gICAgZWRpdG9yOiBRdWlsbEVkaXRvcjtcbiAgICBzb3VyY2U6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRm9jdXMge1xuICAgIGVkaXRvcjogUXVpbGxFZGl0b3I7XG4gICAgc291cmNlOiBzdHJpbmc7XG59XG5leHBvcnQgZGVjbGFyZSB0eXBlIEVkaXRvckNoYW5nZUNvbnRlbnQgPSBDb250ZW50Q2hhbmdlICYge1xuICAgIGV2ZW50OiAndGV4dC1jaGFuZ2UnO1xufTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRWRpdG9yQ2hhbmdlU2VsZWN0aW9uID0gU2VsZWN0aW9uQ2hhbmdlICYge1xuICAgIGV2ZW50OiAnc2VsZWN0aW9uLWNoYW5nZSc7XG59O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUXVpbGxFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFZhbGlkYXRvciB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgZG9tU2FuaXRpemVyO1xuICAgIHByaXZhdGUgZG9jO1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBzdGF0aWMgbm9ybWFsaXplQ2xhc3NOYW1lcyhjbGFzc2VzOiBzdHJpbmcpOiBzdHJpbmdbXTtcbiAgICBxdWlsbEVkaXRvcjogUXVpbGxFZGl0b3I7XG4gICAgZWRpdG9yRWxlbTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgY29udGVudDogYW55O1xuICAgIGZvcm1hdD86ICdvYmplY3QnIHwgJ2h0bWwnIHwgJ3RleHQnIHwgJ2pzb24nO1xuICAgIHRoZW1lPzogc3RyaW5nO1xuICAgIG1vZHVsZXM/OiBRdWlsbE1vZHVsZXM7XG4gICAgZGVidWc/OiAnd2FybicgfCAnbG9nJyB8ICdlcnJvcicgfCBmYWxzZTtcbiAgICByZWFkT25seT86IGJvb2xlYW47XG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgbWF4TGVuZ3RoPzogbnVtYmVyO1xuICAgIG1pbkxlbmd0aD86IG51bWJlcjtcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICBmb3JtYXRzPzogc3RyaW5nW10gfCBudWxsO1xuICAgIGN1c3RvbVRvb2xiYXJQb3NpdGlvbjogJ3RvcCcgfCAnYm90dG9tJztcbiAgICBzYW5pdGl6ZTogYm9vbGVhbjtcbiAgICBzdHlsZXM6IGFueTtcbiAgICBzdHJpY3Q6IGJvb2xlYW47XG4gICAgc2Nyb2xsaW5nQ29udGFpbmVyPzogSFRNTEVsZW1lbnQgfCBzdHJpbmcgfCBudWxsO1xuICAgIGJvdW5kcz86IEhUTUxFbGVtZW50IHwgc3RyaW5nO1xuICAgIGN1c3RvbU9wdGlvbnM6IEN1c3RvbU9wdGlvbltdO1xuICAgIHRyYWNrQ2hhbmdlcz86ICd1c2VyJyB8ICdhbGwnO1xuICAgIHByZXNlcnZlV2hpdGVzcGFjZTogYm9vbGVhbjtcbiAgICBjbGFzc2VzPzogc3RyaW5nO1xuICAgIHRyaW1PblZhbGlkYXRpb246IGJvb2xlYW47XG4gICAgb25FZGl0b3JDcmVhdGVkOiBFdmVudEVtaXR0ZXI8UXVpbGxFZGl0b3I+O1xuICAgIG9uRWRpdG9yQ2hhbmdlZDogRXZlbnRFbWl0dGVyPEVkaXRvckNoYW5nZUNvbnRlbnQgfCBFZGl0b3JDaGFuZ2VTZWxlY3Rpb24+O1xuICAgIG9uQ29udGVudENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxDb250ZW50Q2hhbmdlPjtcbiAgICBvblNlbGVjdGlvbkNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxTZWxlY3Rpb25DaGFuZ2U+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxGb2N1cz47XG4gICAgb25CbHVyOiBFdmVudEVtaXR0ZXI8Qmx1cj47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGRvYzogYW55LCBwbGF0Zm9ybUlkOiBhbnksIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSwgY29uZmlnOiBRdWlsbENvbmZpZyk7XG4gICAgb25Nb2RlbENoYW5nZShfbW9kZWxWYWx1ZT86IGFueSk6IHZvaWQ7XG4gICAgb25Nb2RlbFRvdWNoZWQoKTogdm9pZDtcbiAgICBvblZhbGlkYXRvckNoYW5nZWQoKTogdm9pZDtcbiAgICB2YWx1ZUdldHRlcjogKHF1aWxsRWRpdG9yOiBRdWlsbEVkaXRvciwgZWRpdG9yRWxlbWVudDogSFRNTEVsZW1lbnQpID0+IGFueTtcbiAgICB2YWx1ZVNldHRlcjogKHF1aWxsRWRpdG9yOiBRdWlsbEVkaXRvciwgdmFsdWU6IGFueSkgPT4gYW55O1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHNlbGVjdGlvbkNoYW5nZUhhbmRsZXI6IChyYW5nZTogUmFuZ2UsIG9sZFJhbmdlOiBSYW5nZSwgc291cmNlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgdGV4dENoYW5nZUhhbmRsZXI6IChkZWx0YTogUXVpbGxEZWx0YSwgb2xkRGVsdGE6IFF1aWxsRGVsdGEsIHNvdXJjZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGVkaXRvckNoYW5nZUhhbmRsZXI6IChldmVudDogXCJ0ZXh0LWNoYW5nZVwiIHwgXCJzZWxlY3Rpb24tY2hhbmdlXCIsIGN1cnJlbnQ6IGFueSwgb2xkOiBhbnksIHNvdXJjZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgYWRkQ2xhc3NlcyhjbGFzc0xpc3Q6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVtb3ZlQ2xhc3NlcyhjbGFzc0xpc3Q6IHN0cmluZyk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZShjdXJyZW50VmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKG1vZGVsVmFsdWU6IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIHZhbGlkYXRlKCk6IHtcbiAgICAgICAgbWluTGVuZ3RoRXJyb3I/OiB7XG4gICAgICAgICAgICBnaXZlbjogbnVtYmVyO1xuICAgICAgICAgICAgbWluTGVuZ3RoOiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIG1heExlbmd0aEVycm9yPzoge1xuICAgICAgICAgICAgZ2l2ZW46IG51bWJlcjtcbiAgICAgICAgICAgIG1heExlbmd0aDogbnVtYmVyO1xuICAgICAgICB9O1xuICAgICAgICByZXF1aXJlZEVycm9yPzoge1xuICAgICAgICAgICAgZW1wdHk6IGJvb2xlYW47XG4gICAgICAgIH07XG4gICAgfTtcbn1cbiJdfQ==