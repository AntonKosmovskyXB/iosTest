import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Optional, Output } from '@angular/core';
import { fromEvent, ReplaySubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { getPackageForChart } from '../../helpers/chart.helper';
import { DataTableService } from '../../services/data-table.service';
import { ScriptLoaderService } from '../../services/script-loader.service';
import { ChartType } from '../../types/chart-type';
import { DashboardComponent } from '../dashboard/dashboard.component';
import * as ɵngcc0 from '@angular/core';
export class GoogleChartComponent {
    constructor(element, scriptLoaderService, dataTableService, dashboard) {
        this.element = element;
        this.scriptLoaderService = scriptLoaderService;
        this.dataTableService = dataTableService;
        this.dashboard = dashboard;
        /**
         * The chart-specific options. All options listen in the Google Charts documentation applying
         * to the chart type specified can be used here.
         */
        this.options = {};
        /**
         * If this is set to `true`, the chart will be redrawn if the browser window is resized.
         * Defaults to `false` and should only be used when specifying the width or height of the chart
         * in percent.
         *
         * Note that this can impact performance.
         */
        this.dynamicResize = false;
        this.ready = new EventEmitter();
        this.error = new EventEmitter();
        this.select = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.wrapperReadySubject = new ReplaySubject(1);
        this.initialized = false;
        this.eventListeners = new Map();
    }
    get chart() {
        return this.chartWrapper.getChart();
    }
    get wrapperReady$() {
        return this.wrapperReadySubject.asObservable();
    }
    get chartWrapper() {
        if (!this.wrapper) {
            throw new Error('Trying to access the chart wrapper before it was fully initialized');
        }
        return this.wrapper;
    }
    set chartWrapper(wrapper) {
        this.wrapper = wrapper;
        this.drawChart();
    }
    ngOnInit() {
        // We don't need to load any chart packages, the chart wrapper will handle this for us
        this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {
            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);
            // Only ever create the wrapper once to allow animations to happen when something changes.
            this.wrapper = new google.visualization.ChartWrapper({
                container: this.element.nativeElement,
                chartType: this.type,
                dataTable: this.dataTable,
                options: this.mergeOptions()
            });
            this.registerChartEvents();
            this.wrapperReadySubject.next(this.wrapper);
            this.initialized = true;
            this.drawChart();
        });
    }
    ngOnChanges(changes) {
        if (changes.dynamicResize) {
            this.updateResizeListener();
        }
        if (this.initialized) {
            let shouldRedraw = false;
            if (changes.data || changes.columns || changes.formatters) {
                this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);
                this.wrapper.setDataTable(this.dataTable);
                shouldRedraw = true;
            }
            if (changes.type) {
                this.wrapper.setChartType(this.type);
                shouldRedraw = true;
            }
            if (changes.options || changes.width || changes.height || changes.title) {
                this.wrapper.setOptions(this.mergeOptions());
                shouldRedraw = true;
            }
            if (shouldRedraw) {
                this.drawChart();
            }
        }
    }
    ngOnDestroy() {
        this.unsubscribeToResizeIfSubscribed();
    }
    /**
     * For listening to events other than the most common ones (available via Output properties).
     *
     * Can be called after the chart emits that it's "ready".
     *
     * Returns a handle that can be used for `removeEventListener`.
     */
    addEventListener(eventName, callback) {
        const handle = this.registerChartEvent(this.chart, eventName, callback);
        this.eventListeners.set(handle, { eventName, callback, handle });
        return handle;
    }
    removeEventListener(handle) {
        const entry = this.eventListeners.get(handle);
        if (entry) {
            google.visualization.events.removeListener(entry.handle);
            this.eventListeners.delete(handle);
        }
    }
    updateResizeListener() {
        this.unsubscribeToResizeIfSubscribed();
        if (this.dynamicResize) {
            this.resizeSubscription = fromEvent(window, 'resize', { passive: true })
                .pipe(debounceTime(100))
                .subscribe(() => {
                if (this.initialized) {
                    this.drawChart();
                }
            });
        }
    }
    unsubscribeToResizeIfSubscribed() {
        if (this.resizeSubscription != null) {
            this.resizeSubscription.unsubscribe();
            this.resizeSubscription = undefined;
        }
    }
    mergeOptions() {
        return Object.assign({ title: this.title, width: this.width, height: this.height }, this.options);
    }
    registerChartEvents() {
        google.visualization.events.removeAllListeners(this.wrapper);
        this.registerChartEvent(this.wrapper, 'ready', () => {
            // This could also be done by checking if we already subscribed to the events
            google.visualization.events.removeAllListeners(this.chart);
            this.registerChartEvent(this.chart, 'onmouseover', (event) => this.mouseover.emit(event));
            this.registerChartEvent(this.chart, 'onmouseout', (event) => this.mouseleave.emit(event));
            this.registerChartEvent(this.chart, 'select', () => {
                const selection = this.chart.getSelection();
                this.select.emit({ selection });
            });
            this.eventListeners.forEach(x => (x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback)));
            this.ready.emit({ chart: this.chart });
        });
        this.registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));
    }
    registerChartEvent(object, eventName, callback) {
        return google.visualization.events.addListener(object, eventName, callback);
    }
    drawChart() {
        if (this.dashboard != null) {
            // If this chart is part of a dashboard, the dashboard takes care of drawing
            return;
        }
        this.wrapper.draw();
    }
}
GoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) { return new (t || GoogleChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService), ɵngcc0.ɵɵdirectiveInject(DataTableService), ɵngcc0.ɵɵdirectiveInject(DashboardComponent, 8)); };
GoogleChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GoogleChartComponent, selectors: [["google-chart"]], hostAttrs: [1, "google-chart"], inputs: { options: "options", dynamicResize: "dynamicResize", type: "type", data: "data", columns: "columns", title: "title", width: "width", height: "height", formatters: "formatters" }, outputs: { ready: "ready", error: "error", select: "select", mouseover: "mouseover", mouseleave: "mouseleave" }, exportAs: ["googleChart"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function GoogleChartComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] { width: fit-content; display: block; }"], changeDetection: 0 });
GoogleChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ScriptLoaderService },
    { type: DataTableService },
    { type: DashboardComponent, decorators: [{ type: Optional }] }
];
GoogleChartComponent.propDecorators = {
    type: [{ type: Input }],
    data: [{ type: Input }],
    columns: [{ type: Input }],
    title: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    options: [{ type: Input }],
    formatters: [{ type: Input }],
    dynamicResize: [{ type: Input }],
    ready: [{ type: Output }],
    error: [{ type: Output }],
    select: [{ type: Output }],
    mouseover: [{ type: Output }],
    mouseleave: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartComponent, [{
        type: Component,
        args: [{
                selector: 'google-chart',
                template: '',
                host: { class: 'google-chart' },
                exportAs: 'googleChart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [':host { width: fit-content; display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScriptLoaderService }, { type: DataTableService }, { type: DashboardComponent, decorators: [{
                type: Optional
            }] }]; }, { options: [{
            type: Input
        }], dynamicResize: [{
            type: Input
        }], ready: [{
            type: Output
        }], error: [{
            type: Output
        }], select: [{
            type: Output
        }], mouseover: [{
            type: Output
        }], mouseleave: [{
            type: Output
        }], type: [{
            type: Input
        }], data: [{
            type: Input
        }], columns: [{
            type: Input
        }], title: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], formatters: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,