/// <reference path="./types.ts" />
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject } from 'rxjs';
import { ScriptLoaderService } from '../../services/script-loader.service';
import { ChartEditorRef } from './chart-editor-ref';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ChartEditorComponent {
    constructor(scriptLoaderService) {
        this.scriptLoaderService = scriptLoaderService;
        this.initializedSubject = new Subject();
    }
    /**
     * Emits as soon as the chart editor is fully initialized.
     */
    get initialized$() {
        return this.initializedSubject.asObservable();
    }
    ngOnInit() {
        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {
            this.editor = new google.visualization.ChartEditor();
            this.initializedSubject.next(this.editor);
            this.initializedSubject.complete();
        });
    }
    editChart(component, options) {
        if (!component.chartWrapper) {
            throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');
        }
        if (!this.editor) {
            throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');
        }
        const handle = new ChartEditorRef(this.editor);
        this.editor.openDialog(component.chartWrapper, options || {});
        handle.afterClosed().subscribe(result => {
            if (result) {
                component.chartWrapper = result;
            }
        });
        return handle;
    }
}
ChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) { return new (t || ChartEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService)); };
ChartEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartEditorComponent, selectors: [["chart-editor"]], hostAttrs: [1, "chart-editor"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ChartEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ChartEditorComponent.ctorParameters = () => [
    { type: ScriptLoaderService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartEditorComponent, [{
        type: Component,
        args: [{
                selector: 'chart-editor',
                template: `<ng-content></ng-content>`,
                host: { class: 'chart-editor' },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ScriptLoaderService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9jb21wb25lbnRzL2NoYXJ0LWVkaXRvci9jaGFydC1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUVuQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBUXBELE1BQU0sT0FBTyxvQkFBb0I7QUFBRyxJQUlsQyxZQUFvQixtQkFBd0M7QUFBSSxRQUE1Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0FBQUMsUUFGckQsdUJBQWtCLEdBQUcsSUFBSSxPQUFPLEVBQW9DLENBQUM7QUFDL0UsSUFDaUUsQ0FBQztBQUNsRSxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSxJQUFXLFlBQVk7QUFDekIsUUFBSSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSCxJQUNTLFFBQVE7QUFDakIsUUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtBQUM3RSxZQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzNELFlBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDaEQsWUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDekMsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBVVMsU0FBUyxDQUFDLFNBQW9CLEVBQUUsT0FBaUQ7QUFDMUYsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRTtBQUNqQyxZQUFNLE1BQU0sSUFBSSxLQUFLLENBQ2IsNEdBQTRHLENBQzdHLENBQUM7QUFDUixTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUN0QixZQUFNLE1BQU0sSUFBSSxLQUFLLENBQ2IsMkdBQTJHLENBQzVHLENBQUM7QUFDUixTQUFLO0FBQ0wsUUFDSSxNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkQsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNsRSxRQUNJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDNUMsWUFBTSxJQUFJLE1BQU0sRUFBRTtBQUNsQixnQkFBUSxTQUFTLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUN4QyxhQUFPO0FBQ1AsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQ0ksT0FBTyxNQUFNLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBQ0g7Z0RBM0RDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsY0FBYyxrQkFDeEIsUUFBUSxFQUFFO0VBQTJCLGtCQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLGtCQUMvQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxjQUNoRDs7O2lEQUNJO0FBQUM7QUFBOEMsWUFYM0MsbUJBQW1CO0FBQUc7Ozs7Ozs7Ozs2RUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdHlwZXMudHNcIiAvPlxuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgU2NyaXB0TG9hZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NjcmlwdC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDaGFydEJhc2UgfSBmcm9tICcuLi9jaGFydC1iYXNlL2NoYXJ0LWJhc2UuY29tcG9uZW50JztcblxuaW1wb3J0IHsgQ2hhcnRFZGl0b3JSZWYgfSBmcm9tICcuL2NoYXJ0LWVkaXRvci1yZWYnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjaGFydC1lZGl0b3InLFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBob3N0OiB7IGNsYXNzOiAnY2hhcnQtZWRpdG9yJyB9LFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBDaGFydEVkaXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgZWRpdG9yOiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvciB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZFN1YmplY3QgPSBuZXcgU3ViamVjdDxnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvcj4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNjcmlwdExvYWRlclNlcnZpY2U6IFNjcmlwdExvYWRlclNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFzIHNvb24gYXMgdGhlIGNoYXJ0IGVkaXRvciBpcyBmdWxseSBpbml0aWFsaXplZC5cbiAgICovXG4gIHB1YmxpYyBnZXQgaW5pdGlhbGl6ZWQkKCkge1xuICAgIHJldHVybiB0aGlzLmluaXRpYWxpemVkU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNjcmlwdExvYWRlclNlcnZpY2UubG9hZENoYXJ0UGFja2FnZXMoJ2NoYXJ0ZWRpdG9yJykuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZWRpdG9yID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yKCk7XG4gICAgICB0aGlzLmluaXRpYWxpemVkU3ViamVjdC5uZXh0KHRoaXMuZWRpdG9yKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWRTdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIGNoYXJ0IGVkaXRvciBhcyBhbiBlbWJlZGRlZCBkaWFsb2cgYm94IG9uIHRoZSBwYWdlLlxuICAgKiBJZiB0aGUgZWRpdG9yIGdldHMgc2F2ZWQsIHRoZSBjb21wb25lbnRzJyBjaGFydCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCB0aGUgcmVzdWx0LlxuICAgKlxuICAgKiBAcGFyYW0gY29tcG9uZW50IFRoZSBjaGFydCB0byBiZSBlZGl0ZWQuXG4gICAqIEByZXR1cm5zIEEgcmVmZXJlbmNlIHRvIHRoZSBvcGVuIGVkaXRvci5cbiAgICovXG4gIHB1YmxpYyBlZGl0Q2hhcnQoY29tcG9uZW50OiBDaGFydEJhc2UpOiBDaGFydEVkaXRvclJlZjtcbiAgcHVibGljIGVkaXRDaGFydChjb21wb25lbnQ6IENoYXJ0QmFzZSwgb3B0aW9uczogZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3JPcHRpb25zKTogQ2hhcnRFZGl0b3JSZWY7XG4gIHB1YmxpYyBlZGl0Q2hhcnQoY29tcG9uZW50OiBDaGFydEJhc2UsIG9wdGlvbnM/OiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvck9wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBvbmVudC5jaGFydFdyYXBwZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0NoYXJ0IHdyYXBwZXIgaXMgYHVuZGVmaW5lZGAuIFBsZWFzZSB3YWl0IGZvciB0aGUgYGluaXRpYWxpemVkJGAgb2JzZXJ2YWJsZSBiZWZvcmUgdHJ5aW5nIHRvIGVkaXQgYSBjaGFydC4nXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZWRpdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDaGFydCBlZGl0b3IgaXMgYHVuZGVmaW5lZGAuIFBsZWFzZSB3YWl0IGZvciB0aGUgYGluaXRpYWxpemVkJGAgb2JzZXJ2YWJsZSBiZWZvcmUgdHJ5aW5nIHRvIGVkaXQgYSBjaGFydC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZSA9IG5ldyBDaGFydEVkaXRvclJlZih0aGlzLmVkaXRvcik7XG4gICAgdGhpcy5lZGl0b3Iub3BlbkRpYWxvZyhjb21wb25lbnQuY2hhcnRXcmFwcGVyLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIGhhbmRsZS5hZnRlckNsb3NlZCgpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBjb21wb25lbnQuY2hhcnRXcmFwcGVyID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZTtcbiAgfVxufVxuIl19