/**
 * Created by vadimdez on 21/06/16.
 */
import { ElementRef, EventEmitter, OnChanges, SimpleChanges, OnInit, OnDestroy, AfterViewChecked } from '@angular/core';
import { PDFDocumentProxy, PDFSource, PDFProgressData } from 'pdfjs-dist';
import * as ɵngcc0 from '@angular/core';
export declare enum RenderTextMode {
    DISABLED = 0,
    ENABLED = 1,
    ENHANCED = 2
}
export declare class PdfViewerComponent implements OnChanges, OnInit, OnDestroy, AfterViewChecked {
    private element;
    static CSS_UNITS: number;
    static BORDER_WIDTH: number;
    pdfViewerContainer: any;
    private isVisible;
    private pdfMultiPageViewer;
    private pdfMultiPageLinkService;
    private pdfMultiPageFindController;
    private pdfSinglePageViewer;
    private pdfSinglePageLinkService;
    private pdfSinglePageFindController;
    private _cMapsUrl;
    private _renderText;
    private _renderTextMode;
    private _stickToPage;
    private _originalSize;
    private _pdf;
    private _page;
    private _zoom;
    private _zoomScale;
    private _rotation;
    private _showAll;
    private _canAutoResize;
    private _fitToPage;
    private _externalLinkTarget;
    private _showBorders;
    private lastLoaded;
    private _latestScrolledPage;
    private resizeTimeout;
    private pageScrollTimeout;
    private isInitialized;
    private loadingTask;
    afterLoadComplete: EventEmitter<PDFDocumentProxy>;
    pageRendered: EventEmitter<CustomEvent<any>>;
    pageInitialized: EventEmitter<CustomEvent<any>>;
    textLayerRendered: EventEmitter<CustomEvent<any>>;
    onError: EventEmitter<any>;
    onProgress: EventEmitter<PDFProgressData>;
    pageChange: EventEmitter<number>;
    src: string | Uint8Array | PDFSource;
    cMapsUrl: string;
    page: any;
    renderText: boolean;
    renderTextMode: RenderTextMode;
    originalSize: boolean;
    showAll: boolean;
    stickToPage: boolean;
    zoom: number;
    zoomScale: 'page-height' | 'page-fit' | 'page-width';
    rotation: number;
    externalLinkTarget: string;
    autoresize: boolean;
    fitToPage: boolean;
    showBorders: boolean;
    static getLinkTarget(type: string): any;
    constructor(element: ElementRef);
    ngAfterViewChecked(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onPageResize(): void;
    readonly pdfLinkService: any;
    readonly pdfViewer: any;
    readonly pdfFindController: any;
    ngOnChanges(changes: SimpleChanges): void;
    updateSize(): void;
    clear(): void;
    private getPDFLinkServiceConfig;
    private setupMultiPageViewer;
    private setupSinglePageViewer;
    private getValidPageNumber;
    private getDocumentParams;
    private loadPDF;
    private update;
    private render;
    private getScale;
    private getCurrentViewer;
    private resetPdfDocument;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PdfViewerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PdfViewerComponent, "pdf-viewer", never, { "cMapsUrl": "c-maps-url"; "page": "page"; "renderText": "render-text"; "renderTextMode": "render-text-mode"; "originalSize": "original-size"; "showAll": "show-all"; "stickToPage": "stick-to-page"; "zoom": "zoom"; "zoomScale": "zoom-scale"; "rotation": "rotation"; "externalLinkTarget": "external-link-target"; "autoresize": "autoresize"; "fitToPage": "fit-to-page"; "showBorders": "show-borders"; "src": "src"; }, { "afterLoadComplete": "after-load-complete"; "pageRendered": "page-rendered"; "pageInitialized": "pages-initialized"; "textLayerRendered": "text-layer-rendered"; "onError": "error"; "onProgress": "on-progress"; "pageChange": "pageChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLXZpZXdlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGRmLXZpZXdlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHZhZGltZGV6IG9uIDIxLzA2LzE2LlxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0NoZWNrZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBERkRvY3VtZW50UHJveHksIFBERlNvdXJjZSwgUERGUHJvZ3Jlc3NEYXRhIH0gZnJvbSAncGRmanMtZGlzdCc7XG5leHBvcnQgZGVjbGFyZSBlbnVtIFJlbmRlclRleHRNb2RlIHtcbiAgICBESVNBQkxFRCA9IDAsXG4gICAgRU5BQkxFRCA9IDEsXG4gICAgRU5IQU5DRUQgPSAyXG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQZGZWaWV3ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdDaGVja2VkIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgc3RhdGljIENTU19VTklUUzogbnVtYmVyO1xuICAgIHN0YXRpYyBCT1JERVJfV0lEVEg6IG51bWJlcjtcbiAgICBwZGZWaWV3ZXJDb250YWluZXI6IGFueTtcbiAgICBwcml2YXRlIGlzVmlzaWJsZTtcbiAgICBwcml2YXRlIHBkZk11bHRpUGFnZVZpZXdlcjtcbiAgICBwcml2YXRlIHBkZk11bHRpUGFnZUxpbmtTZXJ2aWNlO1xuICAgIHByaXZhdGUgcGRmTXVsdGlQYWdlRmluZENvbnRyb2xsZXI7XG4gICAgcHJpdmF0ZSBwZGZTaW5nbGVQYWdlVmlld2VyO1xuICAgIHByaXZhdGUgcGRmU2luZ2xlUGFnZUxpbmtTZXJ2aWNlO1xuICAgIHByaXZhdGUgcGRmU2luZ2xlUGFnZUZpbmRDb250cm9sbGVyO1xuICAgIHByaXZhdGUgX2NNYXBzVXJsO1xuICAgIHByaXZhdGUgX3JlbmRlclRleHQ7XG4gICAgcHJpdmF0ZSBfcmVuZGVyVGV4dE1vZGU7XG4gICAgcHJpdmF0ZSBfc3RpY2tUb1BhZ2U7XG4gICAgcHJpdmF0ZSBfb3JpZ2luYWxTaXplO1xuICAgIHByaXZhdGUgX3BkZjtcbiAgICBwcml2YXRlIF9wYWdlO1xuICAgIHByaXZhdGUgX3pvb207XG4gICAgcHJpdmF0ZSBfem9vbVNjYWxlO1xuICAgIHByaXZhdGUgX3JvdGF0aW9uO1xuICAgIHByaXZhdGUgX3Nob3dBbGw7XG4gICAgcHJpdmF0ZSBfY2FuQXV0b1Jlc2l6ZTtcbiAgICBwcml2YXRlIF9maXRUb1BhZ2U7XG4gICAgcHJpdmF0ZSBfZXh0ZXJuYWxMaW5rVGFyZ2V0O1xuICAgIHByaXZhdGUgX3Nob3dCb3JkZXJzO1xuICAgIHByaXZhdGUgbGFzdExvYWRlZDtcbiAgICBwcml2YXRlIF9sYXRlc3RTY3JvbGxlZFBhZ2U7XG4gICAgcHJpdmF0ZSByZXNpemVUaW1lb3V0O1xuICAgIHByaXZhdGUgcGFnZVNjcm9sbFRpbWVvdXQ7XG4gICAgcHJpdmF0ZSBpc0luaXRpYWxpemVkO1xuICAgIHByaXZhdGUgbG9hZGluZ1Rhc2s7XG4gICAgYWZ0ZXJMb2FkQ29tcGxldGU6IEV2ZW50RW1pdHRlcjxQREZEb2N1bWVudFByb3h5PjtcbiAgICBwYWdlUmVuZGVyZWQ6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxhbnk+PjtcbiAgICBwYWdlSW5pdGlhbGl6ZWQ6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxhbnk+PjtcbiAgICB0ZXh0TGF5ZXJSZW5kZXJlZDogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PGFueT4+O1xuICAgIG9uRXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUHJvZ3Jlc3M6IEV2ZW50RW1pdHRlcjxQREZQcm9ncmVzc0RhdGE+O1xuICAgIHBhZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHNyYzogc3RyaW5nIHwgVWludDhBcnJheSB8IFBERlNvdXJjZTtcbiAgICBjTWFwc1VybDogc3RyaW5nO1xuICAgIHBhZ2U6IGFueTtcbiAgICByZW5kZXJUZXh0OiBib29sZWFuO1xuICAgIHJlbmRlclRleHRNb2RlOiBSZW5kZXJUZXh0TW9kZTtcbiAgICBvcmlnaW5hbFNpemU6IGJvb2xlYW47XG4gICAgc2hvd0FsbDogYm9vbGVhbjtcbiAgICBzdGlja1RvUGFnZTogYm9vbGVhbjtcbiAgICB6b29tOiBudW1iZXI7XG4gICAgem9vbVNjYWxlOiAncGFnZS1oZWlnaHQnIHwgJ3BhZ2UtZml0JyB8ICdwYWdlLXdpZHRoJztcbiAgICByb3RhdGlvbjogbnVtYmVyO1xuICAgIGV4dGVybmFsTGlua1RhcmdldDogc3RyaW5nO1xuICAgIGF1dG9yZXNpemU6IGJvb2xlYW47XG4gICAgZml0VG9QYWdlOiBib29sZWFuO1xuICAgIHNob3dCb3JkZXJzOiBib29sZWFuO1xuICAgIHN0YXRpYyBnZXRMaW5rVGFyZ2V0KHR5cGU6IHN0cmluZyk6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25QYWdlUmVzaXplKCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgcGRmTGlua1NlcnZpY2U6IGFueTtcbiAgICByZWFkb25seSBwZGZWaWV3ZXI6IGFueTtcbiAgICByZWFkb25seSBwZGZGaW5kQ29udHJvbGxlcjogYW55O1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHVwZGF0ZVNpemUoKTogdm9pZDtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0UERGTGlua1NlcnZpY2VDb25maWc7XG4gICAgcHJpdmF0ZSBzZXR1cE11bHRpUGFnZVZpZXdlcjtcbiAgICBwcml2YXRlIHNldHVwU2luZ2xlUGFnZVZpZXdlcjtcbiAgICBwcml2YXRlIGdldFZhbGlkUGFnZU51bWJlcjtcbiAgICBwcml2YXRlIGdldERvY3VtZW50UGFyYW1zO1xuICAgIHByaXZhdGUgbG9hZFBERjtcbiAgICBwcml2YXRlIHVwZGF0ZTtcbiAgICBwcml2YXRlIHJlbmRlcjtcbiAgICBwcml2YXRlIGdldFNjYWxlO1xuICAgIHByaXZhdGUgZ2V0Q3VycmVudFZpZXdlcjtcbiAgICBwcml2YXRlIHJlc2V0UGRmRG9jdW1lbnQ7XG59XG4iXX0=