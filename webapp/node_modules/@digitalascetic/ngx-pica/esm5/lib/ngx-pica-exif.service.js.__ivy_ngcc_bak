import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as exifr from 'exifr';
var NgxPicaExifService = /** @class */ (function () {
    function NgxPicaExifService() {
    }
    NgxPicaExifService.prototype.getExifOrientedImage = function (image) {
        return new Promise(function (resolve, reject) {
            exifr.orientation(image)
                .catch(function (err) {
                // IF SOMETHING WAS WRONG, WE RETURN ORIGINAL IMAGE
                resolve(image);
            })
                .then(function (exifOrientation) {
                if (exifOrientation && exifOrientation !== 1) {
                    if (exifOrientation < 1 || exifOrientation > 8) {
                        throw new Error('orientation should be [1-8]');
                    }
                    var canvas = document.createElement('canvas'), ctx = canvas.getContext('2d');
                    var deg = 0, cx = 0, cy = 0, width = image.width, height = image.height;
                    if ([5, 6, 7, 8].indexOf(exifOrientation) > -1) {
                        width = image.height;
                        height = image.width;
                    }
                    canvas.width = width;
                    canvas.height = height;
                    switch (exifOrientation) {
                        case 3:
                        case 4:
                            cx = -image.width;
                            cy = -image.height;
                            deg = 180;
                            break;
                        case 5:
                        case 6:
                            cy = -image.height;
                            deg = 90;
                            break;
                        case 7:
                        case 8:
                            cx = -image.width;
                            deg = 270;
                            break;
                        default:
                            break;
                    }
                    if ([2, 4, 5, 7].indexOf(exifOrientation) > -1) {
                        ctx.translate(width, 0);
                        ctx.scale(-1, 1);
                    }
                    ctx.rotate(deg / 180 * Math.PI);
                    ctx.drawImage(image, cx, cy);
                    var img_1 = new Image();
                    img_1.width = width;
                    img_1.height = height;
                    img_1.onload = function () {
                        resolve(img_1);
                    };
                    img_1.src = canvas.toDataURL();
                }
                else {
                    resolve(image);
                }
            });
        });
    };
    NgxPicaExifService = __decorate([
        Injectable()
    ], NgxPicaExifService);
    return NgxPicaExifService;
}());
export { NgxPicaExifService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBpY2EtZXhpZi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRpZ2l0YWxhc2NldGljL25neC1waWNhLyIsInNvdXJjZXMiOlsibGliL25neC1waWNhLWV4aWYuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUkvQjtJQUFBO0lBZ0ZBLENBQUM7SUE5RVEsaURBQW9CLEdBQTNCLFVBQTRCLEtBQXVCO1FBQ2pELE9BQU8sSUFBSSxPQUFPLENBQW1CLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDbkQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7aUJBQ3JCLEtBQUssQ0FBQyxVQUFBLEdBQUc7Z0JBQ1IsbURBQW1EO2dCQUNuRCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxVQUFBLGVBQWU7Z0JBRW5CLElBQUksZUFBZSxJQUFJLGVBQWUsS0FBSyxDQUFDLEVBQUU7b0JBRTVDLElBQUksZUFBZSxHQUFHLENBQUMsSUFBSSxlQUFlLEdBQUcsQ0FBQyxFQUFFO3dCQUM5QyxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7cUJBQ2hEO29CQUVELElBQU0sTUFBTSxHQUFzQixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUNoRSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFFaEMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLEVBQ04sRUFBRSxHQUFHLENBQUMsRUFDTixLQUFLLEdBQVcsS0FBSyxDQUFDLEtBQUssRUFDM0IsTUFBTSxHQUFXLEtBQUssQ0FBQyxNQUFNLENBQUM7b0JBRWhDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7d0JBQzlDLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO3dCQUNyQixNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztxQkFDdEI7b0JBRUQsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7b0JBQ3JCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO29CQUV2QixRQUFRLGVBQWUsRUFBRTt3QkFDdkIsS0FBSyxDQUFDLENBQUM7d0JBQ1AsS0FBSyxDQUFDOzRCQUNKLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7NEJBQ2xCLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7NEJBQ25CLEdBQUcsR0FBRyxHQUFHLENBQUM7NEJBQ1YsTUFBTTt3QkFDUixLQUFLLENBQUMsQ0FBQzt3QkFDUCxLQUFLLENBQUM7NEJBQ0osRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzs0QkFDbkIsR0FBRyxHQUFHLEVBQUUsQ0FBQzs0QkFDVCxNQUFNO3dCQUNSLEtBQUssQ0FBQyxDQUFDO3dCQUNQLEtBQUssQ0FBQzs0QkFDSixFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDOzRCQUNsQixHQUFHLEdBQUcsR0FBRyxDQUFDOzRCQUNWLE1BQU07d0JBQ1I7NEJBQ0UsTUFBTTtxQkFDVDtvQkFFRCxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO3dCQUM5QyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzt3QkFDeEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDbEI7b0JBRUQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDaEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUU3QixJQUFNLEtBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO29CQUV4QixLQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztvQkFDbEIsS0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7b0JBRXBCLEtBQUcsQ0FBQyxNQUFNLEdBQUc7d0JBQ1gsT0FBTyxDQUFDLEtBQUcsQ0FBQyxDQUFDO29CQUNmLENBQUMsQ0FBQztvQkFFRixLQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQkFDOUI7cUJBQU07b0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNoQjtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBOUVVLGtCQUFrQjtRQUQ5QixVQUFVLEVBQUU7T0FDQSxrQkFBa0IsQ0FnRjlCO0lBQUQseUJBQUM7Q0FBQSxBQWhGRCxJQWdGQztTQWhGWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgZXhpZnIgZnJvbSAnZXhpZnInO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hQaWNhRXhpZlNlcnZpY2Uge1xuXG4gIHB1YmxpYyBnZXRFeGlmT3JpZW50ZWRJbWFnZShpbWFnZTogSFRNTEltYWdlRWxlbWVudCk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBleGlmci5vcmllbnRhdGlvbihpbWFnZSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgLy8gSUYgU09NRVRISU5HIFdBUyBXUk9ORywgV0UgUkVUVVJOIE9SSUdJTkFMIElNQUdFXG4gICAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGV4aWZPcmllbnRhdGlvbiA9PiB7XG5cbiAgICAgICAgICBpZiAoZXhpZk9yaWVudGF0aW9uICYmIGV4aWZPcmllbnRhdGlvbiAhPT0gMSkge1xuXG4gICAgICAgICAgICBpZiAoZXhpZk9yaWVudGF0aW9uIDwgMSB8fCBleGlmT3JpZW50YXRpb24gPiA4KSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignb3JpZW50YXRpb24gc2hvdWxkIGJlIFsxLThdJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgICAgIGxldCBkZWcgPSAwLFxuICAgICAgICAgICAgICBjeCA9IDAsXG4gICAgICAgICAgICAgIGN5ID0gMCxcbiAgICAgICAgICAgICAgd2lkdGg6IG51bWJlciA9IGltYWdlLndpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQ6IG51bWJlciA9IGltYWdlLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKFs1LCA2LCA3LCA4XS5pbmRleE9mKGV4aWZPcmllbnRhdGlvbikgPiAtMSkge1xuICAgICAgICAgICAgICB3aWR0aCA9IGltYWdlLmhlaWdodDtcbiAgICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAgICAgc3dpdGNoIChleGlmT3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY3ggPSAtaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgY3kgPSAtaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGRlZyA9IDE4MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgY3kgPSAtaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGRlZyA9IDkwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBjeCA9IC1pbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICBkZWcgPSAyNzA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChbMiwgNCwgNSwgN10uaW5kZXhPZihleGlmT3JpZW50YXRpb24pID4gLTEpIHtcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh3aWR0aCwgMCk7XG4gICAgICAgICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN0eC5yb3RhdGUoZGVnIC8gMTgwICogTWF0aC5QSSk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCBjeCwgY3kpO1xuXG4gICAgICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICAgICAgaW1nLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBpbWcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWcuc3JjID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==