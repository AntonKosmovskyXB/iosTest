import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { NgxPicaErrorType } from './ngx-pica-error.interface';
import { NgxPicaExifService } from './ngx-pica-exif.service';
import Pica from 'pica';
import { switchMap } from "rxjs/operators";
import * as Éµngcc0 from '@angular/core';
var NgxPicaService = /** @class */ (function () {
    function NgxPicaService(_ngxPicaExifService) {
        this._ngxPicaExifService = _ngxPicaExifService;
        this.picaResizer = new Pica();
        this.MAX_STEPS = 20;
        if (!this.picaResizer || !this.picaResizer.resize) {
            this.picaResizer = new window.Pica();
        }
    }
    NgxPicaService.prototype.resizeImages = function (files, width, height, options) {
        var _this = this;
        var resizedImage = new Subject();
        var totalFiles = files.length;
        if (totalFiles > 0) {
            var nextFile_1 = new Subject();
            var index_1 = 0;
            var subscription_1 = nextFile_1
                .pipe(switchMap(function (file) { return _this.resizeImage(file, width, height, options); }))
                .subscribe(function (imageResized) {
                index_1++;
                resizedImage.next(imageResized);
                if (index_1 < totalFiles) {
                    nextFile_1.next(files[index_1]);
                }
                else {
                    resizedImage.complete();
                    subscription_1.unsubscribe();
                }
            }, function (err) {
                var ngxPicaError = {
                    file: files[index_1],
                    err: err
                };
                resizedImage.error(ngxPicaError);
            });
            nextFile_1.next(files[index_1]);
        }
        else {
            var ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            resizedImage.error(ngxPicaError);
            resizedImage.complete();
        }
        return resizedImage.asObservable();
    };
    NgxPicaService.prototype.resizeImage = function (file, width, height, options) {
        var _this = this;
        var resizedImage = new Subject();
        var originCanvas = document.createElement('canvas');
        var ctx = originCanvas.getContext('2d');
        var img = new Image();
        var reader = new FileReader();
        if (!options) {
            options = {
                exifOptions: {
                    forceExifOrientation: true
                }
            };
        }
        if (ctx) {
            reader.addEventListener('load', function (event) {
                img.onerror = function (err) {
                    resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                };
                img.onload = function () {
                    _this.processImageExifOptions(img, options.exifOptions)
                        .then(function (orientedImage) {
                        originCanvas.width = orientedImage.width;
                        originCanvas.height = orientedImage.height;
                        ctx.drawImage(orientedImage, 0, 0);
                        var imageData = ctx.getImageData(0, 0, orientedImage.width, orientedImage.height);
                        if (options && options.aspectRatio && options.aspectRatio.keepAspectRatio) {
                            var ratio = 0;
                            if (options.aspectRatio.forceMinDimensions) {
                                ratio = Math.max(width / imageData.width, height / imageData.height);
                            }
                            else {
                                ratio = Math.min(width / imageData.width, height / imageData.height);
                            }
                            width = Math.round(imageData.width * ratio);
                            height = Math.round(imageData.height * ratio);
                        }
                        var destinationCanvas = document.createElement('canvas');
                        destinationCanvas.width = width;
                        destinationCanvas.height = height;
                        _this.picaResize(file, originCanvas, destinationCanvas, options)
                            .catch(function (err) { return resizedImage.error(err); })
                            .then(function (imgResized) {
                            resizedImage.next(imgResized);
                            resizedImage.complete();
                        });
                    })
                        .catch(function (err) {
                        resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                    });
                };
                img.src = reader.result;
            });
            reader.readAsDataURL(file);
        }
        else {
            resizedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
        }
        return resizedImage.asObservable();
    };
    NgxPicaService.prototype.compressImages = function (files, sizeInMB, options) {
        var _this = this;
        var compressedImage = new Subject();
        var totalFiles = files.length;
        if (totalFiles > 0) {
            var nextFile_2 = new Subject();
            var index_2 = 0;
            var subscription_2 = nextFile_2
                .pipe(switchMap(function (file) { return _this.compressImage(file, sizeInMB, options); }))
                .subscribe(function (imageCompressed) {
                index_2++;
                compressedImage.next(imageCompressed);
                if (index_2 < totalFiles) {
                    nextFile_2.next(files[index_2]);
                }
                else {
                    compressedImage.complete();
                    subscription_2.unsubscribe();
                }
            }, function (err) {
                var ngxPicaError = {
                    file: files[index_2],
                    err: err
                };
                compressedImage.error(ngxPicaError);
            });
            nextFile_2.next(files[index_2]);
        }
        else {
            var ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            compressedImage.error(ngxPicaError);
            compressedImage.complete();
        }
        return compressedImage.asObservable();
    };
    NgxPicaService.prototype.compressImage = function (file, sizeInMB, options) {
        var _this = this;
        var compressedImage = new Subject();
        if (this.bytesToMB(file.size) <= sizeInMB) {
            setTimeout(function () {
                compressedImage.next(file);
                compressedImage.complete();
            });
        }
        else {
            var originCanvas_1 = document.createElement('canvas');
            var ctx_1 = originCanvas_1.getContext('2d');
            var img_1 = new Image();
            var reader_1 = new FileReader();
            if (!options) {
                options = {
                    exifOptions: {
                        forceExifOrientation: true
                    }
                };
            }
            if (ctx_1) {
                reader_1.addEventListener('load', function (event) {
                    img_1.onload = function () {
                        _this.processImageExifOptions(img_1, options.exifOptions)
                            .then(function (orientedImage) {
                            originCanvas_1.width = orientedImage.width;
                            originCanvas_1.height = orientedImage.height;
                            ctx_1.drawImage(orientedImage, 0, 0);
                            _this.getCompressedImage(originCanvas_1, file.type, 1, sizeInMB, 0)
                                .catch(function (err) { return compressedImage.error(err); })
                                .then(function (blob) {
                                var imgCompressed = _this.blobToFile(blob, file.name, file.type, new Date().getTime());
                                compressedImage.next(imgCompressed);
                                compressedImage.complete();
                            });
                        });
                    };
                    img_1.src = reader_1.result;
                });
                reader_1.readAsDataURL(file);
            }
            else {
                compressedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
            }
        }
        return compressedImage.asObservable();
    };
    NgxPicaService.prototype.processImageExifOptions = function (img, exifOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (exifOptions.forceExifOrientation) {
                _this._ngxPicaExifService.getExifOrientedImage(img)
                    .then(function (orientedImage) { return resolve(orientedImage); })
                    .catch(function (err) { return reject(err); });
            }
            else {
                resolve(img);
            }
        });
    };
    NgxPicaService.prototype.getCompressedImage = function (canvas, type, quality, sizeInMB, step) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.picaResizer.toBlob(canvas, type, quality)
                .catch(function (err) { return reject(err); })
                .then(function (blob) {
                _this.checkCompressedImageSize(canvas, blob, quality, sizeInMB, step)
                    .catch(function (err) { return reject(err); })
                    .then(function (compressedBlob) {
                    resolve(compressedBlob);
                });
            });
        });
    };
    NgxPicaService.prototype.checkCompressedImageSize = function (canvas, blob, quality, sizeInMB, step) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (step > _this.MAX_STEPS) {
                reject(NgxPicaErrorType.NOT_BE_ABLE_TO_COMPRESS_ENOUGH);
            }
            else if (_this.bytesToMB(blob.size) < sizeInMB) {
                resolve(blob);
            }
            else {
                var newQuality = quality - (quality * 0.1);
                var newStep = step + 1;
                // recursively compression
                resolve(_this.getCompressedImage(canvas, blob.type, newQuality, sizeInMB, newStep));
            }
        });
    };
    NgxPicaService.prototype.picaResize = function (file, from, to, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.picaResizer.resize(from, to, options)
                .catch(function (err) { return reject(err); })
                .then(function (resizedCanvas) { return _this.picaResizer.toBlob(resizedCanvas, file.type); })
                .then(function (blob) {
                var fileResized = _this.blobToFile(blob, file.name, file.type, new Date().getTime());
                resolve(fileResized);
            });
        });
    };
    NgxPicaService.prototype.blobToFile = function (blob, name, type, lastModified) {
        return Object.assign(new Blob([blob], { type: type }), { name: name, lastModified: lastModified });
    };
    NgxPicaService.prototype.bytesToMB = function (bytes) {
        return bytes / 1048576;
    };
    NgxPicaService.ctorParameters = function () { return [
        { type: NgxPicaExifService }
    ]; };
    NgxPicaService = __decorate([ __metadata("design:paramtypes", [NgxPicaExifService])
    ], NgxPicaService);
NgxPicaService.Éµfac = function NgxPicaService_Factory(t) { return new (t || NgxPicaService)(Éµngcc0.ÉµÉµinject(NgxPicaExifService)); };
NgxPicaService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: NgxPicaService, factory: function (t) { return NgxPicaService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPicaService, [{
        type: Injectable
    }], function () { return [{ type: NgxPicaExifService }]; }, null); })();
    return NgxPicaService;
}());
export { NgxPicaService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,