import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as exifr from 'exifr';
import * as ɵngcc0 from '@angular/core';
var NgxPicaExifService = /** @class */ (function () {
    function NgxPicaExifService() {
    }
    NgxPicaExifService.prototype.getExifOrientedImage = function (image) {
        return new Promise(function (resolve, reject) {
            exifr.orientation(image)
                .catch(function (err) {
                // IF SOMETHING WAS WRONG, WE RETURN ORIGINAL IMAGE
                resolve(image);
            })
                .then(function (exifOrientation) {
                if (exifOrientation && exifOrientation !== 1) {
                    if (exifOrientation < 1 || exifOrientation > 8) {
                        throw new Error('orientation should be [1-8]');
                    }
                    var canvas = document.createElement('canvas'), ctx = canvas.getContext('2d');
                    var deg = 0, cx = 0, cy = 0, width = image.width, height = image.height;
                    if ([5, 6, 7, 8].indexOf(exifOrientation) > -1) {
                        width = image.height;
                        height = image.width;
                    }
                    canvas.width = width;
                    canvas.height = height;
                    switch (exifOrientation) {
                        case 3:
                        case 4:
                            cx = -image.width;
                            cy = -image.height;
                            deg = 180;
                            break;
                        case 5:
                        case 6:
                            cy = -image.height;
                            deg = 90;
                            break;
                        case 7:
                        case 8:
                            cx = -image.width;
                            deg = 270;
                            break;
                        default:
                            break;
                    }
                    if ([2, 4, 5, 7].indexOf(exifOrientation) > -1) {
                        ctx.translate(width, 0);
                        ctx.scale(-1, 1);
                    }
                    ctx.rotate(deg / 180 * Math.PI);
                    ctx.drawImage(image, cx, cy);
                    var img_1 = new Image();
                    img_1.width = width;
                    img_1.height = height;
                    img_1.onload = function () {
                        resolve(img_1);
                    };
                    img_1.src = canvas.toDataURL();
                }
                else {
                    resolve(image);
                }
            });
        });
    };
NgxPicaExifService.ɵfac = function NgxPicaExifService_Factory(t) { return new (t || NgxPicaExifService)(); };
NgxPicaExifService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxPicaExifService, factory: function (t) { return NgxPicaExifService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPicaExifService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NgxPicaExifService;
}());
export { NgxPicaExifService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBpY2EtZXhpZi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQGRpZ2l0YWxhc2NldGljL25neC1waWNhL2xpYi9uZ3gtcGljYS1leGlmLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7O0FBSS9CO0FBRW1CLElBRm5CO0FBQWdDLElBZ0ZoQyxDQUFDO0FBQ0QsSUEvRVMsaURBQW9CLEdBQTNCLFVBQTRCLEtBQXVCO0FBQUksUUFDckQsT0FBTyxJQUFJLE9BQU8sQ0FBbUIsVUFBQyxPQUFPLEVBQUUsTUFBTTtBQUFJLFlBQ3ZELEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO0FBQzlCLGlCQUFTLEtBQUssQ0FBQyxVQUFBLEdBQUc7QUFBSSxnQkFDWixtREFBbUQ7QUFDN0QsZ0JBQVUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFlBQVEsQ0FBQyxDQUFDO0FBQ1YsaUJBQVMsSUFBSSxDQUFDLFVBQUEsZUFBZTtBQUFJLGdCQUV2QixJQUFJLGVBQWUsSUFBSSxlQUFlLEtBQUssQ0FBQyxFQUFFO0FBQ3hELG9CQUNZLElBQUksZUFBZSxHQUFHLENBQUMsSUFBSSxlQUFlLEdBQUcsQ0FBQyxFQUFFO0FBQzVELHdCQUFjLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUM3RCxxQkFBYTtBQUNiLG9CQUNZLElBQU0sTUFBTSxHQUFzQixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUNoRSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxvQkFDWSxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsRUFDTixFQUFFLEdBQUcsQ0FBQyxFQUNOLEtBQUssR0FBVyxLQUFLLENBQUMsS0FBSyxF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dXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBleGlmciBmcm9tICdleGlmcic7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neFBpY2FFeGlmU2VydmljZSB7XG5cbiAgcHVibGljIGdldEV4aWZPcmllbnRlZEltYWdlKGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50KTogUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGV4aWZyLm9yaWVudGF0aW9uKGltYWdlKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAvLyBJRiBTT01FVEhJTkcgV0FTIFdST05HLCBXRSBSRVRVUk4gT1JJR0lOQUwgSU1BR0VcbiAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZXhpZk9yaWVudGF0aW9uID0+IHtcblxuICAgICAgICAgIGlmIChleGlmT3JpZW50YXRpb24gJiYgZXhpZk9yaWVudGF0aW9uICE9PSAxKSB7XG5cbiAgICAgICAgICAgIGlmIChleGlmT3JpZW50YXRpb24gPCAxIHx8IGV4aWZPcmllbnRhdGlvbiA+IDgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcmllbnRhdGlvbiBzaG91bGQgYmUgWzEtOF0nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLFxuICAgICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICAgICAgbGV0IGRlZyA9IDAsXG4gICAgICAgICAgICAgIGN4ID0gMCxcbiAgICAgICAgICAgICAgY3kgPSAwLFxuICAgICAgICAgICAgICB3aWR0aDogbnVtYmVyID0gaW1hZ2Uud2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodDogbnVtYmVyID0gaW1hZ2UuaGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAoWzUsIDYsIDcsIDhdLmluZGV4T2YoZXhpZk9yaWVudGF0aW9uKSA+IC0xKSB7XG4gICAgICAgICAgICAgIHdpZHRoID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICBoZWlnaHQgPSBpbWFnZS53aWR0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGV4aWZPcmllbnRhdGlvbikge1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjeCA9IC1pbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICBjeSA9IC1pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgZGVnID0gMTgwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBjeSA9IC1pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgZGVnID0gOTA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGN4ID0gLWltYWdlLndpZHRoO1xuICAgICAgICAgICAgICAgIGRlZyA9IDI3MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFsyLCA0LCA1LCA3XS5pbmRleE9mKGV4aWZPcmllbnRhdGlvbikgPiAtMSkge1xuICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoLCAwKTtcbiAgICAgICAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3R4LnJvdGF0ZShkZWcgLyAxODAgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIGN4LCBjeSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgICAgICBpbWcud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIGltZy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUoaW1nKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltZy5zcmMgPSBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoaW1hZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxufVxuIl19