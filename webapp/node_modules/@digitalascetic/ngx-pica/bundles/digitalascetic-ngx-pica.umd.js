(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('rxjs'), require('exifr'), require('pica'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@digitalascetic/ngx-pica', ['@angular/core','exports', '@angular/core', 'rxjs', 'exifr', 'pica', 'rxjs/operators'], factory) :
    (global = global || self, factory(global.ng.core,(global.digitalascetic = global.digitalascetic || {}, global.digitalascetic['ngx-pica'] = {}), global.ng.core, global.rxjs, global.exifr, global.Pica, global.rxjs.operators));
}(this, (function (Éµngcc0,exports, core, rxjs, exifr, Pica, operators) { 'use strict';

    Pica = Pica && Object.prototype.hasOwnProperty.call(Pica, 'default') ? Pica['default'] : Pica;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var NgxPicaErrorType;
    (function (NgxPicaErrorType) {
        NgxPicaErrorType["NO_FILES_RECEIVED"] = "NO_FILES_RECEIVED";
        NgxPicaErrorType["CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED"] = "CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED";
        NgxPicaErrorType["NOT_BE_ABLE_TO_COMPRESS_ENOUGH"] = "NOT_BE_ABLE_TO_COMPRESS_ENOUGH";
        NgxPicaErrorType["READ_ERROR"] = "IMAGE_COULD_NOT_BE_LOADED";
    })(NgxPicaErrorType || (NgxPicaErrorType = {}));

    var NgxPicaExifService = /** @class */ (function () {
        function NgxPicaExifService() {
        }
        NgxPicaExifService.prototype.getExifOrientedImage = function (image) {
            return new Promise(function (resolve, reject) {
                exifr.orientation(image)
                    .catch(function (err) {
                    // IF SOMETHING WAS WRONG, WE RETURN ORIGINAL IMAGE
                    resolve(image);
                })
                    .then(function (exifOrientation) {
                    if (exifOrientation && exifOrientation !== 1) {
                        if (exifOrientation < 1 || exifOrientation > 8) {
                            throw new Error('orientation should be [1-8]');
                        }
                        var canvas = document.createElement('canvas'), ctx = canvas.getContext('2d');
                        var deg = 0, cx = 0, cy = 0, width = image.width, height = image.height;
                        if ([5, 6, 7, 8].indexOf(exifOrientation) > -1) {
                            width = image.height;
                            height = image.width;
                        }
                        canvas.width = width;
                        canvas.height = height;
                        switch (exifOrientation) {
                            case 3:
                            case 4:
                                cx = -image.width;
                                cy = -image.height;
                                deg = 180;
                                break;
                            case 5:
                            case 6:
                                cy = -image.height;
                                deg = 90;
                                break;
                            case 7:
                            case 8:
                                cx = -image.width;
                                deg = 270;
                                break;
                            default:
                                break;
                        }
                        if ([2, 4, 5, 7].indexOf(exifOrientation) > -1) {
                            ctx.translate(width, 0);
                            ctx.scale(-1, 1);
                        }
                        ctx.rotate(deg / 180 * Math.PI);
                        ctx.drawImage(image, cx, cy);
                        var img_1 = new Image();
                        img_1.width = width;
                        img_1.height = height;
                        img_1.onload = function () {
                            resolve(img_1);
                        };
                        img_1.src = canvas.toDataURL();
                    }
                    else {
                        resolve(image);
                    }
                });
            });
        };
NgxPicaExifService.Éµfac = function NgxPicaExifService_Factory(t) { return new (t || NgxPicaExifService)(); };
NgxPicaExifService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: NgxPicaExifService, factory: function (t) { return NgxPicaExifService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPicaExifService, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return NgxPicaExifService;
    }());

    var NgxPicaService = /** @class */ (function () {
        function NgxPicaService(_ngxPicaExifService) {
            this._ngxPicaExifService = _ngxPicaExifService;
            this.picaResizer = new Pica();
            this.MAX_STEPS = 20;
            if (!this.picaResizer || !this.picaResizer.resize) {
                this.picaResizer = new window.Pica();
            }
        }
        NgxPicaService.prototype.resizeImages = function (files, width, height, options) {
            var _this = this;
            var resizedImage = new rxjs.Subject();
            var totalFiles = files.length;
            if (totalFiles > 0) {
                var nextFile_1 = new rxjs.Subject();
                var index_1 = 0;
                var subscription_1 = nextFile_1
                    .pipe(operators.switchMap(function (file) { return _this.resizeImage(file, width, height, options); }))
                    .subscribe(function (imageResized) {
                    index_1++;
                    resizedImage.next(imageResized);
                    if (index_1 < totalFiles) {
                        nextFile_1.next(files[index_1]);
                    }
                    else {
                        resizedImage.complete();
                        subscription_1.unsubscribe();
                    }
                }, function (err) {
                    var ngxPicaError = {
                        file: files[index_1],
                        err: err
                    };
                    resizedImage.error(ngxPicaError);
                });
                nextFile_1.next(files[index_1]);
            }
            else {
                var ngxPicaError = {
                    err: NgxPicaErrorType.NO_FILES_RECEIVED
                };
                resizedImage.error(ngxPicaError);
                resizedImage.complete();
            }
            return resizedImage.asObservable();
        };
        NgxPicaService.prototype.resizeImage = function (file, width, height, options) {
            var _this = this;
            var resizedImage = new rxjs.Subject();
            var originCanvas = document.createElement('canvas');
            var ctx = originCanvas.getContext('2d');
            var img = new Image();
            var reader = new FileReader();
            if (!options) {
                options = {
                    exifOptions: {
                        forceExifOrientation: true
                    }
                };
            }
            if (ctx) {
                reader.addEventListener('load', function (event) {
                    img.onerror = function (err) {
                        resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                    };
                    img.onload = function () {
                        _this.processImageExifOptions(img, options.exifOptions)
                            .then(function (orientedImage) {
                            originCanvas.width = orientedImage.width;
                            originCanvas.height = orientedImage.height;
                            ctx.drawImage(orientedImage, 0, 0);
                            var imageData = ctx.getImageData(0, 0, orientedImage.width, orientedImage.height);
                            if (options && options.aspectRatio && options.aspectRatio.keepAspectRatio) {
                                var ratio = 0;
                                if (options.aspectRatio.forceMinDimensions) {
                                    ratio = Math.max(width / imageData.width, height / imageData.height);
                                }
                                else {
                                    ratio = Math.min(width / imageData.width, height / imageData.height);
                                }
                                width = Math.round(imageData.width * ratio);
                                height = Math.round(imageData.height * ratio);
                            }
                            var destinationCanvas = document.createElement('canvas');
                            destinationCanvas.width = width;
                            destinationCanvas.height = height;
                            _this.picaResize(file, originCanvas, destinationCanvas, options)
                                .catch(function (err) { return resizedImage.error(err); })
                                .then(function (imgResized) {
                                resizedImage.next(imgResized);
                                resizedImage.complete();
                            });
                        })
                            .catch(function (err) {
                            resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                        });
                    };
                    img.src = reader.result;
                });
                reader.readAsDataURL(file);
            }
            else {
                resizedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
            }
            return resizedImage.asObservable();
        };
        NgxPicaService.prototype.compressImages = function (files, sizeInMB, options) {
            var _this = this;
            var compressedImage = new rxjs.Subject();
            var totalFiles = files.length;
            if (totalFiles > 0) {
                var nextFile_2 = new rxjs.Subject();
                var index_2 = 0;
                var subscription_2 = nextFile_2
                    .pipe(operators.switchMap(function (file) { return _this.compressImage(file, sizeInMB, options); }))
                    .subscribe(function (imageCompressed) {
                    index_2++;
                    compressedImage.next(imageCompressed);
                    if (index_2 < totalFiles) {
                        nextFile_2.next(files[index_2]);
                    }
                    else {
                        compressedImage.complete();
                        subscription_2.unsubscribe();
                    }
                }, function (err) {
                    var ngxPicaError = {
                        file: files[index_2],
                        err: err
                    };
                    compressedImage.error(ngxPicaError);
                });
                nextFile_2.next(files[index_2]);
            }
            else {
                var ngxPicaError = {
                    err: NgxPicaErrorType.NO_FILES_RECEIVED
                };
                compressedImage.error(ngxPicaError);
                compressedImage.complete();
            }
            return compressedImage.asObservable();
        };
        NgxPicaService.prototype.compressImage = function (file, sizeInMB, options) {
            var _this = this;
            var compressedImage = new rxjs.Subject();
            if (this.bytesToMB(file.size) <= sizeInMB) {
                setTimeout(function () {
                    compressedImage.next(file);
                    compressedImage.complete();
                });
            }
            else {
                var originCanvas_1 = document.createElement('canvas');
                var ctx_1 = originCanvas_1.getContext('2d');
                var img_1 = new Image();
                var reader_1 = new FileReader();
                if (!options) {
                    options = {
                        exifOptions: {
                            forceExifOrientation: true
                        }
                    };
                }
                if (ctx_1) {
                    reader_1.addEventListener('load', function (event) {
                        img_1.onload = function () {
                            _this.processImageExifOptions(img_1, options.exifOptions)
                                .then(function (orientedImage) {
                                originCanvas_1.width = orientedImage.width;
                                originCanvas_1.height = orientedImage.height;
                                ctx_1.drawImage(orientedImage, 0, 0);
                                _this.getCompressedImage(originCanvas_1, file.type, 1, sizeInMB, 0)
                                    .catch(function (err) { return compressedImage.error(err); })
                                    .then(function (blob) {
                                    var imgCompressed = _this.blobToFile(blob, file.name, file.type, new Date().getTime());
                                    compressedImage.next(imgCompressed);
                                    compressedImage.complete();
                                });
                            });
                        };
                        img_1.src = reader_1.result;
                    });
                    reader_1.readAsDataURL(file);
                }
                else {
                    compressedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
                }
            }
            return compressedImage.asObservable();
        };
        NgxPicaService.prototype.processImageExifOptions = function (img, exifOptions) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (exifOptions.forceExifOrientation) {
                    _this._ngxPicaExifService.getExifOrientedImage(img)
                        .then(function (orientedImage) { return resolve(orientedImage); })
                        .catch(function (err) { return reject(err); });
                }
                else {
                    resolve(img);
                }
            });
        };
        NgxPicaService.prototype.getCompressedImage = function (canvas, type, quality, sizeInMB, step) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.picaResizer.toBlob(canvas, type, quality)
                    .catch(function (err) { return reject(err); })
                    .then(function (blob) {
                    _this.checkCompressedImageSize(canvas, blob, quality, sizeInMB, step)
                        .catch(function (err) { return reject(err); })
                        .then(function (compressedBlob) {
                        resolve(compressedBlob);
                    });
                });
            });
        };
        NgxPicaService.prototype.checkCompressedImageSize = function (canvas, blob, quality, sizeInMB, step) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (step > _this.MAX_STEPS) {
                    reject(NgxPicaErrorType.NOT_BE_ABLE_TO_COMPRESS_ENOUGH);
                }
                else if (_this.bytesToMB(blob.size) < sizeInMB) {
                    resolve(blob);
                }
                else {
                    var newQuality = quality - (quality * 0.1);
                    var newStep = step + 1;
                    // recursively compression
                    resolve(_this.getCompressedImage(canvas, blob.type, newQuality, sizeInMB, newStep));
                }
            });
        };
        NgxPicaService.prototype.picaResize = function (file, from, to, options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.picaResizer.resize(from, to, options)
                    .catch(function (err) { return reject(err); })
                    .then(function (resizedCanvas) { return _this.picaResizer.toBlob(resizedCanvas, file.type); })
                    .then(function (blob) {
                    var fileResized = _this.blobToFile(blob, file.name, file.type, new Date().getTime());
                    resolve(fileResized);
                });
            });
        };
        NgxPicaService.prototype.blobToFile = function (blob, name, type, lastModified) {
            return Object.assign(new Blob([blob], { type: type }), { name: name, lastModified: lastModified });
        };
        NgxPicaService.prototype.bytesToMB = function (bytes) {
            return bytes / 1048576;
        };
        NgxPicaService.ctorParameters = function () { return [
            { type: NgxPicaExifService }
        ]; };
        NgxPicaService = __decorate([ __metadata("design:paramtypes", [NgxPicaExifService])
        ], NgxPicaService);
NgxPicaService.Éµfac = function NgxPicaService_Factory(t) { return new (t || NgxPicaService)(Éµngcc0.ÉµÉµinject(NgxPicaExifService)); };
NgxPicaService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: NgxPicaService, factory: function (t) { return NgxPicaService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPicaService, [{
        type: core.Injectable
    }], function () { return [{ type: NgxPicaExifService }]; }, null); })();
        return NgxPicaService;
    }());

    var NgxPicaImageService = /** @class */ (function () {
        function NgxPicaImageService() {
            this.imageExtensions = [
                'ase',
                'art',
                'bmp',
                'blp',
                'cd5',
                'cit',
                'cpt',
                'cr2',
                'cut',
                'dds',
                'dib',
                'djvu',
                'egt',
                'exif',
                'gif',
                'gpl',
                'grf',
                'icns',
                'ico',
                'iff',
                'jng',
                'jpeg',
                'jpg',
                'jfif',
                'jp2',
                'jps',
                'lbm',
                'max',
                'miff',
                'mng',
                'msp',
                'nitf',
                'ota',
                'pbm',
                'pc1',
                'pc2',
                'pc3',
                'pcf',
                'pcx',
                'pdn',
                'pgm',
                'PI1',
                'PI2',
                'PI3',
                'pict',
                'pct',
                'pnm',
                'pns',
                'ppm',
                'psb',
                'psd',
                'pdd',
                'psp',
                'px',
                'pxm',
                'pxr',
                'qfx',
                'raw',
                'rle',
                'sct',
                'sgi',
                'rgb',
                'int',
                'bw',
                'tga',
                'tiff',
                'tif',
                'vtf',
                'xbm',
                'xcf',
                'xpm',
                '3dv',
                'amf',
                'ai',
                'awg',
                'cgm',
                'cdr',
                'cmx',
                'dxf',
                'e2d',
                'egt',
                'eps',
                'fs',
                'gbr',
                'odg',
                'svg',
                'stl',
                'vrml',
                'x3d',
                'sxd',
                'v2d',
                'vnd',
                'wmf',
                'emf',
                'art',
                'xar',
                'png',
                'webp',
                'jxr',
                'hdp',
                'wdp',
                'cur',
                'ecw',
                'iff',
                'lbm',
                'liff',
                'nrrd',
                'pam',
                'pcx',
                'pgf',
                'sgi',
                'rgb',
                'rgba',
                'bw',
                'int',
                'inta',
                'sid',
                'ras',
                'sun',
                'tga'
            ];
        }
        NgxPicaImageService.prototype.isImage = function (file) {
            var fileExtension = file.name.toLowerCase().substr(file.name.lastIndexOf('.') + 1);
            return (this.imageExtensions.indexOf(fileExtension) !== -1);
        };
NgxPicaImageService.Éµfac = function NgxPicaImageService_Factory(t) { return new (t || NgxPicaImageService)(); };
NgxPicaImageService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: NgxPicaImageService, factory: function (t) { return NgxPicaImageService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPicaImageService, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return NgxPicaImageService;
    }());

    var NgxPicaModule = /** @class */ (function () {
        function NgxPicaModule() {
        }
NgxPicaModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: NgxPicaModule });
NgxPicaModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function NgxPicaModule_Factory(t) { return new (t || NgxPicaModule)(); }, providers: [
        { provide: NgxPicaService, useClass: NgxPicaService },
        { provide: NgxPicaExifService, useClass: NgxPicaExifService },
        { provide: NgxPicaImageService, useClass: NgxPicaImageService },
    ] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPicaModule, [{
        type: core.NgModule,
        args: [{
                providers: [
                    { provide: NgxPicaService, useClass: NgxPicaService },
                    { provide: NgxPicaExifService, useClass: NgxPicaExifService },
                    { provide: NgxPicaImageService, useClass: NgxPicaImageService },
                ]
            }]
    }], function () { return []; }, null); })();
        return NgxPicaModule;
    }());

    exports.NgxPicaImageService = NgxPicaImageService;
    exports.NgxPicaModule = NgxPicaModule;
    exports.NgxPicaService = NgxPicaService;
    exports.Éµa = NgxPicaExifService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=digitalascetic-ngx-pica.umd.js.map