import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { NgxPicaErrorType } from './ngx-pica-error.interface';
import { NgxPicaExifService } from './ngx-pica-exif.service';
import Pica from 'pica';
import { switchMap } from "rxjs/operators";
import * as Éµngcc0 from '@angular/core';
let NgxPicaService = class NgxPicaService {
    constructor(_ngxPicaExifService) {
        this._ngxPicaExifService = _ngxPicaExifService;
        this.picaResizer = new Pica();
        this.MAX_STEPS = 20;
        if (!this.picaResizer || !this.picaResizer.resize) {
            this.picaResizer = new window.Pica();
        }
    }
    resizeImages(files, width, height, options) {
        const resizedImage = new Subject();
        const totalFiles = files.length;
        if (totalFiles > 0) {
            const nextFile = new Subject();
            let index = 0;
            const subscription = nextFile
                .pipe(switchMap((file) => this.resizeImage(file, width, height, options)))
                .subscribe(imageResized => {
                index++;
                resizedImage.next(imageResized);
                if (index < totalFiles) {
                    nextFile.next(files[index]);
                }
                else {
                    resizedImage.complete();
                    subscription.unsubscribe();
                }
            }, (err) => {
                const ngxPicaError = {
                    file: files[index],
                    err: err
                };
                resizedImage.error(ngxPicaError);
            });
            nextFile.next(files[index]);
        }
        else {
            const ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            resizedImage.error(ngxPicaError);
            resizedImage.complete();
        }
        return resizedImage.asObservable();
    }
    resizeImage(file, width, height, options) {
        const resizedImage = new Subject();
        const originCanvas = document.createElement('canvas');
        const ctx = originCanvas.getContext('2d');
        const img = new Image();
        const reader = new FileReader();
        if (!options) {
            options = {
                exifOptions: {
                    forceExifOrientation: true
                }
            };
        }
        if (ctx) {
            reader.addEventListener('load', (event) => {
                img.onerror = (err) => {
                    resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                };
                img.onload = () => {
                    this.processImageExifOptions(img, options.exifOptions)
                        .then(orientedImage => {
                        originCanvas.width = orientedImage.width;
                        originCanvas.height = orientedImage.height;
                        ctx.drawImage(orientedImage, 0, 0);
                        const imageData = ctx.getImageData(0, 0, orientedImage.width, orientedImage.height);
                        if (options && options.aspectRatio && options.aspectRatio.keepAspectRatio) {
                            let ratio = 0;
                            if (options.aspectRatio.forceMinDimensions) {
                                ratio = Math.max(width / imageData.width, height / imageData.height);
                            }
                            else {
                                ratio = Math.min(width / imageData.width, height / imageData.height);
                            }
                            width = Math.round(imageData.width * ratio);
                            height = Math.round(imageData.height * ratio);
                        }
                        const destinationCanvas = document.createElement('canvas');
                        destinationCanvas.width = width;
                        destinationCanvas.height = height;
                        this.picaResize(file, originCanvas, destinationCanvas, options)
                            .catch((err) => resizedImage.error(err))
                            .then((imgResized) => {
                            resizedImage.next(imgResized);
                            resizedImage.complete();
                        });
                    })
                        .catch((err) => {
                        resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                    });
                };
                img.src = reader.result;
            });
            reader.readAsDataURL(file);
        }
        else {
            resizedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
        }
        return resizedImage.asObservable();
    }
    compressImages(files, sizeInMB, options) {
        const compressedImage = new Subject();
        const totalFiles = files.length;
        if (totalFiles > 0) {
            const nextFile = new Subject();
            let index = 0;
            const subscription = nextFile
                .pipe(switchMap((file) => this.compressImage(file, sizeInMB, options)))
                .subscribe(imageCompressed => {
                index++;
                compressedImage.next(imageCompressed);
                if (index < totalFiles) {
                    nextFile.next(files[index]);
                }
                else {
                    compressedImage.complete();
                    subscription.unsubscribe();
                }
            }, (err) => {
                const ngxPicaError = {
                    file: files[index],
                    err: err
                };
                compressedImage.error(ngxPicaError);
            });
            nextFile.next(files[index]);
        }
        else {
            const ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            compressedImage.error(ngxPicaError);
            compressedImage.complete();
        }
        return compressedImage.asObservable();
    }
    compressImage(file, sizeInMB, options) {
        const compressedImage = new Subject();
        if (this.bytesToMB(file.size) <= sizeInMB) {
            setTimeout(() => {
                compressedImage.next(file);
                compressedImage.complete();
            });
        }
        else {
            const originCanvas = document.createElement('canvas');
            const ctx = originCanvas.getContext('2d');
            const img = new Image();
            const reader = new FileReader();
            if (!options) {
                options = {
                    exifOptions: {
                        forceExifOrientation: true
                    }
                };
            }
            if (ctx) {
                reader.addEventListener('load', (event) => {
                    img.onload = () => {
                        this.processImageExifOptions(img, options.exifOptions)
                            .then(orientedImage => {
                            originCanvas.width = orientedImage.width;
                            originCanvas.height = orientedImage.height;
                            ctx.drawImage(orientedImage, 0, 0);
                            this.getCompressedImage(originCanvas, file.type, 1, sizeInMB, 0)
                                .catch((err) => compressedImage.error(err))
                                .then((blob) => {
                                const imgCompressed = this.blobToFile(blob, file.name, file.type, new Date().getTime());
                                compressedImage.next(imgCompressed);
                                compressedImage.complete();
                            });
                        });
                    };
                    img.src = reader.result;
                });
                reader.readAsDataURL(file);
            }
            else {
                compressedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
            }
        }
        return compressedImage.asObservable();
    }
    processImageExifOptions(img, exifOptions) {
        return new Promise((resolve, reject) => {
            if (exifOptions.forceExifOrientation) {
                this._ngxPicaExifService.getExifOrientedImage(img)
                    .then(orientedImage => resolve(orientedImage))
                    .catch(err => reject(err));
            }
            else {
                resolve(img);
            }
        });
    }
    getCompressedImage(canvas, type, quality, sizeInMB, step) {
        return new Promise((resolve, reject) => {
            this.picaResizer.toBlob(canvas, type, quality)
                .catch((err) => reject(err))
                .then((blob) => {
                this.checkCompressedImageSize(canvas, blob, quality, sizeInMB, step)
                    .catch((err) => reject(err))
                    .then((compressedBlob) => {
                    resolve(compressedBlob);
                });
            });
        });
    }
    checkCompressedImageSize(canvas, blob, quality, sizeInMB, step) {
        return new Promise((resolve, reject) => {
            if (step > this.MAX_STEPS) {
                reject(NgxPicaErrorType.NOT_BE_ABLE_TO_COMPRESS_ENOUGH);
            }
            else if (this.bytesToMB(blob.size) < sizeInMB) {
                resolve(blob);
            }
            else {
                const newQuality = quality - (quality * 0.1);
                const newStep = step + 1;
                // recursively compression
                resolve(this.getCompressedImage(canvas, blob.type, newQuality, sizeInMB, newStep));
            }
        });
    }
    picaResize(file, from, to, options) {
        return new Promise((resolve, reject) => {
            this.picaResizer.resize(from, to, options)
                .catch((err) => reject(err))
                .then((resizedCanvas) => this.picaResizer.toBlob(resizedCanvas, file.type))
                .then((blob) => {
                const fileResized = this.blobToFile(blob, file.name, file.type, new Date().getTime());
                resolve(fileResized);
            });
        });
    }
    blobToFile(blob, name, type, lastModified) {
        return Object.assign(new Blob([blob], { type: type }), { name: name, lastModified: lastModified });
    }
    bytesToMB(bytes) {
        return bytes / 1048576;
    }
};
NgxPicaService.Éµfac = function NgxPicaService_Factory(t) { return new (t || NgxPicaService)(Éµngcc0.ÉµÉµinject(NgxPicaExifService)); };
NgxPicaService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: NgxPicaService, factory: NgxPicaService.Éµfac });
NgxPicaService.ctorParameters = () => [
    { type: NgxPicaExifService }
];
NgxPicaService = __decorate([ __metadata("design:paramtypes", [NgxPicaExifService])
], NgxPicaService);
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPicaService, [{
        type: Injectable
    }], function () { return [{ type: NgxPicaExifService }]; }, null); })();
export { NgxPicaService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBpY2Euc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BkaWdpdGFsYXNjZXRpYy9uZ3gtcGljYS9saWIvbmd4LXBpY2Euc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsT0FBTyxFQUEyQixNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQXdCLGdCQUFnQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFNbkYsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFNekMsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztBQUMzQixJQUdFLFlBQW9CLG1CQUF1QztBQUM3RCxRQURzQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQW9CO0FBQUMsUUFIcEQsZ0JBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ25DLFFBQVUsY0FBUyxHQUFHLEVBQUUsQ0FBQztBQUN6QixRQUVJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7QUFDdkQsWUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzNDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNTLFlBQVksQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxPQUF1QztBQUFJLFFBQzNHLE1BQU0sWUFBWSxHQUFrQixJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ3RELFFBQUksTUFBTSxVQUFVLEdBQVcsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUM1QyxRQUNJLElBQUksVUFBVSxHQUFHLENBQUMsRUFBRTtBQUN4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b3J0IHtTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtOZ3hQaWNhRXJyb3JJbnRlcmZhY2UsIE5neFBpY2FFcnJvclR5cGV9IGZyb20gJy4vbmd4LXBpY2EtZXJyb3IuaW50ZXJmYWNlJztcbmltcG9ydCB7XG4gIEV4aWZPcHRpb25zLFxuICBOZ3hQaWNhQ29tcHJlc3NPcHRpb25zSW50ZXJmYWNlLFxuICBOZ3hQaWNhUmVzaXplT3B0aW9uc0ludGVyZmFjZVxufSBmcm9tICcuL25neC1waWNhLXJlc2l6ZS1vcHRpb25zLmludGVyZmFjZSc7XG5pbXBvcnQge05neFBpY2FFeGlmU2VydmljZX0gZnJvbSAnLi9uZ3gtcGljYS1leGlmLnNlcnZpY2UnO1xuaW1wb3J0IFBpY2EgZnJvbSAncGljYSc7XG5pbXBvcnQge3N3aXRjaE1hcH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5cblxuZGVjbGFyZSBsZXQgd2luZG93OiBhbnk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hQaWNhU2VydmljZSB7XG4gIHByaXZhdGUgcGljYVJlc2l6ZXIgPSBuZXcgUGljYSgpO1xuICBwcml2YXRlIE1BWF9TVEVQUyA9IDIwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25neFBpY2FFeGlmU2VydmljZTogTmd4UGljYUV4aWZTZXJ2aWNlKSB7XG4gICAgaWYgKCF0aGlzLnBpY2FSZXNpemVyIHx8ICF0aGlzLnBpY2FSZXNpemVyLnJlc2l6ZSkge1xuICAgICAgdGhpcy5waWNhUmVzaXplciA9IG5ldyB3aW5kb3cuUGljYSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXNpemVJbWFnZXMoZmlsZXM6IEZpbGVbXSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9wdGlvbnM/OiBOZ3hQaWNhUmVzaXplT3B0aW9uc0ludGVyZmFjZSk6IE9ic2VydmFibGU8RmlsZT4ge1xuICAgIGNvbnN0IHJlc2l6ZWRJbWFnZTogU3ViamVjdDxGaWxlPiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgY29uc3QgdG90YWxGaWxlczogbnVtYmVyID0gZmlsZXMubGVuZ3RoO1xuXG4gICAgaWYgKHRvdGFsRmlsZXMgPiAwKSB7XG4gICAgICBjb25zdCBuZXh0RmlsZTogU3ViamVjdDxGaWxlPiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgICBjb25zdCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5leHRGaWxlXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHN3aXRjaE1hcCgoZmlsZTogRmlsZSkgPT4gdGhpcy5yZXNpemVJbWFnZShmaWxlLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKSlcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKGltYWdlUmVzaXplZCA9PiB7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICByZXNpemVkSW1hZ2UubmV4dChpbWFnZVJlc2l6ZWQpO1xuXG4gICAgICAgICAgaWYgKGluZGV4IDwgdG90YWxGaWxlcykge1xuICAgICAgICAgICAgbmV4dEZpbGUubmV4dChmaWxlc1tpbmRleF0pO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc2l6ZWRJbWFnZS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgY29uc3Qgbmd4UGljYUVycm9yOiBOZ3hQaWNhRXJyb3JJbnRlcmZhY2UgPSB7XG4gICAgICAgICAgICBmaWxlOiBmaWxlc1tpbmRleF0sXG4gICAgICAgICAgICBlcnI6IGVyclxuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXNpemVkSW1hZ2UuZXJyb3Iobmd4UGljYUVycm9yKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIG5leHRGaWxlLm5leHQoZmlsZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgbmd4UGljYUVycm9yOiBOZ3hQaWNhRXJyb3JJbnRlcmZhY2UgPSB7XG4gICAgICAgIGVycjogTmd4UGljYUVycm9yVHlwZS5OT19GSUxFU19SRUNFSVZFRFxuICAgICAgfTtcblxuICAgICAgcmVzaXplZEltYWdlLmVycm9yKG5neFBpY2FFcnJvcik7XG4gICAgICByZXNpemVkSW1hZ2UuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzaXplZEltYWdlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIHJlc2l6ZUltYWdlKGZpbGU6IEZpbGUsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBvcHRpb25zPzogTmd4UGljYVJlc2l6ZU9wdGlvbnNJbnRlcmZhY2UpOiBPYnNlcnZhYmxlPEZpbGU+IHtcbiAgICBjb25zdCByZXNpemVkSW1hZ2U6IFN1YmplY3Q8RmlsZT4gPSBuZXcgU3ViamVjdCgpO1xuICAgIGNvbnN0IG9yaWdpbkNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjb25zdCBjdHggPSBvcmlnaW5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBjb25zdCByZWFkZXI6IEZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBleGlmT3B0aW9uczoge1xuICAgICAgICAgIGZvcmNlRXhpZk9yaWVudGF0aW9uOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGN0eCkge1xuICAgICAgcmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICBpbWcub25lcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgICByZXNpemVkSW1hZ2UuZXJyb3Ioe2VycjogTmd4UGljYUVycm9yVHlwZS5SRUFEX0VSUk9SLCBmaWxlOiBmaWxlLCBvcmlnaW5hbF9lcnJvcjogZXJyfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLnByb2Nlc3NJbWFnZUV4aWZPcHRpb25zKGltZywgb3B0aW9ucy5leGlmT3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKG9yaWVudGVkSW1hZ2UgPT4ge1xuICAgICAgICAgICAgICBvcmlnaW5DYW52YXMud2lkdGggPSBvcmllbnRlZEltYWdlLndpZHRoO1xuICAgICAgICAgICAgICBvcmlnaW5DYW52YXMuaGVpZ2h0ID0gb3JpZW50ZWRJbWFnZS5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShvcmllbnRlZEltYWdlLCAwLCAwKTtcblxuICAgICAgICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIG9yaWVudGVkSW1hZ2Uud2lkdGgsIG9yaWVudGVkSW1hZ2UuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hc3BlY3RSYXRpbyAmJiBvcHRpb25zLmFzcGVjdFJhdGlvLmtlZXBBc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgICAgIGxldCByYXRpbyA9IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hc3BlY3RSYXRpby5mb3JjZU1pbkRpbWVuc2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgIHJhdGlvID0gTWF0aC5tYXgod2lkdGggLyBpbWFnZURhdGEud2lkdGgsIGhlaWdodCAvIGltYWdlRGF0YS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByYXRpbyA9IE1hdGgubWluKHdpZHRoIC8gaW1hZ2VEYXRhLndpZHRoLCBoZWlnaHQgLyBpbWFnZURhdGEuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGgucm91bmQoaW1hZ2VEYXRhLndpZHRoICogcmF0aW8pO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGgucm91bmQoaW1hZ2VEYXRhLmhlaWdodCAqIHJhdGlvKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uQ2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbkNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbkNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgdGhpcy5waWNhUmVzaXplKGZpbGUsIG9yaWdpbkNhbnZhcywgZGVzdGluYXRpb25DYW52YXMsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlc2l6ZWRJbWFnZS5lcnJvcihlcnIpKVxuICAgICAgICAgICAgICAgIC50aGVuKChpbWdSZXNpemVkOiBGaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXNpemVkSW1hZ2UubmV4dChpbWdSZXNpemVkKTtcbiAgICAgICAgICAgICAgICAgIHJlc2l6ZWRJbWFnZS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHJlc2l6ZWRJbWFnZS5lcnJvcih7ZXJyOiBOZ3hQaWNhRXJyb3JUeXBlLlJFQURfRVJST1IsIGZpbGU6IGZpbGUsIG9yaWdpbmFsX2Vycm9yOiBlcnJ9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGltZy5zcmMgPSA8c3RyaW5nPnJlYWRlci5yZXN1bHQ7XG4gICAgICB9KTtcblxuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc2l6ZWRJbWFnZS5lcnJvcihOZ3hQaWNhRXJyb3JUeXBlLkNBTlZBU19DT05URVhUX0lERU5USUZJRVJfTk9UX1NVUFBPUlRFRCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc2l6ZWRJbWFnZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBjb21wcmVzc0ltYWdlcyhmaWxlczogRmlsZVtdLCBzaXplSW5NQjogbnVtYmVyLCBvcHRpb25zPzogTmd4UGljYUNvbXByZXNzT3B0aW9uc0ludGVyZmFjZSk6IE9ic2VydmFibGU8RmlsZT4ge1xuICAgIGNvbnN0IGNvbXByZXNzZWRJbWFnZTogU3ViamVjdDxGaWxlPiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgY29uc3QgdG90YWxGaWxlczogbnVtYmVyID0gZmlsZXMubGVuZ3RoO1xuXG4gICAgaWYgKHRvdGFsRmlsZXMgPiAwKSB7XG4gICAgICBjb25zdCBuZXh0RmlsZTogU3ViamVjdDxGaWxlPiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgICBjb25zdCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5leHRGaWxlXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHN3aXRjaE1hcCgoZmlsZTogRmlsZSkgPT4gdGhpcy5jb21wcmVzc0ltYWdlKGZpbGUsIHNpemVJbk1CLCBvcHRpb25zKSlcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKGltYWdlQ29tcHJlc3NlZCA9PiB7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBjb21wcmVzc2VkSW1hZ2UubmV4dChpbWFnZUNvbXByZXNzZWQpO1xuXG4gICAgICAgICAgaWYgKGluZGV4IDwgdG90YWxGaWxlcykge1xuICAgICAgICAgICAgbmV4dEZpbGUubmV4dChmaWxlc1tpbmRleF0pO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXByZXNzZWRJbWFnZS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgY29uc3Qgbmd4UGljYUVycm9yOiBOZ3hQaWNhRXJyb3JJbnRlcmZhY2UgPSB7XG4gICAgICAgICAgICBmaWxlOiBmaWxlc1tpbmRleF0sXG4gICAgICAgICAgICBlcnI6IGVyclxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb21wcmVzc2VkSW1hZ2UuZXJyb3Iobmd4UGljYUVycm9yKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIG5leHRGaWxlLm5leHQoZmlsZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgbmd4UGljYUVycm9yOiBOZ3hQaWNhRXJyb3JJbnRlcmZhY2UgPSB7XG4gICAgICAgIGVycjogTmd4UGljYUVycm9yVHlwZS5OT19GSUxFU19SRUNFSVZFRFxuICAgICAgfTtcblxuICAgICAgY29tcHJlc3NlZEltYWdlLmVycm9yKG5neFBpY2FFcnJvcik7XG4gICAgICBjb21wcmVzc2VkSW1hZ2UuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcHJlc3NlZEltYWdlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIGNvbXByZXNzSW1hZ2UoZmlsZTogRmlsZSwgc2l6ZUluTUI6IG51bWJlciwgb3B0aW9ucz86IE5neFBpY2FDb21wcmVzc09wdGlvbnNJbnRlcmZhY2UpOiBPYnNlcnZhYmxlPEZpbGU+IHtcbiAgICBjb25zdCBjb21wcmVzc2VkSW1hZ2U6IFN1YmplY3Q8RmlsZT4gPSBuZXcgU3ViamVjdCgpO1xuXG4gICAgaWYgKHRoaXMuYnl0ZXNUb01CKGZpbGUuc2l6ZSkgPD0gc2l6ZUluTUIpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb21wcmVzc2VkSW1hZ2UubmV4dChmaWxlKTtcbiAgICAgICAgY29tcHJlc3NlZEltYWdlLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICBjb25zdCBvcmlnaW5DYW52YXM6IEhUTUxDYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICBjb25zdCBjdHggPSBvcmlnaW5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgY29uc3QgcmVhZGVyOiBGaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgZXhpZk9wdGlvbnM6IHtcbiAgICAgICAgICAgIGZvcmNlRXhpZk9yaWVudGF0aW9uOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoY3R4KSB7XG4gICAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzSW1hZ2VFeGlmT3B0aW9ucyhpbWcsIG9wdGlvbnMuZXhpZk9wdGlvbnMpXG4gICAgICAgICAgICAgIC50aGVuKG9yaWVudGVkSW1hZ2UgPT4ge1xuICAgICAgICAgICAgICAgIG9yaWdpbkNhbnZhcy53aWR0aCA9IG9yaWVudGVkSW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgb3JpZ2luQ2FudmFzLmhlaWdodCA9IG9yaWVudGVkSW1hZ2UuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShvcmllbnRlZEltYWdlLCAwLCAwKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q29tcHJlc3NlZEltYWdlKG9yaWdpbkNhbnZhcywgZmlsZS50eXBlLCAxLCBzaXplSW5NQiwgMClcbiAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb21wcmVzc2VkSW1hZ2UuZXJyb3IoZXJyKSlcbiAgICAgICAgICAgICAgICAgIC50aGVuKChibG9iOiBCbG9iKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ0NvbXByZXNzZWQ6IEZpbGUgPSB0aGlzLmJsb2JUb0ZpbGUoYmxvYiwgZmlsZS5uYW1lLCBmaWxlLnR5cGUsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcblxuICAgICAgICAgICAgICAgICAgICBjb21wcmVzc2VkSW1hZ2UubmV4dChpbWdDb21wcmVzc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NlZEltYWdlLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGltZy5zcmMgPSA8c3RyaW5nPnJlYWRlci5yZXN1bHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcHJlc3NlZEltYWdlLmVycm9yKE5neFBpY2FFcnJvclR5cGUuQ0FOVkFTX0NPTlRFWFRfSURFTlRJRklFUl9OT1RfU1VQUE9SVEVEKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29tcHJlc3NlZEltYWdlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzSW1hZ2VFeGlmT3B0aW9ucyhpbWc6IEhUTUxJbWFnZUVsZW1lbnQsIGV4aWZPcHRpb25zOiBFeGlmT3B0aW9ucyk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoZXhpZk9wdGlvbnMuZm9yY2VFeGlmT3JpZW50YXRpb24pIHtcbiAgICAgICAgdGhpcy5fbmd4UGljYUV4aWZTZXJ2aWNlLmdldEV4aWZPcmllbnRlZEltYWdlKGltZylcbiAgICAgICAgICAudGhlbihvcmllbnRlZEltYWdlID0+IHJlc29sdmUob3JpZW50ZWRJbWFnZSkpXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldENvbXByZXNzZWRJbWFnZShjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB0eXBlOiBzdHJpbmcsIHF1YWxpdHk6IG51bWJlciwgc2l6ZUluTUI6IG51bWJlciwgc3RlcDogbnVtYmVyKTogUHJvbWlzZTxCbG9iPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEJsb2I+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucGljYVJlc2l6ZXIudG9CbG9iKGNhbnZhcywgdHlwZSwgcXVhbGl0eSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKVxuICAgICAgICAudGhlbigoYmxvYjogQmxvYikgPT4ge1xuICAgICAgICAgIHRoaXMuY2hlY2tDb21wcmVzc2VkSW1hZ2VTaXplKGNhbnZhcywgYmxvYiwgcXVhbGl0eSwgc2l6ZUluTUIsIHN0ZXApXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gcmVqZWN0KGVycikpXG4gICAgICAgICAgICAudGhlbigoY29tcHJlc3NlZEJsb2I6IEJsb2IpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNvbXByZXNzZWRCbG9iKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrQ29tcHJlc3NlZEltYWdlU2l6ZShcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxuICAgIGJsb2I6IEJsb2IsXG4gICAgcXVhbGl0eTogbnVtYmVyLFxuICAgIHNpemVJbk1COiBudW1iZXIsXG4gICAgc3RlcDogbnVtYmVyXG4gICk6IFByb21pc2U8QmxvYj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxCbG9iPigocmVzb2x2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCkgPT4ge1xuXG4gICAgICBpZiAoc3RlcCA+IHRoaXMuTUFYX1NURVBTKSB7XG4gICAgICAgIHJlamVjdChOZ3hQaWNhRXJyb3JUeXBlLk5PVF9CRV9BQkxFX1RPX0NPTVBSRVNTX0VOT1VHSCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYnl0ZXNUb01CKGJsb2Iuc2l6ZSkgPCBzaXplSW5NQikge1xuICAgICAgICByZXNvbHZlKGJsb2IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbmV3UXVhbGl0eTogbnVtYmVyID0gcXVhbGl0eSAtIChxdWFsaXR5ICogMC4xKTtcbiAgICAgICAgY29uc3QgbmV3U3RlcDogbnVtYmVyID0gc3RlcCArIDE7XG5cbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgY29tcHJlc3Npb25cbiAgICAgICAgcmVzb2x2ZSh0aGlzLmdldENvbXByZXNzZWRJbWFnZShjYW52YXMsIGJsb2IudHlwZSwgbmV3UXVhbGl0eSwgc2l6ZUluTUIsIG5ld1N0ZXApKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcGljYVJlc2l6ZShmaWxlOiBGaWxlLCBmcm9tOiBIVE1MQ2FudmFzRWxlbWVudCwgdG86IEhUTUxDYW52YXNFbGVtZW50LCBvcHRpb25zOiBhbnkpOiBQcm9taXNlPEZpbGU+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8RmlsZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5waWNhUmVzaXplci5yZXNpemUoZnJvbSwgdG8sIG9wdGlvbnMpXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSlcbiAgICAgICAgLnRoZW4oKHJlc2l6ZWRDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSA9PiB0aGlzLnBpY2FSZXNpemVyLnRvQmxvYihyZXNpemVkQ2FudmFzLCBmaWxlLnR5cGUpKVxuICAgICAgICAudGhlbigoYmxvYjogQmxvYikgPT4ge1xuICAgICAgICAgIGNvbnN0IGZpbGVSZXNpemVkOiBGaWxlID0gdGhpcy5ibG9iVG9GaWxlKGJsb2IsIGZpbGUubmFtZSwgZmlsZS50eXBlLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gICAgICAgICAgcmVzb2x2ZShmaWxlUmVzaXplZCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBibG9iVG9GaWxlKGJsb2I6IEJsb2IsIG5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCBsYXN0TW9kaWZpZWQ6IG51bWJlcik6IEZpbGUge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBCbG9iKFtibG9iXSwge3R5cGU6IHR5cGV9KSwge25hbWU6IG5hbWUsIGxhc3RNb2RpZmllZDogbGFzdE1vZGlmaWVkfSk7XG4gIH1cblxuICBwcml2YXRlIGJ5dGVzVG9NQihieXRlczogbnVtYmVyKSB7XG4gICAgcmV0dXJuIGJ5dGVzIC8gMTA0ODU3NjtcbiAgfVxufVxuIl19