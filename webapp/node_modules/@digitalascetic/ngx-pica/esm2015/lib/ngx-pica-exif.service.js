import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as exifr from 'exifr';
import * as ɵngcc0 from '@angular/core';
let NgxPicaExifService = class NgxPicaExifService {
    getExifOrientedImage(image) {
        return new Promise((resolve, reject) => {
            exifr.orientation(image)
                .catch(err => {
                // IF SOMETHING WAS WRONG, WE RETURN ORIGINAL IMAGE
                resolve(image);
            })
                .then(exifOrientation => {
                if (exifOrientation && exifOrientation !== 1) {
                    if (exifOrientation < 1 || exifOrientation > 8) {
                        throw new Error('orientation should be [1-8]');
                    }
                    const canvas = document.createElement('canvas'), ctx = canvas.getContext('2d');
                    let deg = 0, cx = 0, cy = 0, width = image.width, height = image.height;
                    if ([5, 6, 7, 8].indexOf(exifOrientation) > -1) {
                        width = image.height;
                        height = image.width;
                    }
                    canvas.width = width;
                    canvas.height = height;
                    switch (exifOrientation) {
                        case 3:
                        case 4:
                            cx = -image.width;
                            cy = -image.height;
                            deg = 180;
                            break;
                        case 5:
                        case 6:
                            cy = -image.height;
                            deg = 90;
                            break;
                        case 7:
                        case 8:
                            cx = -image.width;
                            deg = 270;
                            break;
                        default:
                            break;
                    }
                    if ([2, 4, 5, 7].indexOf(exifOrientation) > -1) {
                        ctx.translate(width, 0);
                        ctx.scale(-1, 1);
                    }
                    ctx.rotate(deg / 180 * Math.PI);
                    ctx.drawImage(image, cx, cy);
                    const img = new Image();
                    img.width = width;
                    img.height = height;
                    img.onload = () => {
                        resolve(img);
                    };
                    img.src = canvas.toDataURL();
                }
                else {
                    resolve(image);
                }
            });
        });
    }
};
NgxPicaExifService.ɵfac = function NgxPicaExifService_Factory(t) { return new (t || NgxPicaExifService)(); };
NgxPicaExifService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxPicaExifService, factory: NgxPicaExifService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPicaExifService, [{
        type: Injectable
    }], null, null); })();
export { NgxPicaExifService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBpY2EtZXhpZi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQGRpZ2l0YWxhc2NldGljL25neC1waWNhL2xpYi9uZ3gtcGljYS1leGlmLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7O0FBSS9CLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0FBQy9CLElBQ1Msb0JBQW9CLENBQUMsS0FBdUI7QUFBSSxRQUNyRCxPQUFPLElBQUksT0FBTyxDQUFtQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtBQUM3RCxZQUFNLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO0FBQzlCLGlCQUFTLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNyQixnQkFBVSxtREFBbUQ7QUFDN0QsZ0JBQVUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFlBQVEsQ0FBQyxDQUFDO0FBQ1YsaUJBQVMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFO0FBQ2hDLGdCQUNVLElBQUksZUFBZSxJQUFJLGVBQWUsS0FBSyxDQUFDLEVBQUU7QUFDeEQsb0JBQ1ksSUFBSSxlQUFlLEdBQUcsQ0FBQyxJQUFJLGVBQWUsR0FBRyxDQUFDLEVBQUU7QUFDNUQsd0JBQWMsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQzdELHFCQUFhO0FBQ2Isb0JBQ1ksTUFBTSxNQUFNLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQ2hFLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDLG9CQUNZLElBQUksR0FBRyxHQUFHLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxFQUNOLEVBQUUsR0FBRyxDQUFDLEVBQ04sS0FBSyxHQUFXLEtB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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgZXhpZnIgZnJvbSAnZXhpZnInO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hQaWNhRXhpZlNlcnZpY2Uge1xuXG4gIHB1YmxpYyBnZXRFeGlmT3JpZW50ZWRJbWFnZShpbWFnZTogSFRNTEltYWdlRWxlbWVudCk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBleGlmci5vcmllbnRhdGlvbihpbWFnZSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgLy8gSUYgU09NRVRISU5HIFdBUyBXUk9ORywgV0UgUkVUVVJOIE9SSUdJTkFMIElNQUdFXG4gICAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGV4aWZPcmllbnRhdGlvbiA9PiB7XG5cbiAgICAgICAgICBpZiAoZXhpZk9yaWVudGF0aW9uICYmIGV4aWZPcmllbnRhdGlvbiAhPT0gMSkge1xuXG4gICAgICAgICAgICBpZiAoZXhpZk9yaWVudGF0aW9uIDwgMSB8fCBleGlmT3JpZW50YXRpb24gPiA4KSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignb3JpZW50YXRpb24gc2hvdWxkIGJlIFsxLThdJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgICAgIGxldCBkZWcgPSAwLFxuICAgICAgICAgICAgICBjeCA9IDAsXG4gICAgICAgICAgICAgIGN5ID0gMCxcbiAgICAgICAgICAgICAgd2lkdGg6IG51bWJlciA9IGltYWdlLndpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQ6IG51bWJlciA9IGltYWdlLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKFs1LCA2LCA3LCA4XS5pbmRleE9mKGV4aWZPcmllbnRhdGlvbikgPiAtMSkge1xuICAgICAgICAgICAgICB3aWR0aCA9IGltYWdlLmhlaWdodDtcbiAgICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAgICAgc3dpdGNoIChleGlmT3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY3ggPSAtaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgY3kgPSAtaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGRlZyA9IDE4MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgY3kgPSAtaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGRlZyA9IDkwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBjeCA9IC1pbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICBkZWcgPSAyNzA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChbMiwgNCwgNSwgN10uaW5kZXhPZihleGlmT3JpZW50YXRpb24pID4gLTEpIHtcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh3aWR0aCwgMCk7XG4gICAgICAgICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN0eC5yb3RhdGUoZGVnIC8gMTgwICogTWF0aC5QSSk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCBjeCwgY3kpO1xuXG4gICAgICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICAgICAgaW1nLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBpbWcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWcuc3JjID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==