import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { NgxPicaErrorType } from './ngx-pica-error.interface';
import { NgxPicaExifService } from './ngx-pica-exif.service';
import Pica from 'pica';
import { switchMap } from "rxjs/operators";
let NgxPicaService = class NgxPicaService {
    constructor(_ngxPicaExifService) {
        this._ngxPicaExifService = _ngxPicaExifService;
        this.picaResizer = new Pica();
        this.MAX_STEPS = 20;
        if (!this.picaResizer || !this.picaResizer.resize) {
            this.picaResizer = new window.Pica();
        }
    }
    resizeImages(files, width, height, options) {
        const resizedImage = new Subject();
        const totalFiles = files.length;
        if (totalFiles > 0) {
            const nextFile = new Subject();
            let index = 0;
            const subscription = nextFile
                .pipe(switchMap((file) => this.resizeImage(file, width, height, options)))
                .subscribe(imageResized => {
                index++;
                resizedImage.next(imageResized);
                if (index < totalFiles) {
                    nextFile.next(files[index]);
                }
                else {
                    resizedImage.complete();
                    subscription.unsubscribe();
                }
            }, (err) => {
                const ngxPicaError = {
                    file: files[index],
                    err: err
                };
                resizedImage.error(ngxPicaError);
            });
            nextFile.next(files[index]);
        }
        else {
            const ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            resizedImage.error(ngxPicaError);
            resizedImage.complete();
        }
        return resizedImage.asObservable();
    }
    resizeImage(file, width, height, options) {
        const resizedImage = new Subject();
        const originCanvas = document.createElement('canvas');
        const ctx = originCanvas.getContext('2d');
        const img = new Image();
        const reader = new FileReader();
        if (!options) {
            options = {
                exifOptions: {
                    forceExifOrientation: true
                }
            };
        }
        if (ctx) {
            reader.addEventListener('load', (event) => {
                img.onerror = (err) => {
                    resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                };
                img.onload = () => {
                    this.processImageExifOptions(img, options.exifOptions)
                        .then(orientedImage => {
                        originCanvas.width = orientedImage.width;
                        originCanvas.height = orientedImage.height;
                        ctx.drawImage(orientedImage, 0, 0);
                        const imageData = ctx.getImageData(0, 0, orientedImage.width, orientedImage.height);
                        if (options && options.aspectRatio && options.aspectRatio.keepAspectRatio) {
                            let ratio = 0;
                            if (options.aspectRatio.forceMinDimensions) {
                                ratio = Math.max(width / imageData.width, height / imageData.height);
                            }
                            else {
                                ratio = Math.min(width / imageData.width, height / imageData.height);
                            }
                            width = Math.round(imageData.width * ratio);
                            height = Math.round(imageData.height * ratio);
                        }
                        const destinationCanvas = document.createElement('canvas');
                        destinationCanvas.width = width;
                        destinationCanvas.height = height;
                        this.picaResize(file, originCanvas, destinationCanvas, options)
                            .catch((err) => resizedImage.error(err))
                            .then((imgResized) => {
                            resizedImage.next(imgResized);
                            resizedImage.complete();
                        });
                    })
                        .catch((err) => {
                        resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                    });
                };
                img.src = reader.result;
            });
            reader.readAsDataURL(file);
        }
        else {
            resizedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
        }
        return resizedImage.asObservable();
    }
    compressImages(files, sizeInMB, options) {
        const compressedImage = new Subject();
        const totalFiles = files.length;
        if (totalFiles > 0) {
            const nextFile = new Subject();
            let index = 0;
            const subscription = nextFile
                .pipe(switchMap((file) => this.compressImage(file, sizeInMB, options)))
                .subscribe(imageCompressed => {
                index++;
                compressedImage.next(imageCompressed);
                if (index < totalFiles) {
                    nextFile.next(files[index]);
                }
                else {
                    compressedImage.complete();
                    subscription.unsubscribe();
                }
            }, (err) => {
                const ngxPicaError = {
                    file: files[index],
                    err: err
                };
                compressedImage.error(ngxPicaError);
            });
            nextFile.next(files[index]);
        }
        else {
            const ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            compressedImage.error(ngxPicaError);
            compressedImage.complete();
        }
        return compressedImage.asObservable();
    }
    compressImage(file, sizeInMB, options) {
        const compressedImage = new Subject();
        if (this.bytesToMB(file.size) <= sizeInMB) {
            setTimeout(() => {
                compressedImage.next(file);
                compressedImage.complete();
            });
        }
        else {
            const originCanvas = document.createElement('canvas');
            const ctx = originCanvas.getContext('2d');
            const img = new Image();
            const reader = new FileReader();
            if (!options) {
                options = {
                    exifOptions: {
                        forceExifOrientation: true
                    }
                };
            }
            if (ctx) {
                reader.addEventListener('load', (event) => {
                    img.onload = () => {
                        this.processImageExifOptions(img, options.exifOptions)
                            .then(orientedImage => {
                            originCanvas.width = orientedImage.width;
                            originCanvas.height = orientedImage.height;
                            ctx.drawImage(orientedImage, 0, 0);
                            this.getCompressedImage(originCanvas, file.type, 1, sizeInMB, 0)
                                .catch((err) => compressedImage.error(err))
                                .then((blob) => {
                                const imgCompressed = this.blobToFile(blob, file.name, file.type, new Date().getTime());
                                compressedImage.next(imgCompressed);
                                compressedImage.complete();
                            });
                        });
                    };
                    img.src = reader.result;
                });
                reader.readAsDataURL(file);
            }
            else {
                compressedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
            }
        }
        return compressedImage.asObservable();
    }
    processImageExifOptions(img, exifOptions) {
        return new Promise((resolve, reject) => {
            if (exifOptions.forceExifOrientation) {
                this._ngxPicaExifService.getExifOrientedImage(img)
                    .then(orientedImage => resolve(orientedImage))
                    .catch(err => reject(err));
            }
            else {
                resolve(img);
            }
        });
    }
    getCompressedImage(canvas, type, quality, sizeInMB, step) {
        return new Promise((resolve, reject) => {
            this.picaResizer.toBlob(canvas, type, quality)
                .catch((err) => reject(err))
                .then((blob) => {
                this.checkCompressedImageSize(canvas, blob, quality, sizeInMB, step)
                    .catch((err) => reject(err))
                    .then((compressedBlob) => {
                    resolve(compressedBlob);
                });
            });
        });
    }
    checkCompressedImageSize(canvas, blob, quality, sizeInMB, step) {
        return new Promise((resolve, reject) => {
            if (step > this.MAX_STEPS) {
                reject(NgxPicaErrorType.NOT_BE_ABLE_TO_COMPRESS_ENOUGH);
            }
            else if (this.bytesToMB(blob.size) < sizeInMB) {
                resolve(blob);
            }
            else {
                const newQuality = quality - (quality * 0.1);
                const newStep = step + 1;
                // recursively compression
                resolve(this.getCompressedImage(canvas, blob.type, newQuality, sizeInMB, newStep));
            }
        });
    }
    picaResize(file, from, to, options) {
        return new Promise((resolve, reject) => {
            this.picaResizer.resize(from, to, options)
                .catch((err) => reject(err))
                .then((resizedCanvas) => this.picaResizer.toBlob(resizedCanvas, file.type))
                .then((blob) => {
                const fileResized = this.blobToFile(blob, file.name, file.type, new Date().getTime());
                resolve(fileResized);
            });
        });
    }
    blobToFile(blob, name, type, lastModified) {
        return Object.assign(new Blob([blob], { type: type }), { name: name, lastModified: lastModified });
    }
    bytesToMB(bytes) {
        return bytes / 1048576;
    }
};
NgxPicaService.ctorParameters = () => [
    { type: NgxPicaExifService }
];
NgxPicaService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [NgxPicaExifService])
], NgxPicaService);
export { NgxPicaService };
//# sourceMappingURL=data:application/json;base64,