import { __decorate, __metadata } from 'tslib';
import { Injectable, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { orientation } from 'exifr';
import Pica from 'pica';
import { switchMap } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
var NgxPicaErrorType;
(function (NgxPicaErrorType) {
    NgxPicaErrorType["NO_FILES_RECEIVED"] = "NO_FILES_RECEIVED";
    NgxPicaErrorType["CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED"] = "CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED";
    NgxPicaErrorType["NOT_BE_ABLE_TO_COMPRESS_ENOUGH"] = "NOT_BE_ABLE_TO_COMPRESS_ENOUGH";
    NgxPicaErrorType["READ_ERROR"] = "IMAGE_COULD_NOT_BE_LOADED";
})(NgxPicaErrorType || (NgxPicaErrorType = {}));

let NgxPicaExifService = class NgxPicaExifService {
    getExifOrientedImage(image) {
        return new Promise((resolve, reject) => {
            orientation(image)
                .catch(err => {
                // IF SOMETHING WAS WRONG, WE RETURN ORIGINAL IMAGE
                resolve(image);
            })
                .then(exifOrientation => {
                if (exifOrientation && exifOrientation !== 1) {
                    if (exifOrientation < 1 || exifOrientation > 8) {
                        throw new Error('orientation should be [1-8]');
                    }
                    const canvas = document.createElement('canvas'), ctx = canvas.getContext('2d');
                    let deg = 0, cx = 0, cy = 0, width = image.width, height = image.height;
                    if ([5, 6, 7, 8].indexOf(exifOrientation) > -1) {
                        width = image.height;
                        height = image.width;
                    }
                    canvas.width = width;
                    canvas.height = height;
                    switch (exifOrientation) {
                        case 3:
                        case 4:
                            cx = -image.width;
                            cy = -image.height;
                            deg = 180;
                            break;
                        case 5:
                        case 6:
                            cy = -image.height;
                            deg = 90;
                            break;
                        case 7:
                        case 8:
                            cx = -image.width;
                            deg = 270;
                            break;
                        default:
                            break;
                    }
                    if ([2, 4, 5, 7].indexOf(exifOrientation) > -1) {
                        ctx.translate(width, 0);
                        ctx.scale(-1, 1);
                    }
                    ctx.rotate(deg / 180 * Math.PI);
                    ctx.drawImage(image, cx, cy);
                    const img = new Image();
                    img.width = width;
                    img.height = height;
                    img.onload = () => {
                        resolve(img);
                    };
                    img.src = canvas.toDataURL();
                }
                else {
                    resolve(image);
                }
            });
        });
    }
};
NgxPicaExifService.ɵfac = function NgxPicaExifService_Factory(t) { return new (t || NgxPicaExifService)(); };
NgxPicaExifService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxPicaExifService, factory: NgxPicaExifService.ɵfac });

let NgxPicaService = class NgxPicaService {
    constructor(_ngxPicaExifService) {
        this._ngxPicaExifService = _ngxPicaExifService;
        this.picaResizer = new Pica();
        this.MAX_STEPS = 20;
        if (!this.picaResizer || !this.picaResizer.resize) {
            this.picaResizer = new window.Pica();
        }
    }
    resizeImages(files, width, height, options) {
        const resizedImage = new Subject();
        const totalFiles = files.length;
        if (totalFiles > 0) {
            const nextFile = new Subject();
            let index = 0;
            const subscription = nextFile
                .pipe(switchMap((file) => this.resizeImage(file, width, height, options)))
                .subscribe(imageResized => {
                index++;
                resizedImage.next(imageResized);
                if (index < totalFiles) {
                    nextFile.next(files[index]);
                }
                else {
                    resizedImage.complete();
                    subscription.unsubscribe();
                }
            }, (err) => {
                const ngxPicaError = {
                    file: files[index],
                    err: err
                };
                resizedImage.error(ngxPicaError);
            });
            nextFile.next(files[index]);
        }
        else {
            const ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            resizedImage.error(ngxPicaError);
            resizedImage.complete();
        }
        return resizedImage.asObservable();
    }
    resizeImage(file, width, height, options) {
        const resizedImage = new Subject();
        const originCanvas = document.createElement('canvas');
        const ctx = originCanvas.getContext('2d');
        const img = new Image();
        const reader = new FileReader();
        if (!options) {
            options = {
                exifOptions: {
                    forceExifOrientation: true
                }
            };
        }
        if (ctx) {
            reader.addEventListener('load', (event) => {
                img.onerror = (err) => {
                    resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                };
                img.onload = () => {
                    this.processImageExifOptions(img, options.exifOptions)
                        .then(orientedImage => {
                        originCanvas.width = orientedImage.width;
                        originCanvas.height = orientedImage.height;
                        ctx.drawImage(orientedImage, 0, 0);
                        const imageData = ctx.getImageData(0, 0, orientedImage.width, orientedImage.height);
                        if (options && options.aspectRatio && options.aspectRatio.keepAspectRatio) {
                            let ratio = 0;
                            if (options.aspectRatio.forceMinDimensions) {
                                ratio = Math.max(width / imageData.width, height / imageData.height);
                            }
                            else {
                                ratio = Math.min(width / imageData.width, height / imageData.height);
                            }
                            width = Math.round(imageData.width * ratio);
                            height = Math.round(imageData.height * ratio);
                        }
                        const destinationCanvas = document.createElement('canvas');
                        destinationCanvas.width = width;
                        destinationCanvas.height = height;
                        this.picaResize(file, originCanvas, destinationCanvas, options)
                            .catch((err) => resizedImage.error(err))
                            .then((imgResized) => {
                            resizedImage.next(imgResized);
                            resizedImage.complete();
                        });
                    })
                        .catch((err) => {
                        resizedImage.error({ err: NgxPicaErrorType.READ_ERROR, file: file, original_error: err });
                    });
                };
                img.src = reader.result;
            });
            reader.readAsDataURL(file);
        }
        else {
            resizedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
        }
        return resizedImage.asObservable();
    }
    compressImages(files, sizeInMB, options) {
        const compressedImage = new Subject();
        const totalFiles = files.length;
        if (totalFiles > 0) {
            const nextFile = new Subject();
            let index = 0;
            const subscription = nextFile
                .pipe(switchMap((file) => this.compressImage(file, sizeInMB, options)))
                .subscribe(imageCompressed => {
                index++;
                compressedImage.next(imageCompressed);
                if (index < totalFiles) {
                    nextFile.next(files[index]);
                }
                else {
                    compressedImage.complete();
                    subscription.unsubscribe();
                }
            }, (err) => {
                const ngxPicaError = {
                    file: files[index],
                    err: err
                };
                compressedImage.error(ngxPicaError);
            });
            nextFile.next(files[index]);
        }
        else {
            const ngxPicaError = {
                err: NgxPicaErrorType.NO_FILES_RECEIVED
            };
            compressedImage.error(ngxPicaError);
            compressedImage.complete();
        }
        return compressedImage.asObservable();
    }
    compressImage(file, sizeInMB, options) {
        const compressedImage = new Subject();
        if (this.bytesToMB(file.size) <= sizeInMB) {
            setTimeout(() => {
                compressedImage.next(file);
                compressedImage.complete();
            });
        }
        else {
            const originCanvas = document.createElement('canvas');
            const ctx = originCanvas.getContext('2d');
            const img = new Image();
            const reader = new FileReader();
            if (!options) {
                options = {
                    exifOptions: {
                        forceExifOrientation: true
                    }
                };
            }
            if (ctx) {
                reader.addEventListener('load', (event) => {
                    img.onload = () => {
                        this.processImageExifOptions(img, options.exifOptions)
                            .then(orientedImage => {
                            originCanvas.width = orientedImage.width;
                            originCanvas.height = orientedImage.height;
                            ctx.drawImage(orientedImage, 0, 0);
                            this.getCompressedImage(originCanvas, file.type, 1, sizeInMB, 0)
                                .catch((err) => compressedImage.error(err))
                                .then((blob) => {
                                const imgCompressed = this.blobToFile(blob, file.name, file.type, new Date().getTime());
                                compressedImage.next(imgCompressed);
                                compressedImage.complete();
                            });
                        });
                    };
                    img.src = reader.result;
                });
                reader.readAsDataURL(file);
            }
            else {
                compressedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);
            }
        }
        return compressedImage.asObservable();
    }
    processImageExifOptions(img, exifOptions) {
        return new Promise((resolve, reject) => {
            if (exifOptions.forceExifOrientation) {
                this._ngxPicaExifService.getExifOrientedImage(img)
                    .then(orientedImage => resolve(orientedImage))
                    .catch(err => reject(err));
            }
            else {
                resolve(img);
            }
        });
    }
    getCompressedImage(canvas, type, quality, sizeInMB, step) {
        return new Promise((resolve, reject) => {
            this.picaResizer.toBlob(canvas, type, quality)
                .catch((err) => reject(err))
                .then((blob) => {
                this.checkCompressedImageSize(canvas, blob, quality, sizeInMB, step)
                    .catch((err) => reject(err))
                    .then((compressedBlob) => {
                    resolve(compressedBlob);
                });
            });
        });
    }
    checkCompressedImageSize(canvas, blob, quality, sizeInMB, step) {
        return new Promise((resolve, reject) => {
            if (step > this.MAX_STEPS) {
                reject(NgxPicaErrorType.NOT_BE_ABLE_TO_COMPRESS_ENOUGH);
            }
            else if (this.bytesToMB(blob.size) < sizeInMB) {
                resolve(blob);
            }
            else {
                const newQuality = quality - (quality * 0.1);
                const newStep = step + 1;
                // recursively compression
                resolve(this.getCompressedImage(canvas, blob.type, newQuality, sizeInMB, newStep));
            }
        });
    }
    picaResize(file, from, to, options) {
        return new Promise((resolve, reject) => {
            this.picaResizer.resize(from, to, options)
                .catch((err) => reject(err))
                .then((resizedCanvas) => this.picaResizer.toBlob(resizedCanvas, file.type))
                .then((blob) => {
                const fileResized = this.blobToFile(blob, file.name, file.type, new Date().getTime());
                resolve(fileResized);
            });
        });
    }
    blobToFile(blob, name, type, lastModified) {
        return Object.assign(new Blob([blob], { type: type }), { name: name, lastModified: lastModified });
    }
    bytesToMB(bytes) {
        return bytes / 1048576;
    }
};
NgxPicaService.ɵfac = function NgxPicaService_Factory(t) { return new (t || NgxPicaService)(ɵngcc0.ɵɵinject(NgxPicaExifService)); };
NgxPicaService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxPicaService, factory: NgxPicaService.ɵfac });
NgxPicaService.ctorParameters = () => [
    { type: NgxPicaExifService }
];
NgxPicaService = __decorate([ __metadata("design:paramtypes", [NgxPicaExifService])
], NgxPicaService);

let NgxPicaImageService = class NgxPicaImageService {
    constructor() {
        this.imageExtensions = [
            'ase',
            'art',
            'bmp',
            'blp',
            'cd5',
            'cit',
            'cpt',
            'cr2',
            'cut',
            'dds',
            'dib',
            'djvu',
            'egt',
            'exif',
            'gif',
            'gpl',
            'grf',
            'icns',
            'ico',
            'iff',
            'jng',
            'jpeg',
            'jpg',
            'jfif',
            'jp2',
            'jps',
            'lbm',
            'max',
            'miff',
            'mng',
            'msp',
            'nitf',
            'ota',
            'pbm',
            'pc1',
            'pc2',
            'pc3',
            'pcf',
            'pcx',
            'pdn',
            'pgm',
            'PI1',
            'PI2',
            'PI3',
            'pict',
            'pct',
            'pnm',
            'pns',
            'ppm',
            'psb',
            'psd',
            'pdd',
            'psp',
            'px',
            'pxm',
            'pxr',
            'qfx',
            'raw',
            'rle',
            'sct',
            'sgi',
            'rgb',
            'int',
            'bw',
            'tga',
            'tiff',
            'tif',
            'vtf',
            'xbm',
            'xcf',
            'xpm',
            '3dv',
            'amf',
            'ai',
            'awg',
            'cgm',
            'cdr',
            'cmx',
            'dxf',
            'e2d',
            'egt',
            'eps',
            'fs',
            'gbr',
            'odg',
            'svg',
            'stl',
            'vrml',
            'x3d',
            'sxd',
            'v2d',
            'vnd',
            'wmf',
            'emf',
            'art',
            'xar',
            'png',
            'webp',
            'jxr',
            'hdp',
            'wdp',
            'cur',
            'ecw',
            'iff',
            'lbm',
            'liff',
            'nrrd',
            'pam',
            'pcx',
            'pgf',
            'sgi',
            'rgb',
            'rgba',
            'bw',
            'int',
            'inta',
            'sid',
            'ras',
            'sun',
            'tga'
        ];
    }
    isImage(file) {
        const fileExtension = file.name.toLowerCase().substr(file.name.lastIndexOf('.') + 1);
        return (this.imageExtensions.indexOf(fileExtension) !== -1);
    }
};
NgxPicaImageService.ɵfac = function NgxPicaImageService_Factory(t) { return new (t || NgxPicaImageService)(); };
NgxPicaImageService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxPicaImageService, factory: NgxPicaImageService.ɵfac });

let NgxPicaModule = class NgxPicaModule {
};
NgxPicaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxPicaModule });
NgxPicaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxPicaModule_Factory(t) { return new (t || NgxPicaModule)(); }, providers: [
        { provide: NgxPicaService, useClass: NgxPicaService },
        { provide: NgxPicaExifService, useClass: NgxPicaExifService },
        { provide: NgxPicaImageService, useClass: NgxPicaImageService },
    ] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPicaExifService, [{
        type: Injectable
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPicaService, [{
        type: Injectable
    }], function () { return [{ type: NgxPicaExifService }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPicaImageService, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPicaModule, [{
        type: NgModule,
        args: [{
                providers: [
                    { provide: NgxPicaService, useClass: NgxPicaService },
                    { provide: NgxPicaExifService, useClass: NgxPicaExifService },
                    { provide: NgxPicaImageService, useClass: NgxPicaImageService },
                ]
            }]
    }], null, null); })();

/*
 * Public API Surface of ngx-pica
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxPicaImageService, NgxPicaModule, NgxPicaService, NgxPicaExifService as ɵa };

//# sourceMappingURL=digitalascetic-ngx-pica.js.map